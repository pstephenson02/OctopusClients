### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.IUserRepository
  commentId: T:Octopus.Client.Repositories.Async.IUserRepository
  id: IUserRepository
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.IUserRepository.Create(System.String,System.String,System.String,System.String)
  - Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey(Octopus.Client.Model.UserResource,System.String,System.Nullable{System.DateTimeOffset})
  - Octopus.Client.Repositories.Async.IUserRepository.CreateServiceAccount(System.String,System.String)
  - Octopus.Client.Repositories.Async.IUserRepository.FindByUsername(System.String)
  - Octopus.Client.Repositories.Async.IUserRepository.GetApiKeys(Octopus.Client.Model.UserResource)
  - Octopus.Client.Repositories.Async.IUserRepository.GetCurrent
  - Octopus.Client.Repositories.Async.IUserRepository.GetSpaces(Octopus.Client.Model.UserResource)
  - Octopus.Client.Repositories.Async.IUserRepository.Invite(Octopus.Client.Model.ReferenceCollection)
  - Octopus.Client.Repositories.Async.IUserRepository.Invite(System.String)
  - Octopus.Client.Repositories.Async.IUserRepository.Register(Octopus.Client.Model.RegisterCommand)
  - Octopus.Client.Repositories.Async.IUserRepository.RevokeApiKey(Octopus.Client.Model.ApiKeyResourceBase)
  - Octopus.Client.Repositories.Async.IUserRepository.SignIn(Octopus.Client.Model.LoginCommand)
  - Octopus.Client.Repositories.Async.IUserRepository.SignIn(System.String,System.String,System.Boolean)
  - Octopus.Client.Repositories.Async.IUserRepository.SignOut
  langs:
  - csharp
  - vb
  name: IUserRepository
  nameWithType: IUserRepository
  fullName: Octopus.Client.Repositories.Async.IUserRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IUserRepository
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 7
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: 'public interface IUserRepository : IPaginate<UserResource>, IGet<UserResource>, IModify<UserResource>, IDelete<UserResource>, ICreate<UserResource>'
    content.vb: >-
      Public Interface IUserRepository
          Inherits IPaginate(Of UserResource), IGet(Of UserResource), IModify(Of UserResource), IDelete(Of UserResource), ICreate(Of UserResource)
  inheritedMembers:
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.UserResource},System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindOne(System.Func{Octopus.Client.Model.UserResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindMany(System.Func{Octopus.Client.Model.UserResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindAll(System.String,System.Object)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Get(System.String)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Get(System.String[])
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Refresh(Octopus.Client.Model.UserResource)
  - Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.UserResource}.Modify(Octopus.Client.Model.UserResource)
  - Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.UserResource}.Delete(Octopus.Client.Model.UserResource)
  - Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.UserResource}.Create(Octopus.Client.Model.UserResource,System.Object)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.Async.IUserRepository.FindByUsername(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.FindByUsername(System.String)
  id: FindByUsername(System.String)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: FindByUsername(String)
  nameWithType: IUserRepository.FindByUsername(String)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.FindByUsername(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindByUsername
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 14
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<UserResource> FindByUsername(string username)
    parameters:
    - id: username
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
    content.vb: Function FindByUsername(username As String) As Task(Of UserResource)
  overload: Octopus.Client.Repositories.Async.IUserRepository.FindByUsername*
- uid: Octopus.Client.Repositories.Async.IUserRepository.Create(System.String,System.String,System.String,System.String)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.Create(System.String,System.String,System.String,System.String)
  id: Create(System.String,System.String,System.String,System.String)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: Create(String, String, String, String)
  nameWithType: IUserRepository.Create(String, String, String, String)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.Create(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Create
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 15
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<UserResource> Create(string username, string displayName, string password = null, string emailAddress = null)
    parameters:
    - id: username
      type: System.String
    - id: displayName
      type: System.String
    - id: password
      type: System.String
    - id: emailAddress
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
    content.vb: Function Create(username As String, displayName As String, password As String = Nothing, emailAddress As String = Nothing) As Task(Of UserResource)
  overload: Octopus.Client.Repositories.Async.IUserRepository.Create*
- uid: Octopus.Client.Repositories.Async.IUserRepository.CreateServiceAccount(System.String,System.String)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.CreateServiceAccount(System.String,System.String)
  id: CreateServiceAccount(System.String,System.String)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: CreateServiceAccount(String, String)
  nameWithType: IUserRepository.CreateServiceAccount(String, String)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.CreateServiceAccount(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CreateServiceAccount
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 16
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<UserResource> CreateServiceAccount(string username, string displayName)
    parameters:
    - id: username
      type: System.String
    - id: displayName
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
    content.vb: Function CreateServiceAccount(username As String, displayName As String) As Task(Of UserResource)
  overload: Octopus.Client.Repositories.Async.IUserRepository.CreateServiceAccount*
- uid: Octopus.Client.Repositories.Async.IUserRepository.Register(Octopus.Client.Model.RegisterCommand)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.Register(Octopus.Client.Model.RegisterCommand)
  id: Register(Octopus.Client.Model.RegisterCommand)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: Register(RegisterCommand)
  nameWithType: IUserRepository.Register(RegisterCommand)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.Register(Octopus.Client.Model.RegisterCommand)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Register
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 17
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<UserResource> Register(RegisterCommand registerCommand)
    parameters:
    - id: registerCommand
      type: Octopus.Client.Model.RegisterCommand
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
    content.vb: Function Register(registerCommand As RegisterCommand) As Task(Of UserResource)
  overload: Octopus.Client.Repositories.Async.IUserRepository.Register*
- uid: Octopus.Client.Repositories.Async.IUserRepository.SignIn(Octopus.Client.Model.LoginCommand)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.SignIn(Octopus.Client.Model.LoginCommand)
  id: SignIn(Octopus.Client.Model.LoginCommand)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: SignIn(LoginCommand)
  nameWithType: IUserRepository.SignIn(LoginCommand)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.SignIn(Octopus.Client.Model.LoginCommand)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SignIn
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 18
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task SignIn(LoginCommand loginCommand)
    parameters:
    - id: loginCommand
      type: Octopus.Client.Model.LoginCommand
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SignIn(loginCommand As LoginCommand) As Task
  overload: Octopus.Client.Repositories.Async.IUserRepository.SignIn*
- uid: Octopus.Client.Repositories.Async.IUserRepository.SignIn(System.String,System.String,System.Boolean)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.SignIn(System.String,System.String,System.Boolean)
  id: SignIn(System.String,System.String,System.Boolean)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: SignIn(String, String, Boolean)
  nameWithType: IUserRepository.SignIn(String, String, Boolean)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.SignIn(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SignIn
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 19
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task SignIn(string username, string password, bool rememberMe = false)
    parameters:
    - id: username
      type: System.String
    - id: password
      type: System.String
    - id: rememberMe
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SignIn(username As String, password As String, rememberMe As Boolean = False) As Task
  overload: Octopus.Client.Repositories.Async.IUserRepository.SignIn*
- uid: Octopus.Client.Repositories.Async.IUserRepository.SignOut
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.SignOut
  id: SignOut
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: SignOut()
  nameWithType: IUserRepository.SignOut()
  fullName: Octopus.Client.Repositories.Async.IUserRepository.SignOut()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SignOut
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 20
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task SignOut()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SignOut As Task
  overload: Octopus.Client.Repositories.Async.IUserRepository.SignOut*
- uid: Octopus.Client.Repositories.Async.IUserRepository.GetCurrent
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.GetCurrent
  id: GetCurrent
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: IUserRepository.GetCurrent()
  fullName: Octopus.Client.Repositories.Async.IUserRepository.GetCurrent()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetCurrent
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 21
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<UserResource> GetCurrent()
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
    content.vb: Function GetCurrent As Task(Of UserResource)
  overload: Octopus.Client.Repositories.Async.IUserRepository.GetCurrent*
- uid: Octopus.Client.Repositories.Async.IUserRepository.GetSpaces(Octopus.Client.Model.UserResource)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.GetSpaces(Octopus.Client.Model.UserResource)
  id: GetSpaces(Octopus.Client.Model.UserResource)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: GetSpaces(UserResource)
  nameWithType: IUserRepository.GetSpaces(UserResource)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.GetSpaces(Octopus.Client.Model.UserResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetSpaces
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 22
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<SpaceResource[]> GetSpaces(UserResource user)
    parameters:
    - id: user
      type: Octopus.Client.Model.UserResource
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.SpaceResource[]}
    content.vb: Function GetSpaces(user As UserResource) As Task(Of SpaceResource())
  overload: Octopus.Client.Repositories.Async.IUserRepository.GetSpaces*
- uid: Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey(Octopus.Client.Model.UserResource,System.String,System.Nullable{System.DateTimeOffset})
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey(Octopus.Client.Model.UserResource,System.String,System.Nullable{System.DateTimeOffset})
  id: CreateApiKey(Octopus.Client.Model.UserResource,System.String,System.Nullable{System.DateTimeOffset})
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: CreateApiKey(UserResource, String, Nullable<DateTimeOffset>)
  nameWithType: IUserRepository.CreateApiKey(UserResource, String, Nullable<DateTimeOffset>)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey(Octopus.Client.Model.UserResource, System.String, System.Nullable<System.DateTimeOffset>)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CreateApiKey
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 33
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  summary: "\nCreates a new API key for a user.\n"
  example: []
  syntax:
    content: Task<ApiKeyCreatedResource> CreateApiKey(UserResource user, string purpose = null, DateTimeOffset? expires = default(DateTimeOffset? ))
    parameters:
    - id: user
      type: Octopus.Client.Model.UserResource
      description: The user to create the key for.
    - id: purpose
      type: System.String
      description: The purpose of the API key.
    - id: expires
      type: System.Nullable{System.DateTimeOffset}
      description: The expiry date of the key. If null, the key will never expire.
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ApiKeyCreatedResource}
      description: The newly created API key resource.
    content.vb: Function CreateApiKey(user As UserResource, purpose As String = Nothing, expires As DateTimeOffset? = Nothing) As Task(Of ApiKeyCreatedResource)
  overload: Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">user</code> was null.\n"
  nameWithType.vb: IUserRepository.CreateApiKey(UserResource, String, Nullable(Of DateTimeOffset))
  fullName.vb: Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey(Octopus.Client.Model.UserResource, System.String, System.Nullable(Of System.DateTimeOffset))
  name.vb: CreateApiKey(UserResource, String, Nullable(Of DateTimeOffset))
- uid: Octopus.Client.Repositories.Async.IUserRepository.GetApiKeys(Octopus.Client.Model.UserResource)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.GetApiKeys(Octopus.Client.Model.UserResource)
  id: GetApiKeys(Octopus.Client.Model.UserResource)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: GetApiKeys(UserResource)
  nameWithType: IUserRepository.GetApiKeys(UserResource)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.GetApiKeys(Octopus.Client.Model.UserResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetApiKeys
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 34
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<List<ApiKeyResource>> GetApiKeys(UserResource user)
    parameters:
    - id: user
      type: Octopus.Client.Model.UserResource
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Octopus.Client.Model.ApiKeyResource}}
    content.vb: Function GetApiKeys(user As UserResource) As Task(Of List(Of ApiKeyResource))
  overload: Octopus.Client.Repositories.Async.IUserRepository.GetApiKeys*
- uid: Octopus.Client.Repositories.Async.IUserRepository.RevokeApiKey(Octopus.Client.Model.ApiKeyResourceBase)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.RevokeApiKey(Octopus.Client.Model.ApiKeyResourceBase)
  id: RevokeApiKey(Octopus.Client.Model.ApiKeyResourceBase)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: RevokeApiKey(ApiKeyResourceBase)
  nameWithType: IUserRepository.RevokeApiKey(ApiKeyResourceBase)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.RevokeApiKey(Octopus.Client.Model.ApiKeyResourceBase)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: RevokeApiKey
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 35
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task RevokeApiKey(ApiKeyResourceBase apiKey)
    parameters:
    - id: apiKey
      type: Octopus.Client.Model.ApiKeyResourceBase
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RevokeApiKey(apiKey As ApiKeyResourceBase) As Task
  overload: Octopus.Client.Repositories.Async.IUserRepository.RevokeApiKey*
- uid: Octopus.Client.Repositories.Async.IUserRepository.Invite(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.Invite(System.String)
  id: Invite(System.String)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: Invite(String)
  nameWithType: IUserRepository.Invite(String)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.Invite(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Invite
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 36
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      [Obsolete("Use the IUserInvitesRepository instead", false)]

      Task<InvitationResource> Invite(string addToTeamId)
    parameters:
    - id: addToTeamId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.InvitationResource}
    content.vb: >-
      <Obsolete("Use the IUserInvitesRepository instead", False)>

      Function Invite(addToTeamId As String) As Task(Of InvitationResource)
  overload: Octopus.Client.Repositories.Async.IUserRepository.Invite*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: Use the IUserInvitesRepository instead
    - type: System.Boolean
      value: false
- uid: Octopus.Client.Repositories.Async.IUserRepository.Invite(Octopus.Client.Model.ReferenceCollection)
  commentId: M:Octopus.Client.Repositories.Async.IUserRepository.Invite(Octopus.Client.Model.ReferenceCollection)
  id: Invite(Octopus.Client.Model.ReferenceCollection)
  parent: Octopus.Client.Repositories.Async.IUserRepository
  langs:
  - csharp
  - vb
  name: Invite(ReferenceCollection)
  nameWithType: IUserRepository.Invite(ReferenceCollection)
  fullName: Octopus.Client.Repositories.Async.IUserRepository.Invite(Octopus.Client.Model.ReferenceCollection)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Invite
    path: ../source/Octopus.Client/Repositories/Async/UserRepository.cs
    startLine: 38
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      [Obsolete("Use the IUserInvitesRepository instead", false)]

      Task<InvitationResource> Invite(ReferenceCollection addToTeamIds)
    parameters:
    - id: addToTeamIds
      type: Octopus.Client.Model.ReferenceCollection
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.InvitationResource}
    content.vb: >-
      <Obsolete("Use the IUserInvitesRepository instead", False)>

      Function Invite(addToTeamIds As ReferenceCollection) As Task(Of InvitationResource)
  overload: Octopus.Client.Repositories.Async.IUserRepository.Invite*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: Use the IUserInvitesRepository instead
    - type: System.Boolean
      value: false
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.UserResource},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.UserResource},System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  name: Paginate(Func<ResourceCollection<UserResource>, Boolean>, String, Object)
  nameWithType: IPaginate<UserResource>.Paginate(Func<ResourceCollection<UserResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.UserResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of UserResource).Paginate(Func(Of ResourceCollection(Of UserResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.UserResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of UserResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<UserResource>.Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of UserResource).Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindOne(System.Func{Octopus.Client.Model.UserResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindOne(System.Func{Octopus.Client.Model.UserResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindOne(Func<UserResource, Boolean>, String, Object)
  nameWithType: IPaginate<UserResource>.FindOne(Func<UserResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>.FindOne(System.Func<Octopus.Client.Model.UserResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of UserResource).FindOne(Func(Of UserResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource).FindOne(System.Func(Of Octopus.Client.Model.UserResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of UserResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<UserResource>.FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of UserResource).FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindMany(System.Func{Octopus.Client.Model.UserResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindMany(System.Func{Octopus.Client.Model.UserResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindMany(Func<UserResource, Boolean>, String, Object)
  nameWithType: IPaginate<UserResource>.FindMany(Func<UserResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>.FindMany(System.Func<Octopus.Client.Model.UserResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of UserResource).FindMany(Func(Of UserResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource).FindMany(System.Func(Of Octopus.Client.Model.UserResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of UserResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<UserResource>.FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of UserResource).FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}.FindAll(System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  name: FindAll(String, Object)
  nameWithType: IPaginate<UserResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of UserResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<UserResource>.FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of UserResource).FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Get(System.String)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  name: Get(String)
  nameWithType: IGet<UserResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.UserResource>.Get(System.String)
  nameWithType.vb: IGet(Of UserResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.UserResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<UserResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.UserResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of UserResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.UserResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Get(System.String[])
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  name: Get(String[])
  nameWithType: IGet<UserResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.UserResource>.Get(System.String[])
  nameWithType.vb: IGet(Of UserResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.UserResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<UserResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.UserResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of UserResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.UserResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Refresh(Octopus.Client.Model.UserResource)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}.Refresh(Octopus.Client.Model.UserResource)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(UserResource)
  nameWithType: IGet<UserResource>.Refresh(UserResource)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.UserResource>.Refresh(Octopus.Client.Model.UserResource)
  nameWithType.vb: IGet(Of UserResource).Refresh(UserResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.UserResource).Refresh(Octopus.Client.Model.UserResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<UserResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.UserResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of UserResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.UserResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.UserResource}.Modify(Octopus.Client.Model.UserResource)
  commentId: M:Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.UserResource}.Modify(Octopus.Client.Model.UserResource)
  parent: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  name: Modify(UserResource)
  nameWithType: IModify<UserResource>.Modify(UserResource)
  fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.UserResource>.Modify(Octopus.Client.Model.UserResource)
  nameWithType.vb: IModify(Of UserResource).Modify(UserResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.UserResource).Modify(Octopus.Client.Model.UserResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<UserResource>.Modify
    fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.UserResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of UserResource).Modify
    fullName: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.UserResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.UserResource}.Delete(Octopus.Client.Model.UserResource)
  commentId: M:Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.UserResource}.Delete(Octopus.Client.Model.UserResource)
  parent: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  name: Delete(UserResource)
  nameWithType: IDelete<UserResource>.Delete(UserResource)
  fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.UserResource>.Delete(Octopus.Client.Model.UserResource)
  nameWithType.vb: IDelete(Of UserResource).Delete(UserResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.UserResource).Delete(Octopus.Client.Model.UserResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<UserResource>.Delete
    fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.UserResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of UserResource).Delete
    fullName: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.UserResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.UserResource}.Create(Octopus.Client.Model.UserResource,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.UserResource}.Create(Octopus.Client.Model.UserResource,System.Object)
  parent: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.UserResource}
  definition: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  name: Create(UserResource, Object)
  nameWithType: ICreate<UserResource>.Create(UserResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.UserResource>.Create(Octopus.Client.Model.UserResource, System.Object)
  nameWithType.vb: ICreate(Of UserResource).Create(UserResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.UserResource).Create(Octopus.Client.Model.UserResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<UserResource>.Create
    fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.UserResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of UserResource).Create
    fullName: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.UserResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  isExternal: true
  name: Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<TResource>.Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of TResource).Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}
  commentId: T:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.UserResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IPaginate`1
  name: IPaginate<UserResource>
  nameWithType: IPaginate<UserResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.UserResource>
  nameWithType.vb: IPaginate(Of UserResource)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.UserResource)
  name.vb: IPaginate(Of UserResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindOne(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindOne(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindOne(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<TResource>.FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of TResource).FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindMany(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindMany(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindMany(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<TResource>.FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of TResource).FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  isExternal: true
  name: FindAll(String, Object)
  nameWithType: IPaginate<TResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<TResource>.FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of TResource).FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: IGet<TResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String)
  nameWithType.vb: IGet(Of TResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}
  commentId: T:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.UserResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IGet`1
  name: IGet<UserResource>
  nameWithType: IGet<UserResource>
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.UserResource>
  nameWithType.vb: IGet(Of UserResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.UserResource)
  name.vb: IGet(Of UserResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  isExternal: true
  name: Get(String[])
  nameWithType: IGet<TResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(TResource)
  nameWithType: IGet<TResource>.Refresh(TResource)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh(TResource)
  nameWithType.vb: IGet(Of TResource).Refresh(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  commentId: M:Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  name: Modify(TResource)
  nameWithType: IModify<TResource>.Modify(TResource)
  fullName: Octopus.Client.Repositories.Async.IModify<TResource>.Modify(TResource)
  nameWithType.vb: IModify(Of TResource).Modify(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of TResource).Modify(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<TResource>.Modify
    fullName: Octopus.Client.Repositories.Async.IModify<TResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of TResource).Modify
    fullName: Octopus.Client.Repositories.Async.IModify(Of TResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.UserResource}
  commentId: T:Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.UserResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IModify`1
  name: IModify<UserResource>
  nameWithType: IModify<UserResource>
  fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.UserResource>
  nameWithType.vb: IModify(Of UserResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.UserResource)
  name.vb: IModify(Of UserResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  commentId: M:Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  name: Delete(TResource)
  nameWithType: IDelete<TResource>.Delete(TResource)
  fullName: Octopus.Client.Repositories.Async.IDelete<TResource>.Delete(TResource)
  nameWithType.vb: IDelete(Of TResource).Delete(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of TResource).Delete(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<TResource>.Delete
    fullName: Octopus.Client.Repositories.Async.IDelete<TResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of TResource).Delete
    fullName: Octopus.Client.Repositories.Async.IDelete(Of TResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.UserResource}
  commentId: T:Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.UserResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IDelete`1
  name: IDelete<UserResource>
  nameWithType: IDelete<UserResource>
  fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.UserResource>
  nameWithType.vb: IDelete(Of UserResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.UserResource)
  name.vb: IDelete(Of UserResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  isExternal: true
  name: Create(TResource, Object)
  nameWithType: ICreate<TResource>.Create(TResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create(TResource, System.Object)
  nameWithType.vb: ICreate(Of TResource).Create(TResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create(TResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<TResource>.Create
    fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of TResource).Create
    fullName: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.UserResource}
  commentId: T:Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.UserResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.ICreate`1
  name: ICreate<UserResource>
  nameWithType: ICreate<UserResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.UserResource>
  nameWithType.vb: ICreate(Of UserResource)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.UserResource)
  name.vb: ICreate(Of UserResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1
  commentId: T:Octopus.Client.Repositories.Async.IPaginate`1
  name: IPaginate<TResource>
  nameWithType: IPaginate<TResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>
  nameWithType.vb: IPaginate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource)
  name.vb: IPaginate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1
  commentId: T:Octopus.Client.Repositories.Async.IGet`1
  name: IGet<TResource>
  nameWithType: IGet<TResource>
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>
  nameWithType.vb: IGet(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource)
  name.vb: IGet(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify`1
  commentId: T:Octopus.Client.Repositories.Async.IModify`1
  name: IModify<TResource>
  nameWithType: IModify<TResource>
  fullName: Octopus.Client.Repositories.Async.IModify<TResource>
  nameWithType.vb: IModify(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of TResource)
  name.vb: IModify(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete`1
  commentId: T:Octopus.Client.Repositories.Async.IDelete`1
  name: IDelete<TResource>
  nameWithType: IDelete<TResource>
  fullName: Octopus.Client.Repositories.Async.IDelete<TResource>
  nameWithType.vb: IDelete(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of TResource)
  name.vb: IDelete(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate`1
  commentId: T:Octopus.Client.Repositories.Async.ICreate`1
  name: ICreate<TResource>
  nameWithType: ICreate<TResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>
  nameWithType.vb: ICreate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource)
  name.vb: ICreate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IUserRepository.FindByUsername*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.FindByUsername
  name: FindByUsername
  nameWithType: IUserRepository.FindByUsername
  fullName: Octopus.Client.Repositories.Async.IUserRepository.FindByUsername
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UserResource>
  nameWithType: Task<UserResource>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.UserResource>
  nameWithType.vb: Task(Of UserResource)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.UserResource)
  name.vb: Task(Of UserResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Octopus.Client.Repositories.Async.IUserRepository.Create*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.Create
  name: Create
  nameWithType: IUserRepository.Create
  fullName: Octopus.Client.Repositories.Async.IUserRepository.Create
- uid: Octopus.Client.Repositories.Async.IUserRepository.CreateServiceAccount*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.CreateServiceAccount
  name: CreateServiceAccount
  nameWithType: IUserRepository.CreateServiceAccount
  fullName: Octopus.Client.Repositories.Async.IUserRepository.CreateServiceAccount
- uid: Octopus.Client.Repositories.Async.IUserRepository.Register*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.Register
  name: Register
  nameWithType: IUserRepository.Register
  fullName: Octopus.Client.Repositories.Async.IUserRepository.Register
- uid: Octopus.Client.Model.RegisterCommand
  commentId: T:Octopus.Client.Model.RegisterCommand
  parent: Octopus.Client.Model
  name: RegisterCommand
  nameWithType: RegisterCommand
  fullName: Octopus.Client.Model.RegisterCommand
- uid: Octopus.Client.Model
  commentId: N:Octopus.Client.Model
  name: Octopus.Client.Model
  nameWithType: Octopus.Client.Model
  fullName: Octopus.Client.Model
- uid: Octopus.Client.Repositories.Async.IUserRepository.SignIn*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.SignIn
  name: SignIn
  nameWithType: IUserRepository.SignIn
  fullName: Octopus.Client.Repositories.Async.IUserRepository.SignIn
- uid: Octopus.Client.Model.LoginCommand
  commentId: T:Octopus.Client.Model.LoginCommand
  parent: Octopus.Client.Model
  name: LoginCommand
  nameWithType: LoginCommand
  fullName: Octopus.Client.Model.LoginCommand
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Octopus.Client.Repositories.Async.IUserRepository.SignOut*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.SignOut
  name: SignOut
  nameWithType: IUserRepository.SignOut
  fullName: Octopus.Client.Repositories.Async.IUserRepository.SignOut
- uid: Octopus.Client.Repositories.Async.IUserRepository.GetCurrent*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.GetCurrent
  name: GetCurrent
  nameWithType: IUserRepository.GetCurrent
  fullName: Octopus.Client.Repositories.Async.IUserRepository.GetCurrent
- uid: Octopus.Client.Repositories.Async.IUserRepository.GetSpaces*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.GetSpaces
  name: GetSpaces
  nameWithType: IUserRepository.GetSpaces
  fullName: Octopus.Client.Repositories.Async.IUserRepository.GetSpaces
- uid: Octopus.Client.Model.UserResource
  commentId: T:Octopus.Client.Model.UserResource
  parent: Octopus.Client.Model
  name: UserResource
  nameWithType: UserResource
  fullName: Octopus.Client.Model.UserResource
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.SpaceResource[]}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.SpaceResource[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SpaceResource[]>
  nameWithType: Task<SpaceResource[]>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.SpaceResource[]>
  nameWithType.vb: Task(Of SpaceResource())
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.SpaceResource())
  name.vb: Task(Of SpaceResource())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.SpaceResource
    name: SpaceResource
    nameWithType: SpaceResource
    fullName: Octopus.Client.Model.SpaceResource
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.SpaceResource
    name: SpaceResource
    nameWithType: SpaceResource
    fullName: Octopus.Client.Model.SpaceResource
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey
  name: CreateApiKey
  nameWithType: IUserRepository.CreateApiKey
  fullName: Octopus.Client.Repositories.Async.IUserRepository.CreateApiKey
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.ApiKeyCreatedResource}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.ApiKeyCreatedResource}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ApiKeyCreatedResource>
  nameWithType: Task<ApiKeyCreatedResource>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.ApiKeyCreatedResource>
  nameWithType.vb: Task(Of ApiKeyCreatedResource)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.ApiKeyCreatedResource)
  name.vb: Task(Of ApiKeyCreatedResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ApiKeyCreatedResource
    name: ApiKeyCreatedResource
    nameWithType: ApiKeyCreatedResource
    fullName: Octopus.Client.Model.ApiKeyCreatedResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ApiKeyCreatedResource
    name: ApiKeyCreatedResource
    nameWithType: ApiKeyCreatedResource
    fullName: Octopus.Client.Model.ApiKeyCreatedResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IUserRepository.GetApiKeys*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.GetApiKeys
  name: GetApiKeys
  nameWithType: IUserRepository.GetApiKeys
  fullName: Octopus.Client.Repositories.Async.IUserRepository.GetApiKeys
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Octopus.Client.Model.ApiKeyResource}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Octopus.Client.Model.ApiKeyResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<ApiKeyResource>>
  nameWithType: Task<List<ApiKeyResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Octopus.Client.Model.ApiKeyResource>>
  nameWithType.vb: Task(Of List(Of ApiKeyResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Octopus.Client.Model.ApiKeyResource))
  name.vb: Task(Of List(Of ApiKeyResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ApiKeyResource
    name: ApiKeyResource
    nameWithType: ApiKeyResource
    fullName: Octopus.Client.Model.ApiKeyResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ApiKeyResource
    name: ApiKeyResource
    nameWithType: ApiKeyResource
    fullName: Octopus.Client.Model.ApiKeyResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IUserRepository.RevokeApiKey*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.RevokeApiKey
  name: RevokeApiKey
  nameWithType: IUserRepository.RevokeApiKey
  fullName: Octopus.Client.Repositories.Async.IUserRepository.RevokeApiKey
- uid: Octopus.Client.Model.ApiKeyResourceBase
  commentId: T:Octopus.Client.Model.ApiKeyResourceBase
  parent: Octopus.Client.Model
  name: ApiKeyResourceBase
  nameWithType: ApiKeyResourceBase
  fullName: Octopus.Client.Model.ApiKeyResourceBase
- uid: Octopus.Client.Repositories.Async.IUserRepository.Invite*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserRepository.Invite
  name: Invite
  nameWithType: IUserRepository.Invite
  fullName: Octopus.Client.Repositories.Async.IUserRepository.Invite
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.InvitationResource}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.InvitationResource}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<InvitationResource>
  nameWithType: Task<InvitationResource>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.InvitationResource>
  nameWithType.vb: Task(Of InvitationResource)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.InvitationResource)
  name.vb: Task(Of InvitationResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.InvitationResource
    name: InvitationResource
    nameWithType: InvitationResource
    fullName: Octopus.Client.Model.InvitationResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.InvitationResource
    name: InvitationResource
    nameWithType: InvitationResource
    fullName: Octopus.Client.Model.InvitationResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model.ReferenceCollection
  commentId: T:Octopus.Client.Model.ReferenceCollection
  parent: Octopus.Client.Model
  name: ReferenceCollection
  nameWithType: ReferenceCollection
  fullName: Octopus.Client.Model.ReferenceCollection
