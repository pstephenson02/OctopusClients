### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.IAccountRepository
  commentId: T:Octopus.Client.Repositories.Async.IAccountRepository
  id: IAccountRepository
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType``1
  - Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType``1(System.Object)
  - Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType``1(System.String)
  - Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType``1(System.Collections.Generic.IEnumerable{System.String})
  - Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType``1(System.Func{``0,System.Boolean},System.Object)
  - Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType``1(System.Func{``0,System.Boolean},System.Object)
  - Octopus.Client.Repositories.Async.IAccountRepository.GetAccountUsage(Octopus.Client.Model.Accounts.AccountResource)
  - Octopus.Client.Repositories.Async.IAccountRepository.GetOfType``1(System.String)
  - Octopus.Client.Repositories.Async.IAccountRepository.GetOfType``1(System.String[])
  - Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType``1(System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean},System.Object)
  - Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType``1(``0)
  langs:
  - csharp
  - vb
  name: IAccountRepository
  nameWithType: IAccountRepository
  fullName: Octopus.Client.Repositories.Async.IAccountRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IAccountRepository
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 12
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: 'public interface IAccountRepository : IResourceRepository, ICreate<AccountResource>, IModify<AccountResource>, IDelete<AccountResource>, IGet<AccountResource>, IFindByName<AccountResource>, IPaginate<AccountResource>'
    content.vb: >-
      Public Interface IAccountRepository
          Inherits IResourceRepository, ICreate(Of AccountResource), IModify(Of AccountResource), IDelete(Of AccountResource), IGet(Of AccountResource), IFindByName(Of AccountResource)
  inheritedMembers:
  - Octopus.Client.Repositories.Async.IResourceRepository.Client
  - Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.Accounts.AccountResource}.Create(Octopus.Client.Model.Accounts.AccountResource,System.Object)
  - Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.Accounts.AccountResource}.Modify(Octopus.Client.Model.Accounts.AccountResource)
  - Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.Accounts.AccountResource}.Delete(Octopus.Client.Model.Accounts.AccountResource)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Get(System.String)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Get(System.String[])
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Refresh(Octopus.Client.Model.Accounts.AccountResource)
  - Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}.FindByName(System.String,System.String,System.Object)
  - Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.Accounts.AccountResource},System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindOne(System.Func{Octopus.Client.Model.Accounts.AccountResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindMany(System.Func{Octopus.Client.Model.Accounts.AccountResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindAll(System.String,System.Object)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType``1
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType``1
  id: DetermineAccountType``1
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: DetermineAccountType<TAccount>()
  nameWithType: IAccountRepository.DetermineAccountType<TAccount>()
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType<TAccount>()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: DetermineAccountType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 14
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      AccountType DetermineAccountType<TAccount>()
          where TAccount : AccountResource
    typeParameters:
    - id: TAccount
    return:
      type: Octopus.Client.Model.Accounts.AccountType
    content.vb: Function DetermineAccountType(Of TAccount As AccountResource) As AccountType
  overload: Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType*
  nameWithType.vb: IAccountRepository.DetermineAccountType(Of TAccount)()
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType(Of TAccount)()
  name.vb: DetermineAccountType(Of TAccount)()
- uid: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType``1(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.GetOfType``1(System.String)
  id: GetOfType``1(System.String)
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: GetOfType<TAccount>(String)
  nameWithType: IAccountRepository.GetOfType<TAccount>(String)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType<TAccount>(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 16
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task<TAccount> GetOfType<TAccount>(string idOrHref)
          where TAccount : AccountResource
    parameters:
    - id: idOrHref
      type: System.String
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task{{TAccount}}
    content.vb: Function GetOfType(Of TAccount As AccountResource)(idOrHref As String) As Task(Of TAccount)
  overload: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType*
  nameWithType.vb: IAccountRepository.GetOfType(Of TAccount)(String)
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType(Of TAccount)(System.String)
  name.vb: GetOfType(Of TAccount)(String)
- uid: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType``1(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.GetOfType``1(System.String[])
  id: GetOfType``1(System.String[])
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: GetOfType<TAccount>(String[])
  nameWithType: IAccountRepository.GetOfType<TAccount>(String[])
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType<TAccount>(System.String[])
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 17
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task<List<TAccount>> GetOfType<TAccount>(params string[] ids)
          where TAccount : AccountResource
    parameters:
    - id: ids
      type: System.String[]
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TAccount}}}
    content.vb: Function GetOfType(Of TAccount As AccountResource)(ParamArray ids As String()) As Task(Of List(Of TAccount))
  overload: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType*
  nameWithType.vb: IAccountRepository.GetOfType(Of TAccount)(String())
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType(Of TAccount)(System.String())
  name.vb: GetOfType(Of TAccount)(String())
- uid: Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType``1(``0)
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType``1(``0)
  id: RefreshOfType``1(``0)
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: RefreshOfType<TAccount>(TAccount)
  nameWithType: IAccountRepository.RefreshOfType<TAccount>(TAccount)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType<TAccount>(TAccount)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: RefreshOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 18
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task<TAccount> RefreshOfType<TAccount>(TAccount resource)
          where TAccount : AccountResource
    parameters:
    - id: resource
      type: '{TAccount}'
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task{{TAccount}}
    content.vb: Function RefreshOfType(Of TAccount As AccountResource)(resource As TAccount) As Task(Of TAccount)
  overload: Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType*
  nameWithType.vb: IAccountRepository.RefreshOfType(Of TAccount)(TAccount)
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType(Of TAccount)(TAccount)
  name.vb: RefreshOfType(Of TAccount)(TAccount)
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType``1(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType``1(System.String)
  id: FindByNameOfType``1(System.String)
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: FindByNameOfType<TAccount>(String)
  nameWithType: IAccountRepository.FindByNameOfType<TAccount>(String)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType<TAccount>(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindByNameOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 20
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task<TAccount> FindByNameOfType<TAccount>(string name)
          where TAccount : AccountResource
    parameters:
    - id: name
      type: System.String
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task{{TAccount}}
    content.vb: Function FindByNameOfType(Of TAccount As AccountResource)(name As String) As Task(Of TAccount)
  overload: Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType*
  nameWithType.vb: IAccountRepository.FindByNameOfType(Of TAccount)(String)
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType(Of TAccount)(System.String)
  name.vb: FindByNameOfType(Of TAccount)(String)
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType``1(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType``1(System.Collections.Generic.IEnumerable{System.String})
  id: FindByNamesOfType``1(System.Collections.Generic.IEnumerable{System.String})
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: FindByNamesOfType<TAccount>(IEnumerable<String>)
  nameWithType: IAccountRepository.FindByNamesOfType<TAccount>(IEnumerable<String>)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType<TAccount>(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindByNamesOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 21
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task<List<TAccount>> FindByNamesOfType<TAccount>(IEnumerable<string> names)
          where TAccount : AccountResource
    parameters:
    - id: names
      type: System.Collections.Generic.IEnumerable{System.String}
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TAccount}}}
    content.vb: Function FindByNamesOfType(Of TAccount As AccountResource)(names As IEnumerable(Of String)) As Task(Of List(Of TAccount))
  overload: Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType*
  nameWithType.vb: IAccountRepository.FindByNamesOfType(Of TAccount)(IEnumerable(Of String))
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType(Of TAccount)(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: FindByNamesOfType(Of TAccount)(IEnumerable(Of String))
- uid: Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType``1(System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean},System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType``1(System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean},System.Object)
  id: PaginateOfType``1(System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean},System.Object)
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: PaginateOfType<TAccount>(Func<ResourceCollection<TAccount>, Boolean>, Object)
  nameWithType: IAccountRepository.PaginateOfType<TAccount>(Func<ResourceCollection<TAccount>, Boolean>, Object)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType<TAccount>(System.Func<Octopus.Client.Model.ResourceCollection<TAccount>, System.Boolean>, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: PaginateOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 23
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task PaginateOfType<TAccount>(Func<ResourceCollection<TAccount>, bool> getNextPage, object pathParameters = null)
          where TAccount : AccountResource
    parameters:
    - id: getNextPage
      type: System.Func{Octopus.Client.Model.ResourceCollection{{TAccount}},System.Boolean}
    - id: pathParameters
      type: System.Object
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function PaginateOfType(Of TAccount As AccountResource)(getNextPage As Func(Of ResourceCollection(Of TAccount), Boolean), pathParameters As Object = Nothing) As Task
  overload: Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType*
  nameWithType.vb: IAccountRepository.PaginateOfType(Of TAccount)(Func(Of ResourceCollection(Of TAccount), Boolean), Object)
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType(Of TAccount)(System.Func(Of Octopus.Client.Model.ResourceCollection(Of TAccount), System.Boolean), System.Object)
  name.vb: PaginateOfType(Of TAccount)(Func(Of ResourceCollection(Of TAccount), Boolean), Object)
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType``1(System.Func{``0,System.Boolean},System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType``1(System.Func{``0,System.Boolean},System.Object)
  id: FindOneOfType``1(System.Func{``0,System.Boolean},System.Object)
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: FindOneOfType<TAccount>(Func<TAccount, Boolean>, Object)
  nameWithType: IAccountRepository.FindOneOfType<TAccount>(Func<TAccount, Boolean>, Object)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType<TAccount>(System.Func<TAccount, System.Boolean>, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindOneOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 24
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task<TAccount> FindOneOfType<TAccount>(Func<TAccount, bool> search, object pathParameters = null)
          where TAccount : AccountResource
    parameters:
    - id: search
      type: System.Func{{TAccount},System.Boolean}
    - id: pathParameters
      type: System.Object
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task{{TAccount}}
    content.vb: Function FindOneOfType(Of TAccount As AccountResource)(search As Func(Of TAccount, Boolean), pathParameters As Object = Nothing) As Task(Of TAccount)
  overload: Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType*
  nameWithType.vb: IAccountRepository.FindOneOfType(Of TAccount)(Func(Of TAccount, Boolean), Object)
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType(Of TAccount)(System.Func(Of TAccount, System.Boolean), System.Object)
  name.vb: FindOneOfType(Of TAccount)(Func(Of TAccount, Boolean), Object)
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType``1(System.Func{``0,System.Boolean},System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType``1(System.Func{``0,System.Boolean},System.Object)
  id: FindManyOfType``1(System.Func{``0,System.Boolean},System.Object)
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: FindManyOfType<TAccount>(Func<TAccount, Boolean>, Object)
  nameWithType: IAccountRepository.FindManyOfType<TAccount>(Func<TAccount, Boolean>, Object)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType<TAccount>(System.Func<TAccount, System.Boolean>, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindManyOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 25
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task<List<TAccount>> FindManyOfType<TAccount>(Func<TAccount, bool> search, object pathParameters = null)
          where TAccount : AccountResource
    parameters:
    - id: search
      type: System.Func{{TAccount},System.Boolean}
    - id: pathParameters
      type: System.Object
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TAccount}}}
    content.vb: Function FindManyOfType(Of TAccount As AccountResource)(search As Func(Of TAccount, Boolean), pathParameters As Object = Nothing) As Task(Of List(Of TAccount))
  overload: Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType*
  nameWithType.vb: IAccountRepository.FindManyOfType(Of TAccount)(Func(Of TAccount, Boolean), Object)
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType(Of TAccount)(System.Func(Of TAccount, System.Boolean), System.Object)
  name.vb: FindManyOfType(Of TAccount)(Func(Of TAccount, Boolean), Object)
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType``1(System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType``1(System.Object)
  id: FindAllOfType``1(System.Object)
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: FindAllOfType<TAccount>(Object)
  nameWithType: IAccountRepository.FindAllOfType<TAccount>(Object)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType<TAccount>(System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindAllOfType
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 26
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      Task<List<TAccount>> FindAllOfType<TAccount>(object pathParameters = null)
          where TAccount : AccountResource
    parameters:
    - id: pathParameters
      type: System.Object
    typeParameters:
    - id: TAccount
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TAccount}}}
    content.vb: Function FindAllOfType(Of TAccount As AccountResource)(pathParameters As Object = Nothing) As Task(Of List(Of TAccount))
  overload: Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType*
  nameWithType.vb: IAccountRepository.FindAllOfType(Of TAccount)(Object)
  fullName.vb: Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType(Of TAccount)(System.Object)
  name.vb: FindAllOfType(Of TAccount)(Object)
- uid: Octopus.Client.Repositories.Async.IAccountRepository.GetAccountUsage(Octopus.Client.Model.Accounts.AccountResource)
  commentId: M:Octopus.Client.Repositories.Async.IAccountRepository.GetAccountUsage(Octopus.Client.Model.Accounts.AccountResource)
  id: GetAccountUsage(Octopus.Client.Model.Accounts.AccountResource)
  parent: Octopus.Client.Repositories.Async.IAccountRepository
  langs:
  - csharp
  - vb
  name: GetAccountUsage(AccountResource)
  nameWithType: IAccountRepository.GetAccountUsage(AccountResource)
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.GetAccountUsage(Octopus.Client.Model.Accounts.AccountResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/AccountRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetAccountUsage
    path: ../source/Octopus.Client/Repositories/Async/AccountRepository.cs
    startLine: 28
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<AccountUsageResource> GetAccountUsage(AccountResource account)
    parameters:
    - id: account
      type: Octopus.Client.Model.Accounts.AccountResource
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.Accounts.Usages.AccountUsageResource}
    content.vb: Function GetAccountUsage(account As AccountResource) As Task(Of AccountUsageResource)
  overload: Octopus.Client.Repositories.Async.IAccountRepository.GetAccountUsage*
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.IResourceRepository.Client
  commentId: P:Octopus.Client.Repositories.Async.IResourceRepository.Client
  parent: Octopus.Client.Repositories.Async.IResourceRepository
  name: Client
  nameWithType: IResourceRepository.Client
  fullName: Octopus.Client.Repositories.Async.IResourceRepository.Client
- uid: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.Accounts.AccountResource}.Create(Octopus.Client.Model.Accounts.AccountResource,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.Accounts.AccountResource}.Create(Octopus.Client.Model.Accounts.AccountResource,System.Object)
  parent: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  name: Create(AccountResource, Object)
  nameWithType: ICreate<AccountResource>.Create(AccountResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.Accounts.AccountResource>.Create(Octopus.Client.Model.Accounts.AccountResource, System.Object)
  nameWithType.vb: ICreate(Of AccountResource).Create(AccountResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.Accounts.AccountResource).Create(Octopus.Client.Model.Accounts.AccountResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<AccountResource>.Create
    fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.Accounts.AccountResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of AccountResource).Create
    fullName: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.Accounts.AccountResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.Accounts.AccountResource}.Modify(Octopus.Client.Model.Accounts.AccountResource)
  commentId: M:Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.Accounts.AccountResource}.Modify(Octopus.Client.Model.Accounts.AccountResource)
  parent: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  name: Modify(AccountResource)
  nameWithType: IModify<AccountResource>.Modify(AccountResource)
  fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.Accounts.AccountResource>.Modify(Octopus.Client.Model.Accounts.AccountResource)
  nameWithType.vb: IModify(Of AccountResource).Modify(AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.Accounts.AccountResource).Modify(Octopus.Client.Model.Accounts.AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<AccountResource>.Modify
    fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.Accounts.AccountResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of AccountResource).Modify
    fullName: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.Accounts.AccountResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.Accounts.AccountResource}.Delete(Octopus.Client.Model.Accounts.AccountResource)
  commentId: M:Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.Accounts.AccountResource}.Delete(Octopus.Client.Model.Accounts.AccountResource)
  parent: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  name: Delete(AccountResource)
  nameWithType: IDelete<AccountResource>.Delete(AccountResource)
  fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.Accounts.AccountResource>.Delete(Octopus.Client.Model.Accounts.AccountResource)
  nameWithType.vb: IDelete(Of AccountResource).Delete(AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.Accounts.AccountResource).Delete(Octopus.Client.Model.Accounts.AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<AccountResource>.Delete
    fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.Accounts.AccountResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of AccountResource).Delete
    fullName: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.Accounts.AccountResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Get(System.String)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  name: Get(String)
  nameWithType: IGet<AccountResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.Accounts.AccountResource>.Get(System.String)
  nameWithType.vb: IGet(Of AccountResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.Accounts.AccountResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<AccountResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.Accounts.AccountResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of AccountResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.Accounts.AccountResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Get(System.String[])
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  name: Get(String[])
  nameWithType: IGet<AccountResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.Accounts.AccountResource>.Get(System.String[])
  nameWithType.vb: IGet(Of AccountResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.Accounts.AccountResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<AccountResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.Accounts.AccountResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of AccountResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.Accounts.AccountResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Refresh(Octopus.Client.Model.Accounts.AccountResource)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}.Refresh(Octopus.Client.Model.Accounts.AccountResource)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(AccountResource)
  nameWithType: IGet<AccountResource>.Refresh(AccountResource)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.Accounts.AccountResource>.Refresh(Octopus.Client.Model.Accounts.AccountResource)
  nameWithType.vb: IGet(Of AccountResource).Refresh(AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.Accounts.AccountResource).Refresh(Octopus.Client.Model.Accounts.AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<AccountResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.Accounts.AccountResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of AccountResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.Accounts.AccountResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}.FindByName(System.String,System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}.FindByName(System.String,System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
  name: FindByName(String, String, Object)
  nameWithType: IFindByName<AccountResource>.FindByName(String, String, Object)
  fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.Accounts.AccountResource>.FindByName(System.String, System.String, System.Object)
  nameWithType.vb: IFindByName(Of AccountResource).FindByName(String, String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.Accounts.AccountResource).FindByName(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName<AccountResource>.FindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.Accounts.AccountResource>.FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName(Of AccountResource).FindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.Accounts.AccountResource).FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  name: FindByNames(IEnumerable<String>, String, Object)
  nameWithType: IFindByName<AccountResource>.FindByNames(IEnumerable<String>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.Accounts.AccountResource>.FindByNames(System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object)
  nameWithType.vb: IFindByName(Of AccountResource).FindByNames(IEnumerable(Of String), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.Accounts.AccountResource).FindByNames(System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object)
  name.vb: FindByNames(IEnumerable(Of String), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName<AccountResource>.FindByNames
    fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.Accounts.AccountResource>.FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName(Of AccountResource).FindByNames
    fullName: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.Accounts.AccountResource).FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.Accounts.AccountResource},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.Accounts.AccountResource},System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  name: Paginate(Func<ResourceCollection<AccountResource>, Boolean>, String, Object)
  nameWithType: IPaginate<AccountResource>.Paginate(Func<ResourceCollection<AccountResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.Accounts.AccountResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of AccountResource).Paginate(Func(Of ResourceCollection(Of AccountResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.Accounts.AccountResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of AccountResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<AccountResource>.Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of AccountResource).Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindOne(System.Func{Octopus.Client.Model.Accounts.AccountResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindOne(System.Func{Octopus.Client.Model.Accounts.AccountResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindOne(Func<AccountResource, Boolean>, String, Object)
  nameWithType: IPaginate<AccountResource>.FindOne(Func<AccountResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>.FindOne(System.Func<Octopus.Client.Model.Accounts.AccountResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of AccountResource).FindOne(Func(Of AccountResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource).FindOne(System.Func(Of Octopus.Client.Model.Accounts.AccountResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of AccountResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<AccountResource>.FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of AccountResource).FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindMany(System.Func{Octopus.Client.Model.Accounts.AccountResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindMany(System.Func{Octopus.Client.Model.Accounts.AccountResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindMany(Func<AccountResource, Boolean>, String, Object)
  nameWithType: IPaginate<AccountResource>.FindMany(Func<AccountResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>.FindMany(System.Func<Octopus.Client.Model.Accounts.AccountResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of AccountResource).FindMany(Func(Of AccountResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource).FindMany(System.Func(Of Octopus.Client.Model.Accounts.AccountResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of AccountResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<AccountResource>.FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of AccountResource).FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}.FindAll(System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  name: FindAll(String, Object)
  nameWithType: IPaginate<AccountResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of AccountResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<AccountResource>.FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of AccountResource).FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IResourceRepository
  commentId: T:Octopus.Client.Repositories.Async.IResourceRepository
  parent: Octopus.Client.Repositories.Async
  name: IResourceRepository
  nameWithType: IResourceRepository
  fullName: Octopus.Client.Repositories.Async.IResourceRepository
- uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  isExternal: true
  name: Create(TResource, Object)
  nameWithType: ICreate<TResource>.Create(TResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create(TResource, System.Object)
  nameWithType.vb: ICreate(Of TResource).Create(TResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create(TResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<TResource>.Create
    fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of TResource).Create
    fullName: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.Accounts.AccountResource}
  commentId: T:Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.Accounts.AccountResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.ICreate`1
  name: ICreate<AccountResource>
  nameWithType: ICreate<AccountResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.Accounts.AccountResource>
  nameWithType.vb: ICreate(Of AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.Accounts.AccountResource)
  name.vb: ICreate(Of AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  commentId: M:Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  name: Modify(TResource)
  nameWithType: IModify<TResource>.Modify(TResource)
  fullName: Octopus.Client.Repositories.Async.IModify<TResource>.Modify(TResource)
  nameWithType.vb: IModify(Of TResource).Modify(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of TResource).Modify(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<TResource>.Modify
    fullName: Octopus.Client.Repositories.Async.IModify<TResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of TResource).Modify
    fullName: Octopus.Client.Repositories.Async.IModify(Of TResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.Accounts.AccountResource}
  commentId: T:Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.Accounts.AccountResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IModify`1
  name: IModify<AccountResource>
  nameWithType: IModify<AccountResource>
  fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.Accounts.AccountResource>
  nameWithType.vb: IModify(Of AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.Accounts.AccountResource)
  name.vb: IModify(Of AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  commentId: M:Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  name: Delete(TResource)
  nameWithType: IDelete<TResource>.Delete(TResource)
  fullName: Octopus.Client.Repositories.Async.IDelete<TResource>.Delete(TResource)
  nameWithType.vb: IDelete(Of TResource).Delete(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of TResource).Delete(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<TResource>.Delete
    fullName: Octopus.Client.Repositories.Async.IDelete<TResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of TResource).Delete
    fullName: Octopus.Client.Repositories.Async.IDelete(Of TResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.Accounts.AccountResource}
  commentId: T:Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.Accounts.AccountResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IDelete`1
  name: IDelete<AccountResource>
  nameWithType: IDelete<AccountResource>
  fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.Accounts.AccountResource>
  nameWithType.vb: IDelete(Of AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.Accounts.AccountResource)
  name.vb: IDelete(Of AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: IGet<TResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String)
  nameWithType.vb: IGet(Of TResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}
  commentId: T:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.Accounts.AccountResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IGet`1
  name: IGet<AccountResource>
  nameWithType: IGet<AccountResource>
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.Accounts.AccountResource>
  nameWithType.vb: IGet(Of AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.Accounts.AccountResource)
  name.vb: IGet(Of AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  isExternal: true
  name: Get(String[])
  nameWithType: IGet<TResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(TResource)
  nameWithType: IGet<TResource>.Refresh(TResource)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh(TResource)
  nameWithType.vb: IGet(Of TResource).Refresh(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
  isExternal: true
  name: FindByName(String, String, Object)
  nameWithType: IFindByName<TResource>.FindByName(String, String, Object)
  fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>.FindByName(System.String, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TResource).FindByName(String, String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of TResource).FindByName(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName<TResource>.FindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>.FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName(Of TResource).FindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName(Of TResource).FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}
  commentId: T:Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.Accounts.AccountResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IFindByName`1
  name: IFindByName<AccountResource>
  nameWithType: IFindByName<AccountResource>
  fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.Accounts.AccountResource>
  nameWithType.vb: IFindByName(Of AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.Accounts.AccountResource)
  name.vb: IFindByName(Of AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  isExternal: true
  name: FindByNames(IEnumerable<String>, String, Object)
  nameWithType: IFindByName<TResource>.FindByNames(IEnumerable<String>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>.FindByNames(System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TResource).FindByNames(IEnumerable(Of String), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of TResource).FindByNames(System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object)
  name.vb: FindByNames(IEnumerable(Of String), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName<TResource>.FindByNames
    fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>.FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName(Of TResource).FindByNames
    fullName: Octopus.Client.Repositories.Async.IFindByName(Of TResource).FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  isExternal: true
  name: Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<TResource>.Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of TResource).Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}
  commentId: T:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.Accounts.AccountResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IPaginate`1
  name: IPaginate<AccountResource>
  nameWithType: IPaginate<AccountResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.Accounts.AccountResource>
  nameWithType.vb: IPaginate(Of AccountResource)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.Accounts.AccountResource)
  name.vb: IPaginate(Of AccountResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.AccountResource
    name: AccountResource
    nameWithType: AccountResource
    fullName: Octopus.Client.Model.Accounts.AccountResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindOne(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindOne(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindOne(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<TResource>.FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of TResource).FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindMany(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindMany(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindMany(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<TResource>.FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of TResource).FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  isExternal: true
  name: FindAll(String, Object)
  nameWithType: IPaginate<TResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<TResource>.FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of TResource).FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate`1
  commentId: T:Octopus.Client.Repositories.Async.ICreate`1
  name: ICreate<TResource>
  nameWithType: ICreate<TResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>
  nameWithType.vb: ICreate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource)
  name.vb: ICreate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify`1
  commentId: T:Octopus.Client.Repositories.Async.IModify`1
  name: IModify<TResource>
  nameWithType: IModify<TResource>
  fullName: Octopus.Client.Repositories.Async.IModify<TResource>
  nameWithType.vb: IModify(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of TResource)
  name.vb: IModify(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete`1
  commentId: T:Octopus.Client.Repositories.Async.IDelete`1
  name: IDelete<TResource>
  nameWithType: IDelete<TResource>
  fullName: Octopus.Client.Repositories.Async.IDelete<TResource>
  nameWithType.vb: IDelete(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of TResource)
  name.vb: IDelete(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1
  commentId: T:Octopus.Client.Repositories.Async.IGet`1
  name: IGet<TResource>
  nameWithType: IGet<TResource>
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>
  nameWithType.vb: IGet(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource)
  name.vb: IGet(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName`1
  commentId: T:Octopus.Client.Repositories.Async.IFindByName`1
  name: IFindByName<TResource>
  nameWithType: IFindByName<TResource>
  fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>
  nameWithType.vb: IFindByName(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of TResource)
  name.vb: IFindByName(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1
  commentId: T:Octopus.Client.Repositories.Async.IPaginate`1
  name: IPaginate<TResource>
  nameWithType: IPaginate<TResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>
  nameWithType.vb: IPaginate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource)
  name.vb: IPaginate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType
  name: DetermineAccountType
  nameWithType: IAccountRepository.DetermineAccountType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.DetermineAccountType
- uid: Octopus.Client.Model.Accounts.AccountType
  commentId: T:Octopus.Client.Model.Accounts.AccountType
  parent: Octopus.Client.Model.Accounts
  name: AccountType
  nameWithType: AccountType
  fullName: Octopus.Client.Model.Accounts.AccountType
- uid: Octopus.Client.Model.Accounts
  commentId: N:Octopus.Client.Model.Accounts
  name: Octopus.Client.Model.Accounts
  nameWithType: Octopus.Client.Model.Accounts
  fullName: Octopus.Client.Model.Accounts
- uid: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.GetOfType
  name: GetOfType
  nameWithType: IAccountRepository.GetOfType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.GetOfType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{{TAccount}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TAccount>
  nameWithType: Task<TAccount>
  fullName: System.Threading.Tasks.Task<TAccount>
  nameWithType.vb: Task(Of TAccount)
  fullName.vb: System.Threading.Tasks.Task(Of TAccount)
  name.vb: Task(Of TAccount)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccount
    nameWithType: TAccount
    fullName: TAccount
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccount
    nameWithType: TAccount
    fullName: TAccount
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TAccount}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TAccount>>
  nameWithType: Task<List<TAccount>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TAccount>>
  nameWithType.vb: Task(Of List(Of TAccount))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TAccount))
  name.vb: Task(Of List(Of TAccount))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccount
    nameWithType: TAccount
    fullName: TAccount
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccount
    nameWithType: TAccount
    fullName: TAccount
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType
  name: RefreshOfType
  nameWithType: IAccountRepository.RefreshOfType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.RefreshOfType
- uid: '{TAccount}'
  commentId: '!:TAccount'
  definition: TAccount
  name: TAccount
  nameWithType: TAccount
  fullName: TAccount
- uid: TAccount
  name: TAccount
  nameWithType: TAccount
  fullName: TAccount
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType
  name: FindByNameOfType
  nameWithType: IAccountRepository.FindByNameOfType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindByNameOfType
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType
  name: FindByNamesOfType
  nameWithType: IAccountRepository.FindByNamesOfType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindByNamesOfType
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType
  name: PaginateOfType
  nameWithType: IAccountRepository.PaginateOfType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.PaginateOfType
- uid: System.Func{Octopus.Client.Model.ResourceCollection{{TAccount}},System.Boolean}
  commentId: T:System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<ResourceCollection<TAccount>, Boolean>
  nameWithType: Func<ResourceCollection<TAccount>, Boolean>
  fullName: System.Func<Octopus.Client.Model.ResourceCollection<TAccount>, System.Boolean>
  nameWithType.vb: Func(Of ResourceCollection(Of TAccount), Boolean)
  fullName.vb: System.Func(Of Octopus.Client.Model.ResourceCollection(Of TAccount), System.Boolean)
  name.vb: Func(Of ResourceCollection(Of TAccount), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccount
    nameWithType: TAccount
    fullName: TAccount
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccount
    nameWithType: TAccount
    fullName: TAccount
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType
  name: FindOneOfType
  nameWithType: IAccountRepository.FindOneOfType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindOneOfType
- uid: System.Func{{TAccount},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TAccount, Boolean>
  nameWithType: Func<TAccount, Boolean>
  fullName: System.Func<TAccount, System.Boolean>
  nameWithType.vb: Func(Of TAccount, Boolean)
  fullName.vb: System.Func(Of TAccount, System.Boolean)
  name.vb: Func(Of TAccount, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAccount
    nameWithType: TAccount
    fullName: TAccount
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAccount
    nameWithType: TAccount
    fullName: TAccount
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType
  name: FindManyOfType
  nameWithType: IAccountRepository.FindManyOfType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindManyOfType
- uid: Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType
  name: FindAllOfType
  nameWithType: IAccountRepository.FindAllOfType
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.FindAllOfType
- uid: Octopus.Client.Repositories.Async.IAccountRepository.GetAccountUsage*
  commentId: Overload:Octopus.Client.Repositories.Async.IAccountRepository.GetAccountUsage
  name: GetAccountUsage
  nameWithType: IAccountRepository.GetAccountUsage
  fullName: Octopus.Client.Repositories.Async.IAccountRepository.GetAccountUsage
- uid: Octopus.Client.Model.Accounts.AccountResource
  commentId: T:Octopus.Client.Model.Accounts.AccountResource
  parent: Octopus.Client.Model.Accounts
  name: AccountResource
  nameWithType: AccountResource
  fullName: Octopus.Client.Model.Accounts.AccountResource
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.Accounts.Usages.AccountUsageResource}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.Accounts.Usages.AccountUsageResource}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<AccountUsageResource>
  nameWithType: Task<AccountUsageResource>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.Accounts.Usages.AccountUsageResource>
  nameWithType.vb: Task(Of AccountUsageResource)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.Accounts.Usages.AccountUsageResource)
  name.vb: Task(Of AccountUsageResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Accounts.Usages.AccountUsageResource
    name: AccountUsageResource
    nameWithType: AccountUsageResource
    fullName: Octopus.Client.Model.Accounts.Usages.AccountUsageResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Accounts.Usages.AccountUsageResource
    name: AccountUsageResource
    nameWithType: AccountUsageResource
    fullName: Octopus.Client.Model.Accounts.Usages.AccountUsageResource
  - name: )
    nameWithType: )
    fullName: )
