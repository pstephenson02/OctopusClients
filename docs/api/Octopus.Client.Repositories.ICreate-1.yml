### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.ICreate`1
  commentId: T:Octopus.Client.Repositories.ICreate`1
  id: ICreate`1
  parent: Octopus.Client.Repositories
  children:
  - Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  langs:
  - csharp
  - vb
  name: ICreate<TResource>
  nameWithType: ICreate<TResource>
  fullName: Octopus.Client.Repositories.ICreate<TResource>
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/ICreate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ICreate
    path: ../source/Octopus.Client/Repositories/ICreate.cs
    startLine: 4
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: public interface ICreate<TResource>
    typeParameters:
    - id: TResource
    content.vb: Public Interface ICreate(Of TResource)
  nameWithType.vb: ICreate(Of TResource)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Octopus.Client.Repositories.ICreate(Of TResource)
  name.vb: ICreate(Of TResource)
- uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  commentId: M:Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  id: Create(`0,System.Object)
  parent: Octopus.Client.Repositories.ICreate`1
  langs:
  - csharp
  - vb
  name: Create(TResource, Object)
  nameWithType: ICreate<TResource>.Create(TResource, Object)
  fullName: Octopus.Client.Repositories.ICreate<TResource>.Create(TResource, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/ICreate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Create
    path: ../source/Octopus.Client/Repositories/ICreate.cs
    startLine: 6
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: TResource Create(TResource resource, object pathParameters = null)
    parameters:
    - id: resource
      type: '{TResource}'
    - id: pathParameters
      type: System.Object
    return:
      type: '{TResource}'
    content.vb: Function Create(resource As TResource, pathParameters As Object = Nothing) As TResource
  overload: Octopus.Client.Repositories.ICreate`1.Create*
  nameWithType.vb: ICreate(Of TResource).Create(TResource, Object)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of TResource).Create(TResource, System.Object)
references:
- uid: Octopus.Client.Repositories
  commentId: N:Octopus.Client.Repositories
  name: Octopus.Client.Repositories
  nameWithType: Octopus.Client.Repositories
  fullName: Octopus.Client.Repositories
- uid: Octopus.Client.Repositories.ICreate`1.Create*
  commentId: Overload:Octopus.Client.Repositories.ICreate`1.Create
  name: Create
  nameWithType: ICreate<TResource>.Create
  fullName: Octopus.Client.Repositories.ICreate<TResource>.Create
  nameWithType.vb: ICreate(Of TResource).Create
  fullName.vb: Octopus.Client.Repositories.ICreate(Of TResource).Create
- uid: '{TResource}'
  commentId: '!:TResource'
  definition: TResource
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TResource
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
