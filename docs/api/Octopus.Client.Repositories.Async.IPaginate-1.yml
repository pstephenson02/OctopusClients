### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.IPaginate`1
  commentId: T:Octopus.Client.Repositories.Async.IPaginate`1
  id: IPaginate`1
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  langs:
  - csharp
  - vb
  name: IPaginate<TResource>
  nameWithType: IPaginate<TResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/IPaginate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IPaginate
    path: ../source/Octopus.Client/Repositories/Async/IPaginate.cs
    startLine: 7
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: public interface IPaginate<TResource>
    typeParameters:
    - id: TResource
    content.vb: Public Interface IPaginate(Of TResource)
  nameWithType.vb: IPaginate(Of TResource)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource)
  name.vb: IPaginate(Of TResource)
- uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  id: Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate`1
  langs:
  - csharp
  - vb
  name: Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>, System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/IPaginate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Paginate
    path: ../source/Octopus.Client/Repositories/Async/IPaginate.cs
    startLine: 9
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task Paginate(Func<ResourceCollection<TResource>, bool> getNextPage, string path = null, object pathParameters = null)
    parameters:
    - id: getNextPage
      type: System.Func{Octopus.Client.Model.ResourceCollection{{TResource}},System.Boolean}
    - id: path
      type: System.String
    - id: pathParameters
      type: System.Object
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function Paginate(getNextPage As Func(Of ResourceCollection(Of TResource), Boolean), path As String = Nothing, pathParameters As Object = Nothing) As Task
  overload: Octopus.Client.Repositories.Async.IPaginate`1.Paginate*
  nameWithType.vb: IPaginate(Of TResource).Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  id: FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate`1
  langs:
  - csharp
  - vb
  name: FindOne(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindOne(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne(System.Func<TResource, System.Boolean>, System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/IPaginate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindOne
    path: ../source/Octopus.Client/Repositories/Async/IPaginate.cs
    startLine: 10
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<TResource> FindOne(Func<TResource, bool> search, string path = null, object pathParameters = null)
    parameters:
    - id: search
      type: System.Func{{TResource},System.Boolean}
    - id: path
      type: System.String
    - id: pathParameters
      type: System.Object
    return:
      type: System.Threading.Tasks.Task{{TResource}}
    content.vb: Function FindOne(search As Func(Of TResource, Boolean), path As String = Nothing, pathParameters As Object = Nothing) As Task(Of TResource)
  overload: Octopus.Client.Repositories.Async.IPaginate`1.FindOne*
  nameWithType.vb: IPaginate(Of TResource).FindOne(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of TResource, Boolean), String, Object)
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  id: FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate`1
  langs:
  - csharp
  - vb
  name: FindMany(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindMany(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany(System.Func<TResource, System.Boolean>, System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/IPaginate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindMany
    path: ../source/Octopus.Client/Repositories/Async/IPaginate.cs
    startLine: 11
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<List<TResource>> FindMany(Func<TResource, bool> search, string path = null, object pathParameters = null)
    parameters:
    - id: search
      type: System.Func{{TResource},System.Boolean}
    - id: path
      type: System.String
    - id: pathParameters
      type: System.Object
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TResource}}}
    content.vb: Function FindMany(search As Func(Of TResource, Boolean), path As String = Nothing, pathParameters As Object = Nothing) As Task(Of List(Of TResource))
  overload: Octopus.Client.Repositories.Async.IPaginate`1.FindMany*
  nameWithType.vb: IPaginate(Of TResource).FindMany(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of TResource, Boolean), String, Object)
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  id: FindAll(System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate`1
  langs:
  - csharp
  - vb
  name: FindAll(String, Object)
  nameWithType: IPaginate<TResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll(System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/IPaginate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindAll
    path: ../source/Octopus.Client/Repositories/Async/IPaginate.cs
    startLine: 12
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<List<TResource>> FindAll(string path = null, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
    - id: pathParameters
      type: System.Object
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TResource}}}
    content.vb: Function FindAll(path As String = Nothing, pathParameters As Object = Nothing) As Task(Of List(Of TResource))
  overload: Octopus.Client.Repositories.Async.IPaginate`1.FindAll*
  nameWithType.vb: IPaginate(Of TResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll(System.String, System.Object)
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate*
  commentId: Overload:Octopus.Client.Repositories.Async.IPaginate`1.Paginate
  name: Paginate
  nameWithType: IPaginate<TResource>.Paginate
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate
  nameWithType.vb: IPaginate(Of TResource).Paginate
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate
- uid: System.Func{Octopus.Client.Model.ResourceCollection{{TResource}},System.Boolean}
  commentId: T:System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<ResourceCollection<TResource>, Boolean>
  nameWithType: Func<ResourceCollection<TResource>, Boolean>
  fullName: System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>
  nameWithType.vb: Func(Of ResourceCollection(Of TResource), Boolean)
  fullName.vb: System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean)
  name.vb: Func(Of ResourceCollection(Of TResource), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne*
  commentId: Overload:Octopus.Client.Repositories.Async.IPaginate`1.FindOne
  name: FindOne
  nameWithType: IPaginate<TResource>.FindOne
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne
  nameWithType.vb: IPaginate(Of TResource).FindOne
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne
- uid: System.Func{{TResource},System.Boolean}
  commentId: T:System.Func{`0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TResource, Boolean>
  nameWithType: Func<TResource, Boolean>
  fullName: System.Func<TResource, System.Boolean>
  nameWithType.vb: Func(Of TResource, Boolean)
  fullName.vb: System.Func(Of TResource, System.Boolean)
  name.vb: Func(Of TResource, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResource}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResource>
  nameWithType: Task<TResource>
  fullName: System.Threading.Tasks.Task<TResource>
  nameWithType.vb: Task(Of TResource)
  fullName.vb: System.Threading.Tasks.Task(Of TResource)
  name.vb: Task(Of TResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany*
  commentId: Overload:Octopus.Client.Repositories.Async.IPaginate`1.FindMany
  name: FindMany
  nameWithType: IPaginate<TResource>.FindMany
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany
  nameWithType.vb: IPaginate(Of TResource).FindMany
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TResource}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TResource>>
  nameWithType: Task<List<TResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TResource>>
  nameWithType.vb: Task(Of List(Of TResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TResource))
  name.vb: Task(Of List(Of TResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll*
  commentId: Overload:Octopus.Client.Repositories.Async.IPaginate`1.FindAll
  name: FindAll
  nameWithType: IPaginate<TResource>.FindAll
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll
  nameWithType.vb: IPaginate(Of TResource).FindAll
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll
