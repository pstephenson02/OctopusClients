### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.IEventRepository
  commentId: T:Octopus.Client.Repositories.Async.IEventRepository
  id: IEventRepository
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.IEventRepository.GetAgents
  - Octopus.Client.Repositories.Async.IEventRepository.GetCategories
  - Octopus.Client.Repositories.Async.IEventRepository.GetDocumentTypes
  - Octopus.Client.Repositories.Async.IEventRepository.GetGroups
  - Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  - Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32,System.String,System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: IEventRepository
  nameWithType: IEventRepository
  fullName: Octopus.Client.Repositories.Async.IEventRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/EventRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IEventRepository
    path: ../source/Octopus.Client/Repositories/Async/EventRepository.cs
    startLine: 9
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: 'public interface IEventRepository : IGet<EventResource>, ICanExtendSpaceContext<IEventRepository>'
    content.vb: >-
      Public Interface IEventRepository
          Inherits IGet(Of EventResource), ICanExtendSpaceContext(Of IEventRepository)
  inheritedMembers:
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Get(System.String)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Get(System.String[])
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Refresh(Octopus.Client.Model.EventResource)
  - Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IEventRepository}.UsingContext(Octopus.Client.SpaceContext)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32,System.String,System.String,System.Boolean)
  commentId: M:Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32,System.String,System.String,System.Boolean)
  id: List(System.Int32,System.String,System.String,System.Boolean)
  parent: Octopus.Client.Repositories.Async.IEventRepository
  langs:
  - csharp
  - vb
  name: List(Int32, String, String, Boolean)
  nameWithType: IEventRepository.List(Int32, String, String, Boolean)
  fullName: Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/EventRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: List
    path: ../source/Octopus.Client/Repositories/Async/EventRepository.cs
    startLine: 11
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: >-
      [Obsolete("This method was deprecated in Octopus 3.4.  Please use the other List method by providing named arguments.")]

      Task<ResourceCollection<EventResource>> List(int skip = 0, string filterByUserId = null, string regardingDocumentId = null, bool includeInternalEvents = false)
    parameters:
    - id: skip
      type: System.Int32
    - id: filterByUserId
      type: System.String
    - id: regardingDocumentId
      type: System.String
    - id: includeInternalEvents
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.EventResource}}
    content.vb: >-
      <Obsolete("This method was deprecated in Octopus 3.4.  Please use the other List method by providing named arguments.")>

      Function List(skip As Integer = 0, filterByUserId As String = Nothing, regardingDocumentId As String = Nothing, includeInternalEvents As Boolean = False) As Task(Of ResourceCollection(Of EventResource))
  overload: Octopus.Client.Repositories.Async.IEventRepository.List*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This method was deprecated in Octopus 3.4.  Please use the other List method by providing named arguments.
- uid: Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  commentId: M:Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  id: List(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String)
  parent: Octopus.Client.Repositories.Async.IEventRepository
  langs:
  - csharp
  - vb
  name: List(Int32, Nullable<Int32>, String, String, String, String, Boolean, String, String, String, String, String, String, String, String, Nullable<Int64>, Nullable<Int64>, String, String, String)
  nameWithType: IEventRepository.List(Int32, Nullable<Int32>, String, String, String, String, Boolean, String, String, String, String, String, String, String, String, Nullable<Int64>, Nullable<Int64>, String, String, String)
  fullName: Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32, System.Nullable<System.Int32>, System.String, System.String, System.String, System.String, System.Boolean, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Nullable<System.Int64>, System.Nullable<System.Int64>, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/EventRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: List
    path: ../source/Octopus.Client/Repositories/Async/EventRepository.cs
    startLine: 41
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  summary: "\n\n"
  example: []
  syntax:
    content: Task<ResourceCollection<EventResource>> List(int skip = 0, int? take = default(int? ), string from = null, string to = null, string regarding = null, string regardingAny = null, bool includeInternalEvents = true, string user = null, string users = null, string projects = null, string environments = null, string eventGroups = null, string eventCategories = null, string tenants = null, string tags = null, long? fromAutoId = default(long? ), long? toAutoId = default(long? ), string documentTypes = null, string eventAgents = null, string projectGroups = null)
    parameters:
    - id: skip
      type: System.Int32
      description: Number of records to skip
    - id: take
      type: System.Nullable{System.Int32}
      description: Number of records to take (First supported in Server 3.14.15)
    - id: from
      type: System.String
      description: ''
    - id: to
      type: System.String
      description: ''
    - id: regarding
      type: System.String
      description: ''
    - id: regardingAny
      type: System.String
      description: ''
    - id: includeInternalEvents
      type: System.Boolean
      description: ''
    - id: user
      type: System.String
      description: ''
    - id: users
      type: System.String
      description: ''
    - id: projects
      type: System.String
      description: ''
    - id: environments
      type: System.String
      description: ''
    - id: eventGroups
      type: System.String
      description: ''
    - id: eventCategories
      type: System.String
      description: ''
    - id: tenants
      type: System.String
      description: ''
    - id: tags
      type: System.String
      description: ''
    - id: fromAutoId
      type: System.Nullable{System.Int64}
      description: ''
    - id: toAutoId
      type: System.Nullable{System.Int64}
      description: ''
    - id: documentTypes
      type: System.String
      description: ''
    - id: eventAgents
      type: System.String
      description: ''
    - id: projectGroups
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.EventResource}}
      description: ''
    content.vb: Function List(skip As Integer = 0, take As Integer? = Nothing, from As String = Nothing, to As String = Nothing, regarding As String = Nothing, regardingAny As String = Nothing, includeInternalEvents As Boolean = True, user As String = Nothing, users As String = Nothing, projects As String = Nothing, environments As String = Nothing, eventGroups As String = Nothing, eventCategories As String = Nothing, tenants As String = Nothing, tags As String = Nothing, fromAutoId As Long? = Nothing, toAutoId As Long? = Nothing, documentTypes As String = Nothing, eventAgents As String = Nothing, projectGroups As String = Nothing) As Task(Of ResourceCollection(Of EventResource))
  overload: Octopus.Client.Repositories.Async.IEventRepository.List*
  nameWithType.vb: IEventRepository.List(Int32, Nullable(Of Int32), String, String, String, String, Boolean, String, String, String, String, String, String, String, String, Nullable(Of Int64), Nullable(Of Int64), String, String, String)
  fullName.vb: Octopus.Client.Repositories.Async.IEventRepository.List(System.Int32, System.Nullable(Of System.Int32), System.String, System.String, System.String, System.String, System.Boolean, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64), System.String, System.String, System.String)
  name.vb: List(Int32, Nullable(Of Int32), String, String, String, String, Boolean, String, String, String, String, String, String, String, String, Nullable(Of Int64), Nullable(Of Int64), String, String, String)
- uid: Octopus.Client.Repositories.Async.IEventRepository.GetDocumentTypes
  commentId: M:Octopus.Client.Repositories.Async.IEventRepository.GetDocumentTypes
  id: GetDocumentTypes
  parent: Octopus.Client.Repositories.Async.IEventRepository
  langs:
  - csharp
  - vb
  name: GetDocumentTypes()
  nameWithType: IEventRepository.GetDocumentTypes()
  fullName: Octopus.Client.Repositories.Async.IEventRepository.GetDocumentTypes()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/EventRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetDocumentTypes
    path: ../source/Octopus.Client/Repositories/Async/EventRepository.cs
    startLine: 62
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<IReadOnlyList<DocumentTypeResource>> GetDocumentTypes()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.DocumentTypeResource}}
    content.vb: Function GetDocumentTypes As Task(Of IReadOnlyList(Of DocumentTypeResource))
  overload: Octopus.Client.Repositories.Async.IEventRepository.GetDocumentTypes*
- uid: Octopus.Client.Repositories.Async.IEventRepository.GetAgents
  commentId: M:Octopus.Client.Repositories.Async.IEventRepository.GetAgents
  id: GetAgents
  parent: Octopus.Client.Repositories.Async.IEventRepository
  langs:
  - csharp
  - vb
  name: GetAgents()
  nameWithType: IEventRepository.GetAgents()
  fullName: Octopus.Client.Repositories.Async.IEventRepository.GetAgents()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/EventRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetAgents
    path: ../source/Octopus.Client/Repositories/Async/EventRepository.cs
    startLine: 63
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<IReadOnlyList<EventAgentResource>> GetAgents()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventAgentResource}}
    content.vb: Function GetAgents As Task(Of IReadOnlyList(Of EventAgentResource))
  overload: Octopus.Client.Repositories.Async.IEventRepository.GetAgents*
- uid: Octopus.Client.Repositories.Async.IEventRepository.GetCategories
  commentId: M:Octopus.Client.Repositories.Async.IEventRepository.GetCategories
  id: GetCategories
  parent: Octopus.Client.Repositories.Async.IEventRepository
  langs:
  - csharp
  - vb
  name: GetCategories()
  nameWithType: IEventRepository.GetCategories()
  fullName: Octopus.Client.Repositories.Async.IEventRepository.GetCategories()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/EventRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetCategories
    path: ../source/Octopus.Client/Repositories/Async/EventRepository.cs
    startLine: 64
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<IReadOnlyList<EventCategoryResource>> GetCategories()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventCategoryResource}}
    content.vb: Function GetCategories As Task(Of IReadOnlyList(Of EventCategoryResource))
  overload: Octopus.Client.Repositories.Async.IEventRepository.GetCategories*
- uid: Octopus.Client.Repositories.Async.IEventRepository.GetGroups
  commentId: M:Octopus.Client.Repositories.Async.IEventRepository.GetGroups
  id: GetGroups
  parent: Octopus.Client.Repositories.Async.IEventRepository
  langs:
  - csharp
  - vb
  name: GetGroups()
  nameWithType: IEventRepository.GetGroups()
  fullName: Octopus.Client.Repositories.Async.IEventRepository.GetGroups()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/EventRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetGroups
    path: ../source/Octopus.Client/Repositories/Async/EventRepository.cs
    startLine: 65
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<IReadOnlyList<EventGroupResource>> GetGroups()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventGroupResource}}
    content.vb: Function GetGroups As Task(Of IReadOnlyList(Of EventGroupResource))
  overload: Octopus.Client.Repositories.Async.IEventRepository.GetGroups*
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Get(System.String)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  name: Get(String)
  nameWithType: IGet<EventResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.EventResource>.Get(System.String)
  nameWithType.vb: IGet(Of EventResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.EventResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<EventResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.EventResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of EventResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.EventResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Get(System.String[])
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  name: Get(String[])
  nameWithType: IGet<EventResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.EventResource>.Get(System.String[])
  nameWithType.vb: IGet(Of EventResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.EventResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<EventResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.EventResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of EventResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.EventResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Refresh(Octopus.Client.Model.EventResource)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}.Refresh(Octopus.Client.Model.EventResource)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(EventResource)
  nameWithType: IGet<EventResource>.Refresh(EventResource)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.EventResource>.Refresh(Octopus.Client.Model.EventResource)
  nameWithType.vb: IGet(Of EventResource).Refresh(EventResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.EventResource).Refresh(Octopus.Client.Model.EventResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<EventResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.EventResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.EventResource
    name: EventResource
    nameWithType: EventResource
    fullName: Octopus.Client.Model.EventResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of EventResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.EventResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.EventResource
    name: EventResource
    nameWithType: EventResource
    fullName: Octopus.Client.Model.EventResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IEventRepository}.UsingContext(Octopus.Client.SpaceContext)
  commentId: M:Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IEventRepository}.UsingContext(Octopus.Client.SpaceContext)
  parent: Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IEventRepository}
  definition: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
  name: UsingContext(SpaceContext)
  nameWithType: ICanExtendSpaceContext<IEventRepository>.UsingContext(SpaceContext)
  fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<Octopus.Client.Repositories.Async.IEventRepository>.UsingContext(Octopus.Client.SpaceContext)
  nameWithType.vb: ICanExtendSpaceContext(Of IEventRepository).UsingContext(SpaceContext)
  fullName.vb: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of Octopus.Client.Repositories.Async.IEventRepository).UsingContext(Octopus.Client.SpaceContext)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
    name: UsingContext
    nameWithType: ICanExtendSpaceContext<IEventRepository>.UsingContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<Octopus.Client.Repositories.Async.IEventRepository>.UsingContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.SpaceContext
    name: SpaceContext
    nameWithType: SpaceContext
    fullName: Octopus.Client.SpaceContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
    name: UsingContext
    nameWithType: ICanExtendSpaceContext(Of IEventRepository).UsingContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of Octopus.Client.Repositories.Async.IEventRepository).UsingContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.SpaceContext
    name: SpaceContext
    nameWithType: SpaceContext
    fullName: Octopus.Client.SpaceContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: IGet<TResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String)
  nameWithType.vb: IGet(Of TResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}
  commentId: T:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.EventResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IGet`1
  name: IGet<EventResource>
  nameWithType: IGet<EventResource>
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.EventResource>
  nameWithType.vb: IGet(Of EventResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.EventResource)
  name.vb: IGet(Of EventResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.EventResource
    name: EventResource
    nameWithType: EventResource
    fullName: Octopus.Client.Model.EventResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.EventResource
    name: EventResource
    nameWithType: EventResource
    fullName: Octopus.Client.Model.EventResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  isExternal: true
  name: Get(String[])
  nameWithType: IGet<TResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(TResource)
  nameWithType: IGet<TResource>.Refresh(TResource)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh(TResource)
  nameWithType.vb: IGet(Of TResource).Refresh(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
  commentId: M:Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
  name: UsingContext(SpaceContext)
  nameWithType: ICanExtendSpaceContext<T>.UsingContext(SpaceContext)
  fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<T>.UsingContext(Octopus.Client.SpaceContext)
  nameWithType.vb: ICanExtendSpaceContext(Of T).UsingContext(SpaceContext)
  fullName.vb: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of T).UsingContext(Octopus.Client.SpaceContext)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
    name: UsingContext
    nameWithType: ICanExtendSpaceContext<T>.UsingContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<T>.UsingContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.SpaceContext
    name: SpaceContext
    nameWithType: SpaceContext
    fullName: Octopus.Client.SpaceContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
    name: UsingContext
    nameWithType: ICanExtendSpaceContext(Of T).UsingContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of T).UsingContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.SpaceContext
    name: SpaceContext
    nameWithType: SpaceContext
    fullName: Octopus.Client.SpaceContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IEventRepository}
  commentId: T:Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IEventRepository}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
  name: ICanExtendSpaceContext<IEventRepository>
  nameWithType: ICanExtendSpaceContext<IEventRepository>
  fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<Octopus.Client.Repositories.Async.IEventRepository>
  nameWithType.vb: ICanExtendSpaceContext(Of IEventRepository)
  fullName.vb: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of Octopus.Client.Repositories.Async.IEventRepository)
  name.vb: ICanExtendSpaceContext(Of IEventRepository)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
    name: ICanExtendSpaceContext
    nameWithType: ICanExtendSpaceContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Repositories.Async.IEventRepository
    name: IEventRepository
    nameWithType: IEventRepository
    fullName: Octopus.Client.Repositories.Async.IEventRepository
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
    name: ICanExtendSpaceContext
    nameWithType: ICanExtendSpaceContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Repositories.Async.IEventRepository
    name: IEventRepository
    nameWithType: IEventRepository
    fullName: Octopus.Client.Repositories.Async.IEventRepository
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1
  commentId: T:Octopus.Client.Repositories.Async.IGet`1
  name: IGet<TResource>
  nameWithType: IGet<TResource>
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>
  nameWithType.vb: IGet(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource)
  name.vb: IGet(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
  commentId: T:Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
  name: ICanExtendSpaceContext<T>
  nameWithType: ICanExtendSpaceContext<T>
  fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<T>
  nameWithType.vb: ICanExtendSpaceContext(Of T)
  fullName.vb: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of T)
  name.vb: ICanExtendSpaceContext(Of T)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
    name: ICanExtendSpaceContext
    nameWithType: ICanExtendSpaceContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
    name: ICanExtendSpaceContext
    nameWithType: ICanExtendSpaceContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IEventRepository.List*
  commentId: Overload:Octopus.Client.Repositories.Async.IEventRepository.List
  name: List
  nameWithType: IEventRepository.List
  fullName: Octopus.Client.Repositories.Async.IEventRepository.List
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.EventResource}}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.EventResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResourceCollection<EventResource>>
  nameWithType: Task<ResourceCollection<EventResource>>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.EventResource>>
  nameWithType.vb: Task(Of ResourceCollection(Of EventResource))
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.EventResource))
  name.vb: Task(Of ResourceCollection(Of EventResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.EventResource
    name: EventResource
    nameWithType: EventResource
    fullName: Octopus.Client.Model.EventResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.EventResource
    name: EventResource
    nameWithType: EventResource
    fullName: Octopus.Client.Model.EventResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IEventRepository.GetDocumentTypes*
  commentId: Overload:Octopus.Client.Repositories.Async.IEventRepository.GetDocumentTypes
  name: GetDocumentTypes
  nameWithType: IEventRepository.GetDocumentTypes
  fullName: Octopus.Client.Repositories.Async.IEventRepository.GetDocumentTypes
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.DocumentTypeResource}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.DocumentTypeResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyList<DocumentTypeResource>>
  nameWithType: Task<IReadOnlyList<DocumentTypeResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Octopus.Client.Model.DocumentTypeResource>>
  nameWithType.vb: Task(Of IReadOnlyList(Of DocumentTypeResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of Octopus.Client.Model.DocumentTypeResource))
  name.vb: Task(Of IReadOnlyList(Of DocumentTypeResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.DocumentTypeResource
    name: DocumentTypeResource
    nameWithType: DocumentTypeResource
    fullName: Octopus.Client.Model.DocumentTypeResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.DocumentTypeResource
    name: DocumentTypeResource
    nameWithType: DocumentTypeResource
    fullName: Octopus.Client.Model.DocumentTypeResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IEventRepository.GetAgents*
  commentId: Overload:Octopus.Client.Repositories.Async.IEventRepository.GetAgents
  name: GetAgents
  nameWithType: IEventRepository.GetAgents
  fullName: Octopus.Client.Repositories.Async.IEventRepository.GetAgents
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventAgentResource}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventAgentResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyList<EventAgentResource>>
  nameWithType: Task<IReadOnlyList<EventAgentResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Octopus.Client.Model.EventAgentResource>>
  nameWithType.vb: Task(Of IReadOnlyList(Of EventAgentResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of Octopus.Client.Model.EventAgentResource))
  name.vb: Task(Of IReadOnlyList(Of EventAgentResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.EventAgentResource
    name: EventAgentResource
    nameWithType: EventAgentResource
    fullName: Octopus.Client.Model.EventAgentResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.EventAgentResource
    name: EventAgentResource
    nameWithType: EventAgentResource
    fullName: Octopus.Client.Model.EventAgentResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IEventRepository.GetCategories*
  commentId: Overload:Octopus.Client.Repositories.Async.IEventRepository.GetCategories
  name: GetCategories
  nameWithType: IEventRepository.GetCategories
  fullName: Octopus.Client.Repositories.Async.IEventRepository.GetCategories
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventCategoryResource}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventCategoryResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyList<EventCategoryResource>>
  nameWithType: Task<IReadOnlyList<EventCategoryResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Octopus.Client.Model.EventCategoryResource>>
  nameWithType.vb: Task(Of IReadOnlyList(Of EventCategoryResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of Octopus.Client.Model.EventCategoryResource))
  name.vb: Task(Of IReadOnlyList(Of EventCategoryResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.EventCategoryResource
    name: EventCategoryResource
    nameWithType: EventCategoryResource
    fullName: Octopus.Client.Model.EventCategoryResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.EventCategoryResource
    name: EventCategoryResource
    nameWithType: EventCategoryResource
    fullName: Octopus.Client.Model.EventCategoryResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IEventRepository.GetGroups*
  commentId: Overload:Octopus.Client.Repositories.Async.IEventRepository.GetGroups
  name: GetGroups
  nameWithType: IEventRepository.GetGroups
  fullName: Octopus.Client.Repositories.Async.IEventRepository.GetGroups
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventGroupResource}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.EventGroupResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyList<EventGroupResource>>
  nameWithType: Task<IReadOnlyList<EventGroupResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Octopus.Client.Model.EventGroupResource>>
  nameWithType.vb: Task(Of IReadOnlyList(Of EventGroupResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of Octopus.Client.Model.EventGroupResource))
  name.vb: Task(Of IReadOnlyList(Of EventGroupResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.EventGroupResource
    name: EventGroupResource
    nameWithType: EventGroupResource
    fullName: Octopus.Client.Model.EventGroupResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.EventGroupResource
    name: EventGroupResource
    nameWithType: EventGroupResource
    fullName: Octopus.Client.Model.EventGroupResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
