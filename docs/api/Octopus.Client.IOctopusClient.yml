### YamlMime:ManagedReference
items:
- uid: Octopus.Client.IOctopusClient
  commentId: T:Octopus.Client.IOctopusClient
  id: IOctopusClient
  parent: Octopus.Client
  children:
  - Octopus.Client.IOctopusClient.Create``1(System.String,``0,System.Object)
  - Octopus.Client.IOctopusClient.Delete(System.String,System.Object,System.Object)
  - Octopus.Client.IOctopusClient.ForSpace(Octopus.Client.Model.SpaceResource)
  - Octopus.Client.IOctopusClient.ForSystem
  - Octopus.Client.IOctopusClient.Get``1(System.String,System.Object)
  - Octopus.Client.IOctopusClient.GetContent(System.String,System.Object)
  - Octopus.Client.IOctopusClient.IsUsingSecureConnection
  - Octopus.Client.IOctopusClient.List``1(System.String,System.Object)
  - Octopus.Client.IOctopusClient.ListAll``1(System.String,System.Object)
  - Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})
  - Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})
  - Octopus.Client.IOctopusClient.Post(System.String)
  - Octopus.Client.IOctopusClient.Post``1(System.String,``0,System.Object)
  - Octopus.Client.IOctopusClient.Post``2(System.String,``0,System.Object)
  - Octopus.Client.IOctopusClient.Put(System.String)
  - Octopus.Client.IOctopusClient.Put``1(System.String,``0)
  - Octopus.Client.IOctopusClient.Put``1(System.String,``0,System.Object)
  - Octopus.Client.IOctopusClient.PutContent(System.String,System.IO.Stream)
  - Octopus.Client.IOctopusClient.QualifyUri(System.String,System.Object)
  - Octopus.Client.IOctopusClient.ReceivedOctopusResponse
  - Octopus.Client.IOctopusClient.Repository
  - Octopus.Client.IOctopusClient.SendingOctopusRequest
  - Octopus.Client.IOctopusClient.SignIn(Octopus.Client.Model.LoginCommand)
  - Octopus.Client.IOctopusClient.SignOut
  - Octopus.Client.IOctopusClient.Update``1(System.String,``0,System.Object)
  langs:
  - csharp
  - vb
  name: IOctopusClient
  nameWithType: IOctopusClient
  fullName: Octopus.Client.IOctopusClient
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IOctopusClient
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 12
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nContract for a client to the Octopus Deploy HTTP API.\n"
  example: []
  syntax:
    content: 'public interface IOctopusClient : IDisposable'
    content.vb: >-
      Public Interface IOctopusClient
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.IOctopusClient.Repository
  commentId: P:Octopus.Client.IOctopusClient.Repository
  id: Repository
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Repository
  nameWithType: IOctopusClient.Repository
  fullName: Octopus.Client.IOctopusClient.Repository
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Repository
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 33
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: IOctopusRepository Repository { get; }
    parameters: []
    return:
      type: Octopus.Client.IOctopusRepository
    content.vb: ReadOnly Property Repository As IOctopusRepository
  overload: Octopus.Client.IOctopusClient.Repository*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusClient.IsUsingSecureConnection
  commentId: P:Octopus.Client.IOctopusClient.IsUsingSecureConnection
  id: IsUsingSecureConnection
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: IsUsingSecureConnection
  nameWithType: IOctopusClient.IsUsingSecureConnection
  fullName: Octopus.Client.IOctopusClient.IsUsingSecureConnection
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IsUsingSecureConnection
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 38
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nIndicates whether a secure (SSL) connection is being used to communicate with the server.\n"
  example: []
  syntax:
    content: bool IsUsingSecureConnection { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsUsingSecureConnection As Boolean
  overload: Octopus.Client.IOctopusClient.IsUsingSecureConnection*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusClient.SendingOctopusRequest
  commentId: E:Octopus.Client.IOctopusClient.SendingOctopusRequest
  id: SendingOctopusRequest
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: SendingOctopusRequest
  nameWithType: IOctopusClient.SendingOctopusRequest
  fullName: Octopus.Client.IOctopusClient.SendingOctopusRequest
  type: Event
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SendingOctopusRequest
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 43
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nOccurs when a request is about to be sent.\n"
  example: []
  syntax:
    content: event Action<OctopusRequest> SendingOctopusRequest
    return:
      type: System.Action{Octopus.Client.OctopusRequest}
    content.vb: Event SendingOctopusRequest As Action(Of OctopusRequest)
- uid: Octopus.Client.IOctopusClient.ReceivedOctopusResponse
  commentId: E:Octopus.Client.IOctopusClient.ReceivedOctopusResponse
  id: ReceivedOctopusResponse
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: ReceivedOctopusResponse
  nameWithType: IOctopusClient.ReceivedOctopusResponse
  fullName: Octopus.Client.IOctopusClient.ReceivedOctopusResponse
  type: Event
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ReceivedOctopusResponse
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 48
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nOccurs when a response is received from the Octopus Server.\n"
  example: []
  syntax:
    content: event Action<OctopusResponse> ReceivedOctopusResponse
    return:
      type: System.Action{Octopus.Client.OctopusResponse}
    content.vb: Event ReceivedOctopusResponse As Action(Of OctopusResponse)
- uid: Octopus.Client.IOctopusClient.List``1(System.String,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.List``1(System.String,System.Object)
  id: List``1(System.String,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: List<TResource>(String, Object)
  nameWithType: IOctopusClient.List<TResource>(String, Object)
  fullName: Octopus.Client.IOctopusClient.List<TResource>(System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: List
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 68
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nFetches a collection of resources from the server using the HTTP GET verb. The collection itself will usually be\nlimited in size (pagination) and links to the next page of data is available in the <xref href=\"Octopus.Client.Model.Resource.Links\" data-throw-if-not-resolved=\"false\"></xref>\nproperty.\n"
  example: []
  syntax:
    content: ResourceCollection<TResource> List<TResource>(string path, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path from which to fetch the resources.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    typeParameters:
    - id: TResource
    return:
      type: Octopus.Client.Model.ResourceCollection{{TResource}}
      description: The collection of resources from the server.
    content.vb: Function List(Of TResource)(path As String, pathParameters As Object = Nothing) As ResourceCollection(Of TResource)
  overload: Octopus.Client.IOctopusClient.List*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.List(Of TResource)(String, Object)
  fullName.vb: Octopus.Client.IOctopusClient.List(Of TResource)(System.String, System.Object)
  name.vb: List(Of TResource)(String, Object)
- uid: Octopus.Client.IOctopusClient.ListAll``1(System.String,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.ListAll``1(System.String,System.Object)
  id: ListAll``1(System.String,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: ListAll<TResource>(String, Object)
  nameWithType: IOctopusClient.ListAll<TResource>(String, Object)
  fullName: Octopus.Client.IOctopusClient.ListAll<TResource>(System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ListAll
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 86
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nFetches a collection of resources from the server using the HTTP GET verb. All result pages will be retrieved.\n"
  example: []
  syntax:
    content: IReadOnlyList<TResource> ListAll<TResource>(string path, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path from which to fetch the resources.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    typeParameters:
    - id: TResource
    return:
      type: System.Collections.Generic.IReadOnlyList{{TResource}}
      description: The collection of resources from the server.
    content.vb: Function ListAll(Of TResource)(path As String, pathParameters As Object = Nothing) As IReadOnlyList(Of TResource)
  overload: Octopus.Client.IOctopusClient.ListAll*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.ListAll(Of TResource)(String, Object)
  fullName.vb: Octopus.Client.IOctopusClient.ListAll(Of TResource)(System.String, System.Object)
  name.vb: ListAll(Of TResource)(String, Object)
- uid: Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})
  commentId: M:Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})
  id: Paginate``1(System.String,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Paginate<TResource>(String, Func<ResourceCollection<TResource>, Boolean>)
  nameWithType: IOctopusClient.Paginate<TResource>(String, Func<ResourceCollection<TResource>, Boolean>)
  fullName: Octopus.Client.IOctopusClient.Paginate<TResource>(System.String, System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Paginate
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 107
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nFetches a collection of resources from the server one page at a time using the HTTP GET verb.\n"
  example: []
  syntax:
    content: void Paginate<TResource>(string path, Func<ResourceCollection<TResource>, bool> getNextPage)
    parameters:
    - id: path
      type: System.String
      description: The path from which to fetch the resources.
    - id: getNextPage
      type: System.Func{Octopus.Client.Model.ResourceCollection{{TResource}},System.Boolean}
      description: "\nA callback invoked for each page of data found. If the callback returns <code>true</code>, the next\npage will also be requested.\n"
    typeParameters:
    - id: TResource
    content.vb: Sub Paginate(Of TResource)(path As String, getNextPage As Func(Of ResourceCollection(Of TResource), Boolean))
  overload: Octopus.Client.IOctopusClient.Paginate*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Paginate(Of TResource)(String, Func(Of ResourceCollection(Of TResource), Boolean))
  fullName.vb: Octopus.Client.IOctopusClient.Paginate(Of TResource)(System.String, System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean))
  name.vb: Paginate(Of TResource)(String, Func(Of ResourceCollection(Of TResource), Boolean))
- uid: Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})
  commentId: M:Octopus.Client.IOctopusClient.Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})
  id: Paginate``1(System.String,System.Object,System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean})
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Paginate<TResource>(String, Object, Func<ResourceCollection<TResource>, Boolean>)
  nameWithType: IOctopusClient.Paginate<TResource>(String, Object, Func<ResourceCollection<TResource>, Boolean>)
  fullName: Octopus.Client.IOctopusClient.Paginate<TResource>(System.String, System.Object, System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Paginate
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 129
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nFetches a collection of resources from the server one page at a time using the HTTP GET verb.\n"
  example: []
  syntax:
    content: void Paginate<TResource>(string path, object pathParameters, Func<ResourceCollection<TResource>, bool> getNextPage)
    parameters:
    - id: path
      type: System.String
      description: The path from which to fetch the resources.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    - id: getNextPage
      type: System.Func{Octopus.Client.Model.ResourceCollection{{TResource}},System.Boolean}
      description: "\nA callback invoked for each page of data found. If the callback returns <code>true</code>, the next\npage will also be requested.\n"
    typeParameters:
    - id: TResource
    content.vb: Sub Paginate(Of TResource)(path As String, pathParameters As Object, getNextPage As Func(Of ResourceCollection(Of TResource), Boolean))
  overload: Octopus.Client.IOctopusClient.Paginate*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Paginate(Of TResource)(String, Object, Func(Of ResourceCollection(Of TResource), Boolean))
  fullName.vb: Octopus.Client.IOctopusClient.Paginate(Of TResource)(System.String, System.Object, System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean))
  name.vb: Paginate(Of TResource)(String, Object, Func(Of ResourceCollection(Of TResource), Boolean))
- uid: Octopus.Client.IOctopusClient.Get``1(System.String,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.Get``1(System.String,System.Object)
  id: Get``1(System.String,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Get<TResource>(String, Object)
  nameWithType: IOctopusClient.Get<TResource>(String, Object)
  fullName: Octopus.Client.IOctopusClient.Get<TResource>(System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Get
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 147
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nFetches a single resource from the server using the HTTP GET verb.\n"
  example: []
  syntax:
    content: TResource Get<TResource>(string path, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path from which to fetch the resource.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    typeParameters:
    - id: TResource
    return:
      type: '{TResource}'
      description: The resource from the server.
    content.vb: Function Get(Of TResource)(path As String, pathParameters As Object = Nothing) As TResource
  overload: Octopus.Client.IOctopusClient.Get*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Get(Of TResource)(String, Object)
  fullName.vb: Octopus.Client.IOctopusClient.Get(Of TResource)(System.String, System.Object)
  name.vb: Get(Of TResource)(String, Object)
- uid: Octopus.Client.IOctopusClient.Create``1(System.String,``0,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.Create``1(System.String,``0,System.Object)
  id: Create``1(System.String,``0,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Create<TResource>(String, TResource, Object)
  nameWithType: IOctopusClient.Create<TResource>(String, TResource, Object)
  fullName: Octopus.Client.IOctopusClient.Create<TResource>(System.String, TResource, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Create
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 167
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nCreates a resource at the given URI on the server using the POST verb, then performs a fresh GET request to fetch\nthe created item.\n"
  example: []
  syntax:
    content: TResource Create<TResource>(string path, TResource resource, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the container resource.
    - id: resource
      type: '{TResource}'
      description: The resource to create.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    typeParameters:
    - id: TResource
    return:
      type: '{TResource}'
      description: The latest copy of the resource from the server.
    content.vb: Function Create(Of TResource)(path As String, resource As TResource, pathParameters As Object = Nothing) As TResource
  overload: Octopus.Client.IOctopusClient.Create*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Create(Of TResource)(String, TResource, Object)
  fullName.vb: Octopus.Client.IOctopusClient.Create(Of TResource)(System.String, TResource, System.Object)
  name.vb: Create(Of TResource)(String, TResource, Object)
- uid: Octopus.Client.IOctopusClient.Post``1(System.String,``0,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.Post``1(System.String,``0,System.Object)
  id: Post``1(System.String,``0,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Post<TResource>(String, TResource, Object)
  nameWithType: IOctopusClient.Post<TResource>(String, TResource, Object)
  fullName: Octopus.Client.IOctopusClient.Post<TResource>(System.String, TResource, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Post
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 185
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSends a command to a resource at the given URI on the server using the POST verb.\n"
  example: []
  syntax:
    content: void Post<TResource>(string path, TResource resource, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the container resource.
    - id: resource
      type: '{TResource}'
      description: The resource to create.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    typeParameters:
    - id: TResource
    content.vb: Sub Post(Of TResource)(path As String, resource As TResource, pathParameters As Object = Nothing)
  overload: Octopus.Client.IOctopusClient.Post*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Post(Of TResource)(String, TResource, Object)
  fullName.vb: Octopus.Client.IOctopusClient.Post(Of TResource)(System.String, TResource, System.Object)
  name.vb: Post(Of TResource)(String, TResource, Object)
- uid: Octopus.Client.IOctopusClient.Post``2(System.String,``0,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.Post``2(System.String,``0,System.Object)
  id: Post``2(System.String,``0,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Post<TResource, TResponse>(String, TResource, Object)
  nameWithType: IOctopusClient.Post<TResource, TResponse>(String, TResource, Object)
  fullName: Octopus.Client.IOctopusClient.Post<TResource, TResponse>(System.String, TResource, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Post
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 203
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSends a command to a resource at the given URI on the server using the POST verb, and retrieve the response.\n"
  example: []
  syntax:
    content: TResponse Post<TResource, TResponse>(string path, TResource resource, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the container resource.
    - id: resource
      type: '{TResource}'
      description: The resource to create.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    typeParameters:
    - id: TResource
    - id: TResponse
    return:
      type: '{TResponse}'
    content.vb: Function Post(Of TResource, TResponse)(path As String, resource As TResource, pathParameters As Object = Nothing) As TResponse
  overload: Octopus.Client.IOctopusClient.Post*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Post(Of TResource, TResponse)(String, TResource, Object)
  fullName.vb: Octopus.Client.IOctopusClient.Post(Of TResource, TResponse)(System.String, TResource, System.Object)
  name.vb: Post(Of TResource, TResponse)(String, TResource, Object)
- uid: Octopus.Client.IOctopusClient.Post(System.String)
  commentId: M:Octopus.Client.IOctopusClient.Post(System.String)
  id: Post(System.String)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Post(String)
  nameWithType: IOctopusClient.Post(String)
  fullName: Octopus.Client.IOctopusClient.Post(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Post
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 219
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSends a command to a resource at the given URI on the server using the POST verb.\n"
  example: []
  syntax:
    content: void Post(string path)
    parameters:
    - id: path
      type: System.String
      description: The path to the container resource.
    content.vb: Sub Post(path As String)
  overload: Octopus.Client.IOctopusClient.Post*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
- uid: Octopus.Client.IOctopusClient.Put``1(System.String,``0)
  commentId: M:Octopus.Client.IOctopusClient.Put``1(System.String,``0)
  id: Put``1(System.String,``0)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Put<TResource>(String, TResource)
  nameWithType: IOctopusClient.Put<TResource>(String, TResource)
  fullName: Octopus.Client.IOctopusClient.Put<TResource>(System.String, TResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Put
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 236
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSends a command to a resource at the given URI on the server using the PUT verb.\n"
  example: []
  syntax:
    content: void Put<TResource>(string path, TResource resource)
    parameters:
    - id: path
      type: System.String
      description: The path to the container resource.
    - id: resource
      type: '{TResource}'
      description: The resource to create.
    typeParameters:
    - id: TResource
    content.vb: Sub Put(Of TResource)(path As String, resource As TResource)
  overload: Octopus.Client.IOctopusClient.Put*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Put(Of TResource)(String, TResource)
  fullName.vb: Octopus.Client.IOctopusClient.Put(Of TResource)(System.String, TResource)
  name.vb: Put(Of TResource)(String, TResource)
- uid: Octopus.Client.IOctopusClient.Put(System.String)
  commentId: M:Octopus.Client.IOctopusClient.Put(System.String)
  id: Put(System.String)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Put(String)
  nameWithType: IOctopusClient.Put(String)
  fullName: Octopus.Client.IOctopusClient.Put(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Put
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 252
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSends a command to a resource at the given URI on the server using the PUT verb.\n"
  example: []
  syntax:
    content: void Put(string path)
    parameters:
    - id: path
      type: System.String
      description: The path to the container resource.
    content.vb: Sub Put(path As String)
  overload: Octopus.Client.IOctopusClient.Put*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
- uid: Octopus.Client.IOctopusClient.Put``1(System.String,``0,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.Put``1(System.String,``0,System.Object)
  id: Put``1(System.String,``0,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Put<TResource>(String, TResource, Object)
  nameWithType: IOctopusClient.Put<TResource>(String, TResource, Object)
  fullName: Octopus.Client.IOctopusClient.Put<TResource>(System.String, TResource, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Put
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 270
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSends a command to a resource at the given URI on the server using the PUT verb.\n"
  example: []
  syntax:
    content: void Put<TResource>(string path, TResource resource, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the container resource.
    - id: resource
      type: '{TResource}'
      description: The resource to create.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    typeParameters:
    - id: TResource
    content.vb: Sub Put(Of TResource)(path As String, resource As TResource, pathParameters As Object = Nothing)
  overload: Octopus.Client.IOctopusClient.Put*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Put(Of TResource)(String, TResource, Object)
  fullName.vb: Octopus.Client.IOctopusClient.Put(Of TResource)(System.String, TResource, System.Object)
  name.vb: Put(Of TResource)(String, TResource, Object)
- uid: Octopus.Client.IOctopusClient.Update``1(System.String,``0,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.Update``1(System.String,``0,System.Object)
  id: Update``1(System.String,``0,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Update<TResource>(String, TResource, Object)
  nameWithType: IOctopusClient.Update<TResource>(String, TResource, Object)
  fullName: Octopus.Client.IOctopusClient.Update<TResource>(System.String, TResource, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Update
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 290
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nUpdates the resource at the given URI on the server using the PUT verb, then performs a fresh GET request to reload\nthe data.\n"
  example: []
  syntax:
    content: TResource Update<TResource>(string path, TResource resource, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the resource to update.
    - id: resource
      type: '{TResource}'
      description: The resource to update.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    typeParameters:
    - id: TResource
    return:
      type: '{TResource}'
      description: The latest copy of the resource from the server.
    content.vb: Function Update(Of TResource)(path As String, resource As TResource, pathParameters As Object = Nothing) As TResource
  overload: Octopus.Client.IOctopusClient.Update*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
  nameWithType.vb: IOctopusClient.Update(Of TResource)(String, TResource, Object)
  fullName.vb: Octopus.Client.IOctopusClient.Update(Of TResource)(System.String, TResource, System.Object)
  name.vb: Update(Of TResource)(String, TResource, Object)
- uid: Octopus.Client.IOctopusClient.Delete(System.String,System.Object,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.Delete(System.String,System.Object,System.Object)
  id: Delete(System.String,System.Object,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: Delete(String, Object, Object)
  nameWithType: IOctopusClient.Delete(String, Object, Object)
  fullName: Octopus.Client.IOctopusClient.Delete(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Delete
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 312
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nDeletes the resource at the given URI from the server using a the DELETE verb. Deletes in Octopus happen\nasynchronously via a background task\nthat is executed by the Octopus Server. The payload returned by delete will be the task that was created on the\nserver.\n"
  example: []
  syntax:
    content: void Delete(string path, object pathParameters = null, object resource = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the resource to delete.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    - id: resource
      type: System.Object
      description: An optional resource to pass as the body of the request.
    content.vb: Sub Delete(path As String, pathParameters As Object = Nothing, resource As Object = Nothing)
  overload: Octopus.Client.IOctopusClient.Delete*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
- uid: Octopus.Client.IOctopusClient.GetContent(System.String,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.GetContent(System.String,System.Object)
  id: GetContent(System.String,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: GetContent(String, Object)
  nameWithType: IOctopusClient.GetContent(String, Object)
  fullName: Octopus.Client.IOctopusClient.GetContent(System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetContent
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 330
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nFetches raw content from the resource at the specified path, using the GET verb.\n"
  example: []
  syntax:
    content: Stream GetContent(string path, object pathParameters = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the resource to fetch.
    - id: pathParameters
      type: System.Object
      description: If the <code>path</code> is a URI template, parameters to use for substitution.
    return:
      type: System.IO.Stream
      description: A stream containing the content of the resource.
    content.vb: Function GetContent(path As String, pathParameters As Object = Nothing) As Stream
  overload: Octopus.Client.IOctopusClient.GetContent*
  exceptions:
  - type: Octopus.Client.Exceptions.OctopusSecurityException
    commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
    description: "\nHTTP 401 or 403: Thrown when the current user&apos;s API key was not valid, their\naccount is disabled, or they don&apos;t have permission to perform the specified action.\n"
  - type: Octopus.Client.Exceptions.OctopusServerException
    commentId: T:Octopus.Client.Exceptions.OctopusServerException
    description: "\nIf any other error is successfully returned from the server (e.g., a 500\nserver error).\n"
  - type: Octopus.Client.Exceptions.OctopusValidationException
    commentId: T:Octopus.Client.Exceptions.OctopusValidationException
    description: 'HTTP 400: If there was a problem with the request provided by the user.'
  - type: Octopus.Client.Exceptions.OctopusResourceNotFoundException
    commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
    description: 'HTTP 404: If the specified resource does not exist on the server.'
- uid: Octopus.Client.IOctopusClient.PutContent(System.String,System.IO.Stream)
  commentId: M:Octopus.Client.IOctopusClient.PutContent(System.String,System.IO.Stream)
  id: PutContent(System.String,System.IO.Stream)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: PutContent(String, Stream)
  nameWithType: IOctopusClient.PutContent(String, Stream)
  fullName: Octopus.Client.IOctopusClient.PutContent(System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: PutContent
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 337
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nCreates or updates the raw content of the resource at the specified path, using the PUT verb.\n"
  example: []
  syntax:
    content: void PutContent(string path, Stream contentStream)
    parameters:
    - id: path
      type: System.String
      description: The path to the resource to create or update.
    - id: contentStream
      type: System.IO.Stream
      description: A stream containing content of the resource.
    content.vb: Sub PutContent(path As String, contentStream As Stream)
  overload: Octopus.Client.IOctopusClient.PutContent*
- uid: Octopus.Client.IOctopusClient.QualifyUri(System.String,System.Object)
  commentId: M:Octopus.Client.IOctopusClient.QualifyUri(System.String,System.Object)
  id: QualifyUri(System.String,System.Object)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: QualifyUri(String, Object)
  nameWithType: IOctopusClient.QualifyUri(String, Object)
  fullName: Octopus.Client.IOctopusClient.QualifyUri(System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: QualifyUri
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 339
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: Uri QualifyUri(string path, object parameters = null)
    parameters:
    - id: path
      type: System.String
    - id: parameters
      type: System.Object
    return:
      type: System.Uri
    content.vb: Function QualifyUri(path As String, parameters As Object = Nothing) As Uri
  overload: Octopus.Client.IOctopusClient.QualifyUri*
- uid: Octopus.Client.IOctopusClient.SignIn(Octopus.Client.Model.LoginCommand)
  commentId: M:Octopus.Client.IOctopusClient.SignIn(Octopus.Client.Model.LoginCommand)
  id: SignIn(Octopus.Client.Model.LoginCommand)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: SignIn(LoginCommand)
  nameWithType: IOctopusClient.SignIn(LoginCommand)
  fullName: Octopus.Client.IOctopusClient.SignIn(Octopus.Client.Model.LoginCommand)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SignIn
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 345
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSign in\n"
  example: []
  syntax:
    content: void SignIn(LoginCommand loginCommand)
    parameters:
    - id: loginCommand
      type: Octopus.Client.Model.LoginCommand
      description: ''
    content.vb: Sub SignIn(loginCommand As LoginCommand)
  overload: Octopus.Client.IOctopusClient.SignIn*
- uid: Octopus.Client.IOctopusClient.SignOut
  commentId: M:Octopus.Client.IOctopusClient.SignOut
  id: SignOut
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: SignOut()
  nameWithType: IOctopusClient.SignOut()
  fullName: Octopus.Client.IOctopusClient.SignOut()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SignOut
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 350
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSign out\n"
  example: []
  syntax:
    content: void SignOut()
    content.vb: Sub SignOut
  overload: Octopus.Client.IOctopusClient.SignOut*
- uid: Octopus.Client.IOctopusClient.ForSpace(Octopus.Client.Model.SpaceResource)
  commentId: M:Octopus.Client.IOctopusClient.ForSpace(Octopus.Client.Model.SpaceResource)
  id: ForSpace(Octopus.Client.Model.SpaceResource)
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: ForSpace(SpaceResource)
  nameWithType: IOctopusClient.ForSpace(SpaceResource)
  fullName: Octopus.Client.IOctopusClient.ForSpace(Octopus.Client.Model.SpaceResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ForSpace
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 351
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: IOctopusSpaceRepository ForSpace(SpaceResource space)
    parameters:
    - id: space
      type: Octopus.Client.Model.SpaceResource
    return:
      type: Octopus.Client.IOctopusSpaceRepository
    content.vb: Function ForSpace(space As SpaceResource) As IOctopusSpaceRepository
  overload: Octopus.Client.IOctopusClient.ForSpace*
- uid: Octopus.Client.IOctopusClient.ForSystem
  commentId: M:Octopus.Client.IOctopusClient.ForSystem
  id: ForSystem
  parent: Octopus.Client.IOctopusClient
  langs:
  - csharp
  - vb
  name: ForSystem()
  nameWithType: IOctopusClient.ForSystem()
  fullName: Octopus.Client.IOctopusClient.ForSystem()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusClient.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ForSystem
    path: ../source/Octopus.Client/IOctopusClient.cs
    startLine: 352
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: IOctopusSystemRepository ForSystem()
    return:
      type: Octopus.Client.IOctopusSystemRepository
    content.vb: Function ForSystem As IOctopusSystemRepository
  overload: Octopus.Client.IOctopusClient.ForSystem*
references:
- uid: Octopus.Client
  commentId: N:Octopus.Client
  name: Octopus.Client
  nameWithType: Octopus.Client
  fullName: Octopus.Client
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Octopus.Client.IOctopusClient.Repository*
  commentId: Overload:Octopus.Client.IOctopusClient.Repository
  name: Repository
  nameWithType: IOctopusClient.Repository
  fullName: Octopus.Client.IOctopusClient.Repository
- uid: Octopus.Client.IOctopusRepository
  commentId: T:Octopus.Client.IOctopusRepository
  parent: Octopus.Client
  name: IOctopusRepository
  nameWithType: IOctopusRepository
  fullName: Octopus.Client.IOctopusRepository
- uid: Octopus.Client.IOctopusClient.IsUsingSecureConnection*
  commentId: Overload:Octopus.Client.IOctopusClient.IsUsingSecureConnection
  name: IsUsingSecureConnection
  nameWithType: IOctopusClient.IsUsingSecureConnection
  fullName: Octopus.Client.IOctopusClient.IsUsingSecureConnection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Action{Octopus.Client.OctopusRequest}
  commentId: T:System.Action{Octopus.Client.OctopusRequest}
  parent: System
  definition: System.Action`1
  name: Action<OctopusRequest>
  nameWithType: Action<OctopusRequest>
  fullName: System.Action<Octopus.Client.OctopusRequest>
  nameWithType.vb: Action(Of OctopusRequest)
  fullName.vb: System.Action(Of Octopus.Client.OctopusRequest)
  name.vb: Action(Of OctopusRequest)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.OctopusRequest
    name: OctopusRequest
    nameWithType: OctopusRequest
    fullName: Octopus.Client.OctopusRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.OctopusRequest
    name: OctopusRequest
    nameWithType: OctopusRequest
    fullName: Octopus.Client.OctopusRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Octopus.Client.OctopusResponse}
  commentId: T:System.Action{Octopus.Client.OctopusResponse}
  parent: System
  definition: System.Action`1
  name: Action<OctopusResponse>
  nameWithType: Action<OctopusResponse>
  fullName: System.Action<Octopus.Client.OctopusResponse>
  nameWithType.vb: Action(Of OctopusResponse)
  fullName.vb: System.Action(Of Octopus.Client.OctopusResponse)
  name.vb: Action(Of OctopusResponse)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.OctopusResponse
    name: OctopusResponse
    nameWithType: OctopusResponse
    fullName: Octopus.Client.OctopusResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.OctopusResponse
    name: OctopusResponse
    nameWithType: OctopusResponse
    fullName: Octopus.Client.OctopusResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model.Resource.Links
  commentId: P:Octopus.Client.Model.Resource.Links
  parent: Octopus.Client.Model.Resource
  name: Links
  nameWithType: Resource.Links
  fullName: Octopus.Client.Model.Resource.Links
- uid: Octopus.Client.Exceptions.OctopusSecurityException
  commentId: T:Octopus.Client.Exceptions.OctopusSecurityException
  name: OctopusSecurityException
  nameWithType: OctopusSecurityException
  fullName: Octopus.Client.Exceptions.OctopusSecurityException
- uid: Octopus.Client.Exceptions.OctopusServerException
  commentId: T:Octopus.Client.Exceptions.OctopusServerException
  name: OctopusServerException
  nameWithType: OctopusServerException
  fullName: Octopus.Client.Exceptions.OctopusServerException
- uid: Octopus.Client.Exceptions.OctopusValidationException
  commentId: T:Octopus.Client.Exceptions.OctopusValidationException
  name: OctopusValidationException
  nameWithType: OctopusValidationException
  fullName: Octopus.Client.Exceptions.OctopusValidationException
- uid: Octopus.Client.Exceptions.OctopusResourceNotFoundException
  commentId: T:Octopus.Client.Exceptions.OctopusResourceNotFoundException
  name: OctopusResourceNotFoundException
  nameWithType: OctopusResourceNotFoundException
  fullName: Octopus.Client.Exceptions.OctopusResourceNotFoundException
- uid: Octopus.Client.IOctopusClient.List*
  commentId: Overload:Octopus.Client.IOctopusClient.List
  name: List
  nameWithType: IOctopusClient.List
  fullName: Octopus.Client.IOctopusClient.List
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Octopus.Client.Model.ResourceCollection{{TResource}}
  commentId: T:Octopus.Client.Model.ResourceCollection{``0}
  parent: Octopus.Client.Model
  definition: Octopus.Client.Model.ResourceCollection`1
  name: ResourceCollection<TResource>
  nameWithType: ResourceCollection<TResource>
  fullName: Octopus.Client.Model.ResourceCollection<TResource>
  nameWithType.vb: ResourceCollection(Of TResource)
  fullName.vb: Octopus.Client.Model.ResourceCollection(Of TResource)
  name.vb: ResourceCollection(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model.Resource
  commentId: T:Octopus.Client.Model.Resource
  parent: Octopus.Client.Model
  name: Resource
  nameWithType: Resource
  fullName: Octopus.Client.Model.Resource
- uid: Octopus.Client.Model.ResourceCollection`1
  commentId: T:Octopus.Client.Model.ResourceCollection`1
  name: ResourceCollection<TResource>
  nameWithType: ResourceCollection<TResource>
  fullName: Octopus.Client.Model.ResourceCollection<TResource>
  nameWithType.vb: ResourceCollection(Of TResource)
  fullName.vb: Octopus.Client.Model.ResourceCollection(Of TResource)
  name.vb: ResourceCollection(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model
  commentId: N:Octopus.Client.Model
  name: Octopus.Client.Model
  nameWithType: Octopus.Client.Model
  fullName: Octopus.Client.Model
- uid: Octopus.Client.IOctopusClient.ListAll*
  commentId: Overload:Octopus.Client.IOctopusClient.ListAll
  name: ListAll
  nameWithType: IOctopusClient.ListAll
  fullName: Octopus.Client.IOctopusClient.ListAll
- uid: System.Collections.Generic.IReadOnlyList{{TResource}}
  commentId: T:System.Collections.Generic.IReadOnlyList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<TResource>
  nameWithType: IReadOnlyList<TResource>
  fullName: System.Collections.Generic.IReadOnlyList<TResource>
  nameWithType.vb: IReadOnlyList(Of TResource)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of TResource)
  name.vb: IReadOnlyList(Of TResource)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Octopus.Client.IOctopusClient.Paginate*
  commentId: Overload:Octopus.Client.IOctopusClient.Paginate
  name: Paginate
  nameWithType: IOctopusClient.Paginate
  fullName: Octopus.Client.IOctopusClient.Paginate
- uid: System.Func{Octopus.Client.Model.ResourceCollection{{TResource}},System.Boolean}
  commentId: T:System.Func{Octopus.Client.Model.ResourceCollection{``0},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<ResourceCollection<TResource>, Boolean>
  nameWithType: Func<ResourceCollection<TResource>, Boolean>
  fullName: System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>
  nameWithType.vb: Func(Of ResourceCollection(Of TResource), Boolean)
  fullName.vb: System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean)
  name.vb: Func(Of ResourceCollection(Of TResource), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.IOctopusClient.Get*
  commentId: Overload:Octopus.Client.IOctopusClient.Get
  name: Get
  nameWithType: IOctopusClient.Get
  fullName: Octopus.Client.IOctopusClient.Get
- uid: '{TResource}'
  commentId: '!:TResource'
  definition: TResource
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: TResource
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: Octopus.Client.IOctopusClient.Create*
  commentId: Overload:Octopus.Client.IOctopusClient.Create
  name: Create
  nameWithType: IOctopusClient.Create
  fullName: Octopus.Client.IOctopusClient.Create
- uid: Octopus.Client.IOctopusClient.Post*
  commentId: Overload:Octopus.Client.IOctopusClient.Post
  name: Post
  nameWithType: IOctopusClient.Post
  fullName: Octopus.Client.IOctopusClient.Post
- uid: '{TResponse}'
  commentId: '!:TResponse'
  definition: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Octopus.Client.IOctopusClient.Put*
  commentId: Overload:Octopus.Client.IOctopusClient.Put
  name: Put
  nameWithType: IOctopusClient.Put
  fullName: Octopus.Client.IOctopusClient.Put
- uid: Octopus.Client.IOctopusClient.Update*
  commentId: Overload:Octopus.Client.IOctopusClient.Update
  name: Update
  nameWithType: IOctopusClient.Update
  fullName: Octopus.Client.IOctopusClient.Update
- uid: Octopus.Client.IOctopusClient.Delete*
  commentId: Overload:Octopus.Client.IOctopusClient.Delete
  name: Delete
  nameWithType: IOctopusClient.Delete
  fullName: Octopus.Client.IOctopusClient.Delete
- uid: Octopus.Client.IOctopusClient.GetContent*
  commentId: Overload:Octopus.Client.IOctopusClient.GetContent
  name: GetContent
  nameWithType: IOctopusClient.GetContent
  fullName: Octopus.Client.IOctopusClient.GetContent
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Octopus.Client.IOctopusClient.PutContent*
  commentId: Overload:Octopus.Client.IOctopusClient.PutContent
  name: PutContent
  nameWithType: IOctopusClient.PutContent
  fullName: Octopus.Client.IOctopusClient.PutContent
- uid: Octopus.Client.IOctopusClient.QualifyUri*
  commentId: Overload:Octopus.Client.IOctopusClient.QualifyUri
  name: QualifyUri
  nameWithType: IOctopusClient.QualifyUri
  fullName: Octopus.Client.IOctopusClient.QualifyUri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Octopus.Client.IOctopusClient.SignIn*
  commentId: Overload:Octopus.Client.IOctopusClient.SignIn
  name: SignIn
  nameWithType: IOctopusClient.SignIn
  fullName: Octopus.Client.IOctopusClient.SignIn
- uid: Octopus.Client.Model.LoginCommand
  commentId: T:Octopus.Client.Model.LoginCommand
  parent: Octopus.Client.Model
  name: LoginCommand
  nameWithType: LoginCommand
  fullName: Octopus.Client.Model.LoginCommand
- uid: Octopus.Client.IOctopusClient.SignOut*
  commentId: Overload:Octopus.Client.IOctopusClient.SignOut
  name: SignOut
  nameWithType: IOctopusClient.SignOut
  fullName: Octopus.Client.IOctopusClient.SignOut
- uid: Octopus.Client.IOctopusClient.ForSpace*
  commentId: Overload:Octopus.Client.IOctopusClient.ForSpace
  name: ForSpace
  nameWithType: IOctopusClient.ForSpace
  fullName: Octopus.Client.IOctopusClient.ForSpace
- uid: Octopus.Client.Model.SpaceResource
  commentId: T:Octopus.Client.Model.SpaceResource
  parent: Octopus.Client.Model
  name: SpaceResource
  nameWithType: SpaceResource
  fullName: Octopus.Client.Model.SpaceResource
- uid: Octopus.Client.IOctopusSpaceRepository
  commentId: T:Octopus.Client.IOctopusSpaceRepository
  parent: Octopus.Client
  name: IOctopusSpaceRepository
  nameWithType: IOctopusSpaceRepository
  fullName: Octopus.Client.IOctopusSpaceRepository
- uid: Octopus.Client.IOctopusClient.ForSystem*
  commentId: Overload:Octopus.Client.IOctopusClient.ForSystem
  name: ForSystem
  nameWithType: IOctopusClient.ForSystem
  fullName: Octopus.Client.IOctopusClient.ForSystem
- uid: Octopus.Client.IOctopusSystemRepository
  commentId: T:Octopus.Client.IOctopusSystemRepository
  parent: Octopus.Client
  name: IOctopusSystemRepository
  nameWithType: IOctopusSystemRepository
  fullName: Octopus.Client.IOctopusSystemRepository
