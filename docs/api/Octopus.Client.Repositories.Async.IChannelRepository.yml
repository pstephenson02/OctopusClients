### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.IChannelRepository
  commentId: T:Octopus.Client.Repositories.Async.IChannelRepository
  id: IChannelRepository
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify(Octopus.Client.Model.ProjectResource,System.String)
  - Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify(Octopus.Client.Model.ProjectResource,System.String,System.String)
  - Octopus.Client.Repositories.Async.IChannelRepository.FindByName(Octopus.Client.Model.ProjectResource,System.String)
  - Octopus.Client.Repositories.Async.IChannelRepository.GetAllReleases(Octopus.Client.Model.ChannelResource)
  - Octopus.Client.Repositories.Async.IChannelRepository.GetReleaseByVersion(Octopus.Client.Model.ChannelResource,System.String)
  - Octopus.Client.Repositories.Async.IChannelRepository.GetReleases(Octopus.Client.Model.ChannelResource,System.Int32,System.Nullable{System.Int32},System.String)
  langs:
  - csharp
  - vb
  name: IChannelRepository
  nameWithType: IChannelRepository
  fullName: Octopus.Client.Repositories.Async.IChannelRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ChannelRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IChannelRepository
    path: ../source/Octopus.Client/Repositories/Async/ChannelRepository.cs
    startLine: 7
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: 'public interface IChannelRepository : ICreate<ChannelResource>, IModify<ChannelResource>, IGet<ChannelResource>, IDelete<ChannelResource>, IPaginate<ChannelResource>'
    content.vb: >-
      Public Interface IChannelRepository
          Inherits ICreate(Of ChannelResource), IModify(Of ChannelResource), IGet(Of ChannelResource), IDelete(Of ChannelResource), IPaginate(Of ChannelResource)
  inheritedMembers:
  - Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ChannelResource}.Create(Octopus.Client.Model.ChannelResource,System.Object)
  - Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ChannelResource}.Modify(Octopus.Client.Model.ChannelResource)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Get(System.String)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Get(System.String[])
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Refresh(Octopus.Client.Model.ChannelResource)
  - Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ChannelResource}.Delete(Octopus.Client.Model.ChannelResource)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ChannelResource},System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindOne(System.Func{Octopus.Client.Model.ChannelResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindMany(System.Func{Octopus.Client.Model.ChannelResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindAll(System.String,System.Object)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.Async.IChannelRepository.FindByName(Octopus.Client.Model.ProjectResource,System.String)
  commentId: M:Octopus.Client.Repositories.Async.IChannelRepository.FindByName(Octopus.Client.Model.ProjectResource,System.String)
  id: FindByName(Octopus.Client.Model.ProjectResource,System.String)
  parent: Octopus.Client.Repositories.Async.IChannelRepository
  langs:
  - csharp
  - vb
  name: FindByName(ProjectResource, String)
  nameWithType: IChannelRepository.FindByName(ProjectResource, String)
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.FindByName(Octopus.Client.Model.ProjectResource, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ChannelRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindByName
    path: ../source/Octopus.Client/Repositories/Async/ChannelRepository.cs
    startLine: 9
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<ChannelResource> FindByName(ProjectResource project, string name)
    parameters:
    - id: project
      type: Octopus.Client.Model.ProjectResource
    - id: name
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ChannelResource}
    content.vb: Function FindByName(project As ProjectResource, name As String) As Task(Of ChannelResource)
  overload: Octopus.Client.Repositories.Async.IChannelRepository.FindByName*
- uid: Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify(Octopus.Client.Model.ProjectResource,System.String)
  commentId: M:Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify(Octopus.Client.Model.ProjectResource,System.String)
  id: CreateOrModify(Octopus.Client.Model.ProjectResource,System.String)
  parent: Octopus.Client.Repositories.Async.IChannelRepository
  langs:
  - csharp
  - vb
  name: CreateOrModify(ProjectResource, String)
  nameWithType: IChannelRepository.CreateOrModify(ProjectResource, String)
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify(Octopus.Client.Model.ProjectResource, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ChannelRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CreateOrModify
    path: ../source/Octopus.Client/Repositories/Async/ChannelRepository.cs
    startLine: 10
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<ChannelEditor> CreateOrModify(ProjectResource project, string name)
    parameters:
    - id: project
      type: Octopus.Client.Model.ProjectResource
    - id: name
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Editors.Async.ChannelEditor}
    content.vb: Function CreateOrModify(project As ProjectResource, name As String) As Task(Of ChannelEditor)
  overload: Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify*
- uid: Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify(Octopus.Client.Model.ProjectResource,System.String,System.String)
  commentId: M:Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify(Octopus.Client.Model.ProjectResource,System.String,System.String)
  id: CreateOrModify(Octopus.Client.Model.ProjectResource,System.String,System.String)
  parent: Octopus.Client.Repositories.Async.IChannelRepository
  langs:
  - csharp
  - vb
  name: CreateOrModify(ProjectResource, String, String)
  nameWithType: IChannelRepository.CreateOrModify(ProjectResource, String, String)
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify(Octopus.Client.Model.ProjectResource, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ChannelRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CreateOrModify
    path: ../source/Octopus.Client/Repositories/Async/ChannelRepository.cs
    startLine: 11
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<ChannelEditor> CreateOrModify(ProjectResource project, string name, string description)
    parameters:
    - id: project
      type: Octopus.Client.Model.ProjectResource
    - id: name
      type: System.String
    - id: description
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Editors.Async.ChannelEditor}
    content.vb: Function CreateOrModify(project As ProjectResource, name As String, description As String) As Task(Of ChannelEditor)
  overload: Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify*
- uid: Octopus.Client.Repositories.Async.IChannelRepository.GetReleases(Octopus.Client.Model.ChannelResource,System.Int32,System.Nullable{System.Int32},System.String)
  commentId: M:Octopus.Client.Repositories.Async.IChannelRepository.GetReleases(Octopus.Client.Model.ChannelResource,System.Int32,System.Nullable{System.Int32},System.String)
  id: GetReleases(Octopus.Client.Model.ChannelResource,System.Int32,System.Nullable{System.Int32},System.String)
  parent: Octopus.Client.Repositories.Async.IChannelRepository
  langs:
  - csharp
  - vb
  name: GetReleases(ChannelResource, Int32, Nullable<Int32>, String)
  nameWithType: IChannelRepository.GetReleases(ChannelResource, Int32, Nullable<Int32>, String)
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.GetReleases(Octopus.Client.Model.ChannelResource, System.Int32, System.Nullable<System.Int32>, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ChannelRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetReleases
    path: ../source/Octopus.Client/Repositories/Async/ChannelRepository.cs
    startLine: 12
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<ResourceCollection<ReleaseResource>> GetReleases(ChannelResource channel, int skip = 0, int? take = default(int? ), string searchByVersion = null)
    parameters:
    - id: channel
      type: Octopus.Client.Model.ChannelResource
    - id: skip
      type: System.Int32
    - id: take
      type: System.Nullable{System.Int32}
    - id: searchByVersion
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ReleaseResource}}
    content.vb: Function GetReleases(channel As ChannelResource, skip As Integer = 0, take As Integer? = Nothing, searchByVersion As String = Nothing) As Task(Of ResourceCollection(Of ReleaseResource))
  overload: Octopus.Client.Repositories.Async.IChannelRepository.GetReleases*
  nameWithType.vb: IChannelRepository.GetReleases(ChannelResource, Int32, Nullable(Of Int32), String)
  fullName.vb: Octopus.Client.Repositories.Async.IChannelRepository.GetReleases(Octopus.Client.Model.ChannelResource, System.Int32, System.Nullable(Of System.Int32), System.String)
  name.vb: GetReleases(ChannelResource, Int32, Nullable(Of Int32), String)
- uid: Octopus.Client.Repositories.Async.IChannelRepository.GetAllReleases(Octopus.Client.Model.ChannelResource)
  commentId: M:Octopus.Client.Repositories.Async.IChannelRepository.GetAllReleases(Octopus.Client.Model.ChannelResource)
  id: GetAllReleases(Octopus.Client.Model.ChannelResource)
  parent: Octopus.Client.Repositories.Async.IChannelRepository
  langs:
  - csharp
  - vb
  name: GetAllReleases(ChannelResource)
  nameWithType: IChannelRepository.GetAllReleases(ChannelResource)
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.GetAllReleases(Octopus.Client.Model.ChannelResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ChannelRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetAllReleases
    path: ../source/Octopus.Client/Repositories/Async/ChannelRepository.cs
    startLine: 14
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<IReadOnlyList<ReleaseResource>> GetAllReleases(ChannelResource channel)
    parameters:
    - id: channel
      type: Octopus.Client.Model.ChannelResource
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.ReleaseResource}}
    content.vb: Function GetAllReleases(channel As ChannelResource) As Task(Of IReadOnlyList(Of ReleaseResource))
  overload: Octopus.Client.Repositories.Async.IChannelRepository.GetAllReleases*
- uid: Octopus.Client.Repositories.Async.IChannelRepository.GetReleaseByVersion(Octopus.Client.Model.ChannelResource,System.String)
  commentId: M:Octopus.Client.Repositories.Async.IChannelRepository.GetReleaseByVersion(Octopus.Client.Model.ChannelResource,System.String)
  id: GetReleaseByVersion(Octopus.Client.Model.ChannelResource,System.String)
  parent: Octopus.Client.Repositories.Async.IChannelRepository
  langs:
  - csharp
  - vb
  name: GetReleaseByVersion(ChannelResource, String)
  nameWithType: IChannelRepository.GetReleaseByVersion(ChannelResource, String)
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.GetReleaseByVersion(Octopus.Client.Model.ChannelResource, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ChannelRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetReleaseByVersion
    path: ../source/Octopus.Client/Repositories/Async/ChannelRepository.cs
    startLine: 15
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<ReleaseResource> GetReleaseByVersion(ChannelResource channel, string version)
    parameters:
    - id: channel
      type: Octopus.Client.Model.ChannelResource
    - id: version
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ReleaseResource}
    content.vb: Function GetReleaseByVersion(channel As ChannelResource, version As String) As Task(Of ReleaseResource)
  overload: Octopus.Client.Repositories.Async.IChannelRepository.GetReleaseByVersion*
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ChannelResource}.Create(Octopus.Client.Model.ChannelResource,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ChannelResource}.Create(Octopus.Client.Model.ChannelResource,System.Object)
  parent: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  name: Create(ChannelResource, Object)
  nameWithType: ICreate<ChannelResource>.Create(ChannelResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.ChannelResource>.Create(Octopus.Client.Model.ChannelResource, System.Object)
  nameWithType.vb: ICreate(Of ChannelResource).Create(ChannelResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.ChannelResource).Create(Octopus.Client.Model.ChannelResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<ChannelResource>.Create
    fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.ChannelResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of ChannelResource).Create
    fullName: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.ChannelResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ChannelResource}.Modify(Octopus.Client.Model.ChannelResource)
  commentId: M:Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ChannelResource}.Modify(Octopus.Client.Model.ChannelResource)
  parent: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  name: Modify(ChannelResource)
  nameWithType: IModify<ChannelResource>.Modify(ChannelResource)
  fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.ChannelResource>.Modify(Octopus.Client.Model.ChannelResource)
  nameWithType.vb: IModify(Of ChannelResource).Modify(ChannelResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.ChannelResource).Modify(Octopus.Client.Model.ChannelResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<ChannelResource>.Modify
    fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.ChannelResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of ChannelResource).Modify
    fullName: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.ChannelResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Get(System.String)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  name: Get(String)
  nameWithType: IGet<ChannelResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ChannelResource>.Get(System.String)
  nameWithType.vb: IGet(Of ChannelResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ChannelResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<ChannelResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ChannelResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of ChannelResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ChannelResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Get(System.String[])
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  name: Get(String[])
  nameWithType: IGet<ChannelResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ChannelResource>.Get(System.String[])
  nameWithType.vb: IGet(Of ChannelResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ChannelResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<ChannelResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ChannelResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of ChannelResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ChannelResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Refresh(Octopus.Client.Model.ChannelResource)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}.Refresh(Octopus.Client.Model.ChannelResource)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(ChannelResource)
  nameWithType: IGet<ChannelResource>.Refresh(ChannelResource)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ChannelResource>.Refresh(Octopus.Client.Model.ChannelResource)
  nameWithType.vb: IGet(Of ChannelResource).Refresh(ChannelResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ChannelResource).Refresh(Octopus.Client.Model.ChannelResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<ChannelResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ChannelResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of ChannelResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ChannelResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ChannelResource}.Delete(Octopus.Client.Model.ChannelResource)
  commentId: M:Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ChannelResource}.Delete(Octopus.Client.Model.ChannelResource)
  parent: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  name: Delete(ChannelResource)
  nameWithType: IDelete<ChannelResource>.Delete(ChannelResource)
  fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.ChannelResource>.Delete(Octopus.Client.Model.ChannelResource)
  nameWithType.vb: IDelete(Of ChannelResource).Delete(ChannelResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.ChannelResource).Delete(Octopus.Client.Model.ChannelResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<ChannelResource>.Delete
    fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.ChannelResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of ChannelResource).Delete
    fullName: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.ChannelResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ChannelResource},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ChannelResource},System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  name: Paginate(Func<ResourceCollection<ChannelResource>, Boolean>, String, Object)
  nameWithType: IPaginate<ChannelResource>.Paginate(Func<ResourceCollection<ChannelResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.ChannelResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of ChannelResource).Paginate(Func(Of ResourceCollection(Of ChannelResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.ChannelResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of ChannelResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<ChannelResource>.Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of ChannelResource).Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindOne(System.Func{Octopus.Client.Model.ChannelResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindOne(System.Func{Octopus.Client.Model.ChannelResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindOne(Func<ChannelResource, Boolean>, String, Object)
  nameWithType: IPaginate<ChannelResource>.FindOne(Func<ChannelResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>.FindOne(System.Func<Octopus.Client.Model.ChannelResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of ChannelResource).FindOne(Func(Of ChannelResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource).FindOne(System.Func(Of Octopus.Client.Model.ChannelResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of ChannelResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<ChannelResource>.FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of ChannelResource).FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindMany(System.Func{Octopus.Client.Model.ChannelResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindMany(System.Func{Octopus.Client.Model.ChannelResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindMany(Func<ChannelResource, Boolean>, String, Object)
  nameWithType: IPaginate<ChannelResource>.FindMany(Func<ChannelResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>.FindMany(System.Func<Octopus.Client.Model.ChannelResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of ChannelResource).FindMany(Func(Of ChannelResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource).FindMany(System.Func(Of Octopus.Client.Model.ChannelResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of ChannelResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<ChannelResource>.FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of ChannelResource).FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}.FindAll(System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  name: FindAll(String, Object)
  nameWithType: IPaginate<ChannelResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of ChannelResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<ChannelResource>.FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of ChannelResource).FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  isExternal: true
  name: Create(TResource, Object)
  nameWithType: ICreate<TResource>.Create(TResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create(TResource, System.Object)
  nameWithType.vb: ICreate(Of TResource).Create(TResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create(TResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<TResource>.Create
    fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of TResource).Create
    fullName: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ChannelResource}
  commentId: T:Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ChannelResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.ICreate`1
  name: ICreate<ChannelResource>
  nameWithType: ICreate<ChannelResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.ChannelResource>
  nameWithType.vb: ICreate(Of ChannelResource)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.ChannelResource)
  name.vb: ICreate(Of ChannelResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  commentId: M:Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  name: Modify(TResource)
  nameWithType: IModify<TResource>.Modify(TResource)
  fullName: Octopus.Client.Repositories.Async.IModify<TResource>.Modify(TResource)
  nameWithType.vb: IModify(Of TResource).Modify(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of TResource).Modify(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<TResource>.Modify
    fullName: Octopus.Client.Repositories.Async.IModify<TResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of TResource).Modify
    fullName: Octopus.Client.Repositories.Async.IModify(Of TResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ChannelResource}
  commentId: T:Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ChannelResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IModify`1
  name: IModify<ChannelResource>
  nameWithType: IModify<ChannelResource>
  fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.ChannelResource>
  nameWithType.vb: IModify(Of ChannelResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.ChannelResource)
  name.vb: IModify(Of ChannelResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: IGet<TResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String)
  nameWithType.vb: IGet(Of TResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}
  commentId: T:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ChannelResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IGet`1
  name: IGet<ChannelResource>
  nameWithType: IGet<ChannelResource>
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ChannelResource>
  nameWithType.vb: IGet(Of ChannelResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ChannelResource)
  name.vb: IGet(Of ChannelResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  isExternal: true
  name: Get(String[])
  nameWithType: IGet<TResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(TResource)
  nameWithType: IGet<TResource>.Refresh(TResource)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh(TResource)
  nameWithType.vb: IGet(Of TResource).Refresh(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  commentId: M:Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  name: Delete(TResource)
  nameWithType: IDelete<TResource>.Delete(TResource)
  fullName: Octopus.Client.Repositories.Async.IDelete<TResource>.Delete(TResource)
  nameWithType.vb: IDelete(Of TResource).Delete(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of TResource).Delete(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<TResource>.Delete
    fullName: Octopus.Client.Repositories.Async.IDelete<TResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of TResource).Delete
    fullName: Octopus.Client.Repositories.Async.IDelete(Of TResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ChannelResource}
  commentId: T:Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ChannelResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IDelete`1
  name: IDelete<ChannelResource>
  nameWithType: IDelete<ChannelResource>
  fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.ChannelResource>
  nameWithType.vb: IDelete(Of ChannelResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.ChannelResource)
  name.vb: IDelete(Of ChannelResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  isExternal: true
  name: Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<TResource>.Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of TResource).Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}
  commentId: T:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ChannelResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IPaginate`1
  name: IPaginate<ChannelResource>
  nameWithType: IPaginate<ChannelResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ChannelResource>
  nameWithType.vb: IPaginate(Of ChannelResource)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ChannelResource)
  name.vb: IPaginate(Of ChannelResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindOne(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindOne(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindOne(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<TResource>.FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of TResource).FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindMany(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindMany(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindMany(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<TResource>.FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of TResource).FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  isExternal: true
  name: FindAll(String, Object)
  nameWithType: IPaginate<TResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<TResource>.FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of TResource).FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate`1
  commentId: T:Octopus.Client.Repositories.Async.ICreate`1
  name: ICreate<TResource>
  nameWithType: ICreate<TResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>
  nameWithType.vb: ICreate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource)
  name.vb: ICreate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify`1
  commentId: T:Octopus.Client.Repositories.Async.IModify`1
  name: IModify<TResource>
  nameWithType: IModify<TResource>
  fullName: Octopus.Client.Repositories.Async.IModify<TResource>
  nameWithType.vb: IModify(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of TResource)
  name.vb: IModify(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1
  commentId: T:Octopus.Client.Repositories.Async.IGet`1
  name: IGet<TResource>
  nameWithType: IGet<TResource>
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>
  nameWithType.vb: IGet(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource)
  name.vb: IGet(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete`1
  commentId: T:Octopus.Client.Repositories.Async.IDelete`1
  name: IDelete<TResource>
  nameWithType: IDelete<TResource>
  fullName: Octopus.Client.Repositories.Async.IDelete<TResource>
  nameWithType.vb: IDelete(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of TResource)
  name.vb: IDelete(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1
  commentId: T:Octopus.Client.Repositories.Async.IPaginate`1
  name: IPaginate<TResource>
  nameWithType: IPaginate<TResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>
  nameWithType.vb: IPaginate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource)
  name.vb: IPaginate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IChannelRepository.FindByName*
  commentId: Overload:Octopus.Client.Repositories.Async.IChannelRepository.FindByName
  name: FindByName
  nameWithType: IChannelRepository.FindByName
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.FindByName
- uid: Octopus.Client.Model.ProjectResource
  commentId: T:Octopus.Client.Model.ProjectResource
  parent: Octopus.Client.Model
  name: ProjectResource
  nameWithType: ProjectResource
  fullName: Octopus.Client.Model.ProjectResource
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.ChannelResource}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.ChannelResource}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ChannelResource>
  nameWithType: Task<ChannelResource>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.ChannelResource>
  nameWithType.vb: Task(Of ChannelResource)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.ChannelResource)
  name.vb: Task(Of ChannelResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ChannelResource
    name: ChannelResource
    nameWithType: ChannelResource
    fullName: Octopus.Client.Model.ChannelResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model
  commentId: N:Octopus.Client.Model
  name: Octopus.Client.Model
  nameWithType: Octopus.Client.Model
  fullName: Octopus.Client.Model
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify*
  commentId: Overload:Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify
  name: CreateOrModify
  nameWithType: IChannelRepository.CreateOrModify
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.CreateOrModify
- uid: System.Threading.Tasks.Task{Octopus.Client.Editors.Async.ChannelEditor}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Editors.Async.ChannelEditor}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ChannelEditor>
  nameWithType: Task<ChannelEditor>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Editors.Async.ChannelEditor>
  nameWithType.vb: Task(Of ChannelEditor)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Editors.Async.ChannelEditor)
  name.vb: Task(Of ChannelEditor)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Editors.Async.ChannelEditor
    name: ChannelEditor
    nameWithType: ChannelEditor
    fullName: Octopus.Client.Editors.Async.ChannelEditor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Editors.Async.ChannelEditor
    name: ChannelEditor
    nameWithType: ChannelEditor
    fullName: Octopus.Client.Editors.Async.ChannelEditor
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IChannelRepository.GetReleases*
  commentId: Overload:Octopus.Client.Repositories.Async.IChannelRepository.GetReleases
  name: GetReleases
  nameWithType: IChannelRepository.GetReleases
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.GetReleases
- uid: Octopus.Client.Model.ChannelResource
  commentId: T:Octopus.Client.Model.ChannelResource
  parent: Octopus.Client.Model
  name: ChannelResource
  nameWithType: ChannelResource
  fullName: Octopus.Client.Model.ChannelResource
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ReleaseResource}}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ReleaseResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResourceCollection<ReleaseResource>>
  nameWithType: Task<ResourceCollection<ReleaseResource>>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.ReleaseResource>>
  nameWithType.vb: Task(Of ResourceCollection(Of ReleaseResource))
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.ReleaseResource))
  name.vb: Task(Of ResourceCollection(Of ReleaseResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ReleaseResource
    name: ReleaseResource
    nameWithType: ReleaseResource
    fullName: Octopus.Client.Model.ReleaseResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ReleaseResource
    name: ReleaseResource
    nameWithType: ReleaseResource
    fullName: Octopus.Client.Model.ReleaseResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IChannelRepository.GetAllReleases*
  commentId: Overload:Octopus.Client.Repositories.Async.IChannelRepository.GetAllReleases
  name: GetAllReleases
  nameWithType: IChannelRepository.GetAllReleases
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.GetAllReleases
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.ReleaseResource}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Octopus.Client.Model.ReleaseResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyList<ReleaseResource>>
  nameWithType: Task<IReadOnlyList<ReleaseResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Octopus.Client.Model.ReleaseResource>>
  nameWithType.vb: Task(Of IReadOnlyList(Of ReleaseResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of Octopus.Client.Model.ReleaseResource))
  name.vb: Task(Of IReadOnlyList(Of ReleaseResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ReleaseResource
    name: ReleaseResource
    nameWithType: ReleaseResource
    fullName: Octopus.Client.Model.ReleaseResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ReleaseResource
    name: ReleaseResource
    nameWithType: ReleaseResource
    fullName: Octopus.Client.Model.ReleaseResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IChannelRepository.GetReleaseByVersion*
  commentId: Overload:Octopus.Client.Repositories.Async.IChannelRepository.GetReleaseByVersion
  name: GetReleaseByVersion
  nameWithType: IChannelRepository.GetReleaseByVersion
  fullName: Octopus.Client.Repositories.Async.IChannelRepository.GetReleaseByVersion
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.ReleaseResource}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.ReleaseResource}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ReleaseResource>
  nameWithType: Task<ReleaseResource>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.ReleaseResource>
  nameWithType.vb: Task(Of ReleaseResource)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.ReleaseResource)
  name.vb: Task(Of ReleaseResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ReleaseResource
    name: ReleaseResource
    nameWithType: ReleaseResource
    fullName: Octopus.Client.Model.ReleaseResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ReleaseResource
    name: ReleaseResource
    nameWithType: ReleaseResource
    fullName: Octopus.Client.Model.ReleaseResource
  - name: )
    nameWithType: )
    fullName: )
