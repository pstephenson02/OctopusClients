### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.ICertificateRepository
  commentId: T:Octopus.Client.Repositories.ICertificateRepository
  id: ICertificateRepository
  parent: Octopus.Client.Repositories
  children:
  - Octopus.Client.Repositories.ICertificateRepository.Archive(Octopus.Client.Model.CertificateResource)
  - Octopus.Client.Repositories.ICertificateRepository.Export(Octopus.Client.Model.CertificateResource,System.Nullable{Octopus.Client.Model.CertificateFormat},System.String,System.Boolean)
  - Octopus.Client.Repositories.ICertificateRepository.ExportAsPem(Octopus.Client.Model.CertificateResource,System.Boolean,Octopus.Client.Model.CertificateExportPemOptions)
  - Octopus.Client.Repositories.ICertificateRepository.GetOctopusCertificate
  - Octopus.Client.Repositories.ICertificateRepository.Replace(Octopus.Client.Model.CertificateResource,System.String,System.String)
  - Octopus.Client.Repositories.ICertificateRepository.UnArchive(Octopus.Client.Model.CertificateResource)
  langs:
  - csharp
  - vb
  name: ICertificateRepository
  nameWithType: ICertificateRepository
  fullName: Octopus.Client.Repositories.ICertificateRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/CertificateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ICertificateRepository
    path: ../source/Octopus.Client/Repositories/CertificateRepository.cs
    startLine: 6
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: 'public interface ICertificateRepository : IResourceRepository, IGet<CertificateResource>, IFindByName<CertificateResource>, IPaginate<CertificateResource>, ICreate<CertificateResource>, IModify<CertificateResource>, IDelete<CertificateResource>'
    content.vb: >-
      Public Interface ICertificateRepository
          Inherits IResourceRepository, IGet(Of CertificateResource), IFindByName(Of CertificateResource), ICreate(Of CertificateResource), IModify(Of CertificateResource), IDelete(Of CertificateResource)
  inheritedMembers:
  - Octopus.Client.Repositories.IResourceRepository.Client
  - Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Get(System.String)
  - Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Get(System.String[])
  - Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Refresh(Octopus.Client.Model.CertificateResource)
  - Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}.FindByName(System.String,System.String,System.Object)
  - Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  - Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.CertificateResource},System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindOne(System.Func{Octopus.Client.Model.CertificateResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindMany(System.Func{Octopus.Client.Model.CertificateResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindAll(System.String,System.Object)
  - Octopus.Client.Repositories.ICreate{Octopus.Client.Model.CertificateResource}.Create(Octopus.Client.Model.CertificateResource,System.Object)
  - Octopus.Client.Repositories.IModify{Octopus.Client.Model.CertificateResource}.Modify(Octopus.Client.Model.CertificateResource)
  - Octopus.Client.Repositories.IDelete{Octopus.Client.Model.CertificateResource}.Delete(Octopus.Client.Model.CertificateResource)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.ICertificateRepository.Export(Octopus.Client.Model.CertificateResource,System.Nullable{Octopus.Client.Model.CertificateFormat},System.String,System.Boolean)
  commentId: M:Octopus.Client.Repositories.ICertificateRepository.Export(Octopus.Client.Model.CertificateResource,System.Nullable{Octopus.Client.Model.CertificateFormat},System.String,System.Boolean)
  id: Export(Octopus.Client.Model.CertificateResource,System.Nullable{Octopus.Client.Model.CertificateFormat},System.String,System.Boolean)
  parent: Octopus.Client.Repositories.ICertificateRepository
  langs:
  - csharp
  - vb
  name: Export(CertificateResource, Nullable<CertificateFormat>, String, Boolean)
  nameWithType: ICertificateRepository.Export(CertificateResource, Nullable<CertificateFormat>, String, Boolean)
  fullName: Octopus.Client.Repositories.ICertificateRepository.Export(Octopus.Client.Model.CertificateResource, System.Nullable<Octopus.Client.Model.CertificateFormat>, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/CertificateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Export
    path: ../source/Octopus.Client/Repositories/CertificateRepository.cs
    startLine: 16
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  summary: "\nExports the certificate data.\n"
  example: []
  syntax:
    content: Stream Export(CertificateResource certificate, CertificateFormat? format = default(CertificateFormat? ), string password = null, bool includePrivateKey = false)
    parameters:
    - id: certificate
      type: Octopus.Client.Model.CertificateResource
      description: The certificate to export.
    - id: format
      type: System.Nullable{Octopus.Client.Model.CertificateFormat}
      description: The format of the exported certificate. If null, the certificate will be exported exactly as it was originally uploaded (including with original password).
    - id: password
      type: System.String
      description: Password for the exported file.  This value is only used if exporting to PCKS#12 or PEM formats.
    - id: includePrivateKey
      type: System.Boolean
      description: Specifies whether the certificate private-key (if present) should be included in the exported file.  This value is only be used when exporting to PEM format.
    return:
      type: System.IO.Stream
      description: The exported certificate data.
    content.vb: Function Export(certificate As CertificateResource, format As CertificateFormat? = Nothing, password As String = Nothing, includePrivateKey As Boolean = False) As Stream
  overload: Octopus.Client.Repositories.ICertificateRepository.Export*
  nameWithType.vb: ICertificateRepository.Export(CertificateResource, Nullable(Of CertificateFormat), String, Boolean)
  fullName.vb: Octopus.Client.Repositories.ICertificateRepository.Export(Octopus.Client.Model.CertificateResource, System.Nullable(Of Octopus.Client.Model.CertificateFormat), System.String, System.Boolean)
  name.vb: Export(CertificateResource, Nullable(Of CertificateFormat), String, Boolean)
- uid: Octopus.Client.Repositories.ICertificateRepository.ExportAsPem(Octopus.Client.Model.CertificateResource,System.Boolean,Octopus.Client.Model.CertificateExportPemOptions)
  commentId: M:Octopus.Client.Repositories.ICertificateRepository.ExportAsPem(Octopus.Client.Model.CertificateResource,System.Boolean,Octopus.Client.Model.CertificateExportPemOptions)
  id: ExportAsPem(Octopus.Client.Model.CertificateResource,System.Boolean,Octopus.Client.Model.CertificateExportPemOptions)
  parent: Octopus.Client.Repositories.ICertificateRepository
  langs:
  - csharp
  - vb
  name: ExportAsPem(CertificateResource, Boolean, CertificateExportPemOptions)
  nameWithType: ICertificateRepository.ExportAsPem(CertificateResource, Boolean, CertificateExportPemOptions)
  fullName: Octopus.Client.Repositories.ICertificateRepository.ExportAsPem(Octopus.Client.Model.CertificateResource, System.Boolean, Octopus.Client.Model.CertificateExportPemOptions)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/CertificateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ExportAsPem
    path: ../source/Octopus.Client/Repositories/CertificateRepository.cs
    startLine: 25
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  summary: "\nExports the certificate in PEM format \n"
  example: []
  syntax:
    content: Stream ExportAsPem(CertificateResource certificate, bool includePrivateKey = false, CertificateExportPemOptions pemOptions = CertificateExportPemOptions.PrimaryOnly)
    parameters:
    - id: certificate
      type: Octopus.Client.Model.CertificateResource
      description: The certificate to export.
    - id: includePrivateKey
      type: System.Boolean
      description: Specifies whether the certificate private-key (if present) should be included in the exported file.
    - id: pemOptions
      type: Octopus.Client.Model.CertificateExportPemOptions
      description: Options specifying which certificates should be included when chain certificates are present
    return:
      type: System.IO.Stream
      description: The exported certificate in PEM format
    content.vb: Function ExportAsPem(certificate As CertificateResource, includePrivateKey As Boolean = False, pemOptions As CertificateExportPemOptions = CertificateExportPemOptions.PrimaryOnly) As Stream
  overload: Octopus.Client.Repositories.ICertificateRepository.ExportAsPem*
- uid: Octopus.Client.Repositories.ICertificateRepository.Replace(Octopus.Client.Model.CertificateResource,System.String,System.String)
  commentId: M:Octopus.Client.Repositories.ICertificateRepository.Replace(Octopus.Client.Model.CertificateResource,System.String,System.String)
  id: Replace(Octopus.Client.Model.CertificateResource,System.String,System.String)
  parent: Octopus.Client.Repositories.ICertificateRepository
  langs:
  - csharp
  - vb
  name: Replace(CertificateResource, String, String)
  nameWithType: ICertificateRepository.Replace(CertificateResource, String, String)
  fullName: Octopus.Client.Repositories.ICertificateRepository.Replace(Octopus.Client.Model.CertificateResource, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/CertificateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Replace
    path: ../source/Octopus.Client/Repositories/CertificateRepository.cs
    startLine: 36
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  summary: "\nReplace with a new certificate.  \nThe certificate is replaced &quot;in-place&quot;; it will retain the same ID and other user properties (Name, Notes, Environments, etc...).\nA backup will be made of the replaced certificate; it will have a new ID and will be archived.  \n"
  example: []
  syntax:
    content: CertificateResource Replace(CertificateResource certificate, string certificateData, string password)
    parameters:
    - id: certificate
      type: Octopus.Client.Model.CertificateResource
      description: The certificate to be replaced
    - id: certificateData
      type: System.String
      description: The new base64-encoded certificate-data
    - id: password
      type: System.String
      description: The new password
    return:
      type: Octopus.Client.Model.CertificateResource
      description: The replaced certificate. The ReplacedBy property will contain the ID of the new certificate (which will be the previous ID of the replaced certificate).
    content.vb: Function Replace(certificate As CertificateResource, certificateData As String, password As String) As CertificateResource
  overload: Octopus.Client.Repositories.ICertificateRepository.Replace*
- uid: Octopus.Client.Repositories.ICertificateRepository.Archive(Octopus.Client.Model.CertificateResource)
  commentId: M:Octopus.Client.Repositories.ICertificateRepository.Archive(Octopus.Client.Model.CertificateResource)
  id: Archive(Octopus.Client.Model.CertificateResource)
  parent: Octopus.Client.Repositories.ICertificateRepository
  langs:
  - csharp
  - vb
  name: Archive(CertificateResource)
  nameWithType: ICertificateRepository.Archive(CertificateResource)
  fullName: Octopus.Client.Repositories.ICertificateRepository.Archive(Octopus.Client.Model.CertificateResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/CertificateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Archive
    path: ../source/Octopus.Client/Repositories/CertificateRepository.cs
    startLine: 42
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  summary: "\nArchive a certificate. \nArchiving makes a certificate unavailable for selection as the value of a variable. \n"
  example: []
  syntax:
    content: void Archive(CertificateResource certificate)
    parameters:
    - id: certificate
      type: Octopus.Client.Model.CertificateResource
    content.vb: Sub Archive(certificate As CertificateResource)
  overload: Octopus.Client.Repositories.ICertificateRepository.Archive*
- uid: Octopus.Client.Repositories.ICertificateRepository.UnArchive(Octopus.Client.Model.CertificateResource)
  commentId: M:Octopus.Client.Repositories.ICertificateRepository.UnArchive(Octopus.Client.Model.CertificateResource)
  id: UnArchive(Octopus.Client.Model.CertificateResource)
  parent: Octopus.Client.Repositories.ICertificateRepository
  langs:
  - csharp
  - vb
  name: UnArchive(CertificateResource)
  nameWithType: ICertificateRepository.UnArchive(CertificateResource)
  fullName: Octopus.Client.Repositories.ICertificateRepository.UnArchive(Octopus.Client.Model.CertificateResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/CertificateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: UnArchive
    path: ../source/Octopus.Client/Repositories/CertificateRepository.cs
    startLine: 47
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  summary: "\nUnarchive a certificate. This makes the certificate again available for selection as the value of a variable.\n"
  example: []
  syntax:
    content: void UnArchive(CertificateResource certificate)
    parameters:
    - id: certificate
      type: Octopus.Client.Model.CertificateResource
    content.vb: Sub UnArchive(certificate As CertificateResource)
  overload: Octopus.Client.Repositories.ICertificateRepository.UnArchive*
- uid: Octopus.Client.Repositories.ICertificateRepository.GetOctopusCertificate
  commentId: M:Octopus.Client.Repositories.ICertificateRepository.GetOctopusCertificate
  id: GetOctopusCertificate
  parent: Octopus.Client.Repositories.ICertificateRepository
  langs:
  - csharp
  - vb
  name: GetOctopusCertificate()
  nameWithType: ICertificateRepository.GetOctopusCertificate()
  fullName: Octopus.Client.Repositories.ICertificateRepository.GetOctopusCertificate()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/CertificateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetOctopusCertificate
    path: ../source/Octopus.Client/Repositories/CertificateRepository.cs
    startLine: 55
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  summary: "\nReturns details of the certificate used by Octopus for communications.\n"
  example: []
  syntax:
    content: CertificateConfigurationResource GetOctopusCertificate()
    return:
      type: Octopus.Client.Model.CertificateConfigurationResource
    content.vb: Function GetOctopusCertificate As CertificateConfigurationResource
  overload: Octopus.Client.Repositories.ICertificateRepository.GetOctopusCertificate*
references:
- uid: Octopus.Client.Repositories
  commentId: N:Octopus.Client.Repositories
  name: Octopus.Client.Repositories
  nameWithType: Octopus.Client.Repositories
  fullName: Octopus.Client.Repositories
- uid: Octopus.Client.Repositories.IResourceRepository.Client
  commentId: P:Octopus.Client.Repositories.IResourceRepository.Client
  parent: Octopus.Client.Repositories.IResourceRepository
  name: Client
  nameWithType: IResourceRepository.Client
  fullName: Octopus.Client.Repositories.IResourceRepository.Client
- uid: Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Get(System.String)
  commentId: M:Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Get(System.String)
  parent: Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IGet`1.Get(System.String)
  name: Get(String)
  nameWithType: IGet<CertificateResource>.Get(String)
  fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.CertificateResource>.Get(System.String)
  nameWithType.vb: IGet(Of CertificateResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.CertificateResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<CertificateResource>.Get
    fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.CertificateResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of CertificateResource).Get
    fullName: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.CertificateResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Get(System.String[])
  parent: Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IGet`1.Get(System.String[])
  name: Get(String[])
  nameWithType: IGet<CertificateResource>.Get(String[])
  fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.CertificateResource>.Get(System.String[])
  nameWithType.vb: IGet(Of CertificateResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.CertificateResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<CertificateResource>.Get
    fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.CertificateResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of CertificateResource).Get
    fullName: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.CertificateResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Refresh(Octopus.Client.Model.CertificateResource)
  commentId: M:Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}.Refresh(Octopus.Client.Model.CertificateResource)
  parent: Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IGet`1.Refresh(`0)
  name: Refresh(CertificateResource)
  nameWithType: IGet<CertificateResource>.Refresh(CertificateResource)
  fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.CertificateResource>.Refresh(Octopus.Client.Model.CertificateResource)
  nameWithType.vb: IGet(Of CertificateResource).Refresh(CertificateResource)
  fullName.vb: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.CertificateResource).Refresh(Octopus.Client.Model.CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<CertificateResource>.Refresh
    fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.CertificateResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of CertificateResource).Refresh
    fullName: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.CertificateResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}.FindByName(System.String,System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}.FindByName(System.String,System.String,System.Object)
  parent: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
  name: FindByName(String, String, Object)
  nameWithType: IFindByName<CertificateResource>.FindByName(String, String, Object)
  fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.CertificateResource>.FindByName(System.String, System.String, System.Object)
  nameWithType.vb: IFindByName(Of CertificateResource).FindByName(String, String, Object)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.CertificateResource).FindByName(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName<CertificateResource>.FindByName
    fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.CertificateResource>.FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName(Of CertificateResource).FindByName
    fullName: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.CertificateResource).FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  parent: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  name: FindByNames(IEnumerable<String>, String, Object)
  nameWithType: IFindByName<CertificateResource>.FindByNames(IEnumerable<String>, String, Object)
  fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.CertificateResource>.FindByNames(System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object)
  nameWithType.vb: IFindByName(Of CertificateResource).FindByNames(IEnumerable(Of String), String, Object)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.CertificateResource).FindByNames(System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object)
  name.vb: FindByNames(IEnumerable(Of String), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName<CertificateResource>.FindByNames
    fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.CertificateResource>.FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName(Of CertificateResource).FindByNames
    fullName: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.CertificateResource).FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.CertificateResource},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.CertificateResource},System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  name: Paginate(Func<ResourceCollection<CertificateResource>, Boolean>, String, Object)
  nameWithType: IPaginate<CertificateResource>.Paginate(Func<ResourceCollection<CertificateResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.CertificateResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of CertificateResource).Paginate(Func(Of ResourceCollection(Of CertificateResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.CertificateResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of CertificateResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<CertificateResource>.Paginate
    fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of CertificateResource).Paginate
    fullName: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindOne(System.Func{Octopus.Client.Model.CertificateResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindOne(System.Func{Octopus.Client.Model.CertificateResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindOne(Func<CertificateResource, Boolean>, String, Object)
  nameWithType: IPaginate<CertificateResource>.FindOne(Func<CertificateResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>.FindOne(System.Func<Octopus.Client.Model.CertificateResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of CertificateResource).FindOne(Func(Of CertificateResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource).FindOne(System.Func(Of Octopus.Client.Model.CertificateResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of CertificateResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<CertificateResource>.FindOne
    fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of CertificateResource).FindOne
    fullName: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindMany(System.Func{Octopus.Client.Model.CertificateResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindMany(System.Func{Octopus.Client.Model.CertificateResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindMany(Func<CertificateResource, Boolean>, String, Object)
  nameWithType: IPaginate<CertificateResource>.FindMany(Func<CertificateResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>.FindMany(System.Func<Octopus.Client.Model.CertificateResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of CertificateResource).FindMany(Func(Of CertificateResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource).FindMany(System.Func(Of Octopus.Client.Model.CertificateResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of CertificateResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<CertificateResource>.FindMany
    fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of CertificateResource).FindMany
    fullName: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}.FindAll(System.String,System.Object)
  parent: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
  name: FindAll(String, Object)
  nameWithType: IPaginate<CertificateResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of CertificateResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<CertificateResource>.FindAll
    fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of CertificateResource).FindAll
    fullName: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ICreate{Octopus.Client.Model.CertificateResource}.Create(Octopus.Client.Model.CertificateResource,System.Object)
  commentId: M:Octopus.Client.Repositories.ICreate{Octopus.Client.Model.CertificateResource}.Create(Octopus.Client.Model.CertificateResource,System.Object)
  parent: Octopus.Client.Repositories.ICreate{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  name: Create(CertificateResource, Object)
  nameWithType: ICreate<CertificateResource>.Create(CertificateResource, Object)
  fullName: Octopus.Client.Repositories.ICreate<Octopus.Client.Model.CertificateResource>.Create(Octopus.Client.Model.CertificateResource, System.Object)
  nameWithType.vb: ICreate(Of CertificateResource).Create(CertificateResource, Object)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of Octopus.Client.Model.CertificateResource).Create(Octopus.Client.Model.CertificateResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<CertificateResource>.Create
    fullName: Octopus.Client.Repositories.ICreate<Octopus.Client.Model.CertificateResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of CertificateResource).Create
    fullName: Octopus.Client.Repositories.ICreate(Of Octopus.Client.Model.CertificateResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IModify{Octopus.Client.Model.CertificateResource}.Modify(Octopus.Client.Model.CertificateResource)
  commentId: M:Octopus.Client.Repositories.IModify{Octopus.Client.Model.CertificateResource}.Modify(Octopus.Client.Model.CertificateResource)
  parent: Octopus.Client.Repositories.IModify{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IModify`1.Modify(`0)
  name: Modify(CertificateResource)
  nameWithType: IModify<CertificateResource>.Modify(CertificateResource)
  fullName: Octopus.Client.Repositories.IModify<Octopus.Client.Model.CertificateResource>.Modify(Octopus.Client.Model.CertificateResource)
  nameWithType.vb: IModify(Of CertificateResource).Modify(CertificateResource)
  fullName.vb: Octopus.Client.Repositories.IModify(Of Octopus.Client.Model.CertificateResource).Modify(Octopus.Client.Model.CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<CertificateResource>.Modify
    fullName: Octopus.Client.Repositories.IModify<Octopus.Client.Model.CertificateResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of CertificateResource).Modify
    fullName: Octopus.Client.Repositories.IModify(Of Octopus.Client.Model.CertificateResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IDelete{Octopus.Client.Model.CertificateResource}.Delete(Octopus.Client.Model.CertificateResource)
  commentId: M:Octopus.Client.Repositories.IDelete{Octopus.Client.Model.CertificateResource}.Delete(Octopus.Client.Model.CertificateResource)
  parent: Octopus.Client.Repositories.IDelete{Octopus.Client.Model.CertificateResource}
  definition: Octopus.Client.Repositories.IDelete`1.Delete(`0)
  name: Delete(CertificateResource)
  nameWithType: IDelete<CertificateResource>.Delete(CertificateResource)
  fullName: Octopus.Client.Repositories.IDelete<Octopus.Client.Model.CertificateResource>.Delete(Octopus.Client.Model.CertificateResource)
  nameWithType.vb: IDelete(Of CertificateResource).Delete(CertificateResource)
  fullName.vb: Octopus.Client.Repositories.IDelete(Of Octopus.Client.Model.CertificateResource).Delete(Octopus.Client.Model.CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<CertificateResource>.Delete
    fullName: Octopus.Client.Repositories.IDelete<Octopus.Client.Model.CertificateResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of CertificateResource).Delete
    fullName: Octopus.Client.Repositories.IDelete(Of Octopus.Client.Model.CertificateResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IResourceRepository
  commentId: T:Octopus.Client.Repositories.IResourceRepository
  parent: Octopus.Client.Repositories
  name: IResourceRepository
  nameWithType: IResourceRepository
  fullName: Octopus.Client.Repositories.IResourceRepository
- uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
  commentId: M:Octopus.Client.Repositories.IGet`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: IGet<TResource>.Get(String)
  fullName: Octopus.Client.Repositories.IGet<TResource>.Get(System.String)
  nameWithType.vb: IGet(Of TResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.IGet(Of TResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}
  commentId: T:Octopus.Client.Repositories.IGet{Octopus.Client.Model.CertificateResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IGet`1
  name: IGet<CertificateResource>
  nameWithType: IGet<CertificateResource>
  fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.CertificateResource>
  nameWithType.vb: IGet(Of CertificateResource)
  fullName.vb: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.CertificateResource)
  name.vb: IGet(Of CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.IGet
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.IGet`1.Get(System.String[])
  isExternal: true
  name: Get(String[])
  nameWithType: IGet<TResource>.Get(String[])
  fullName: Octopus.Client.Repositories.IGet<TResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.IGet(Of TResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
  commentId: M:Octopus.Client.Repositories.IGet`1.Refresh(`0)
  name: Refresh(TResource)
  nameWithType: IGet<TResource>.Refresh(TResource)
  fullName: Octopus.Client.Repositories.IGet<TResource>.Refresh(TResource)
  nameWithType.vb: IGet(Of TResource).Refresh(TResource)
  fullName.vb: Octopus.Client.Repositories.IGet(Of TResource).Refresh(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TResource>.Refresh
    fullName: Octopus.Client.Repositories.IGet<TResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TResource).Refresh
    fullName: Octopus.Client.Repositories.IGet(Of TResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
  isExternal: true
  name: FindByName(String, String, Object)
  nameWithType: IFindByName<TResource>.FindByName(String, String, Object)
  fullName: Octopus.Client.Repositories.IFindByName<TResource>.FindByName(System.String, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TResource).FindByName(String, String, Object)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of TResource).FindByName(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName<TResource>.FindByName
    fullName: Octopus.Client.Repositories.IFindByName<TResource>.FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName(Of TResource).FindByName
    fullName: Octopus.Client.Repositories.IFindByName(Of TResource).FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}
  commentId: T:Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.CertificateResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IFindByName`1
  name: IFindByName<CertificateResource>
  nameWithType: IFindByName<CertificateResource>
  fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.CertificateResource>
  nameWithType.vb: IFindByName(Of CertificateResource)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.CertificateResource)
  name.vb: IFindByName(Of CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.IFindByName
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.IFindByName
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  isExternal: true
  name: FindByNames(IEnumerable<String>, String, Object)
  nameWithType: IFindByName<TResource>.FindByNames(IEnumerable<String>, String, Object)
  fullName: Octopus.Client.Repositories.IFindByName<TResource>.FindByNames(System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TResource).FindByNames(IEnumerable(Of String), String, Object)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of TResource).FindByNames(System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object)
  name.vb: FindByNames(IEnumerable(Of String), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName<TResource>.FindByNames
    fullName: Octopus.Client.Repositories.IFindByName<TResource>.FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName(Of TResource).FindByNames
    fullName: Octopus.Client.Repositories.IFindByName(Of TResource).FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  isExternal: true
  name: Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<TResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<TResource>.Paginate
    fullName: Octopus.Client.Repositories.IPaginate<TResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of TResource).Paginate
    fullName: Octopus.Client.Repositories.IPaginate(Of TResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}
  commentId: T:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.CertificateResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IPaginate`1
  name: IPaginate<CertificateResource>
  nameWithType: IPaginate<CertificateResource>
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.CertificateResource>
  nameWithType.vb: IPaginate(Of CertificateResource)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.CertificateResource)
  name.vb: IPaginate(Of CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindOne(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindOne(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindOne(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindOne(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource).FindOne(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<TResource>.FindOne
    fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of TResource).FindOne
    fullName: Octopus.Client.Repositories.IPaginate(Of TResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindMany(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindMany(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindMany(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindMany(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource).FindMany(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<TResource>.FindMany
    fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of TResource).FindMany
    fullName: Octopus.Client.Repositories.IPaginate(Of TResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
  isExternal: true
  name: FindAll(String, Object)
  nameWithType: IPaginate<TResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<TResource>.FindAll
    fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of TResource).FindAll
    fullName: Octopus.Client.Repositories.IPaginate(Of TResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  commentId: M:Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  isExternal: true
  name: Create(TResource, Object)
  nameWithType: ICreate<TResource>.Create(TResource, Object)
  fullName: Octopus.Client.Repositories.ICreate<TResource>.Create(TResource, System.Object)
  nameWithType.vb: ICreate(Of TResource).Create(TResource, Object)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of TResource).Create(TResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<TResource>.Create
    fullName: Octopus.Client.Repositories.ICreate<TResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of TResource).Create
    fullName: Octopus.Client.Repositories.ICreate(Of TResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ICreate{Octopus.Client.Model.CertificateResource}
  commentId: T:Octopus.Client.Repositories.ICreate{Octopus.Client.Model.CertificateResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.ICreate`1
  name: ICreate<CertificateResource>
  nameWithType: ICreate<CertificateResource>
  fullName: Octopus.Client.Repositories.ICreate<Octopus.Client.Model.CertificateResource>
  nameWithType.vb: ICreate(Of CertificateResource)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of Octopus.Client.Model.CertificateResource)
  name.vb: ICreate(Of CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
  commentId: M:Octopus.Client.Repositories.IModify`1.Modify(`0)
  name: Modify(TResource)
  nameWithType: IModify<TResource>.Modify(TResource)
  fullName: Octopus.Client.Repositories.IModify<TResource>.Modify(TResource)
  nameWithType.vb: IModify(Of TResource).Modify(TResource)
  fullName.vb: Octopus.Client.Repositories.IModify(Of TResource).Modify(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<TResource>.Modify
    fullName: Octopus.Client.Repositories.IModify<TResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of TResource).Modify
    fullName: Octopus.Client.Repositories.IModify(Of TResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IModify{Octopus.Client.Model.CertificateResource}
  commentId: T:Octopus.Client.Repositories.IModify{Octopus.Client.Model.CertificateResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IModify`1
  name: IModify<CertificateResource>
  nameWithType: IModify<CertificateResource>
  fullName: Octopus.Client.Repositories.IModify<Octopus.Client.Model.CertificateResource>
  nameWithType.vb: IModify(Of CertificateResource)
  fullName.vb: Octopus.Client.Repositories.IModify(Of Octopus.Client.Model.CertificateResource)
  name.vb: IModify(Of CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.IModify
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
  commentId: M:Octopus.Client.Repositories.IDelete`1.Delete(`0)
  name: Delete(TResource)
  nameWithType: IDelete<TResource>.Delete(TResource)
  fullName: Octopus.Client.Repositories.IDelete<TResource>.Delete(TResource)
  nameWithType.vb: IDelete(Of TResource).Delete(TResource)
  fullName.vb: Octopus.Client.Repositories.IDelete(Of TResource).Delete(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<TResource>.Delete
    fullName: Octopus.Client.Repositories.IDelete<TResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of TResource).Delete
    fullName: Octopus.Client.Repositories.IDelete(Of TResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IDelete{Octopus.Client.Model.CertificateResource}
  commentId: T:Octopus.Client.Repositories.IDelete{Octopus.Client.Model.CertificateResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IDelete`1
  name: IDelete<CertificateResource>
  nameWithType: IDelete<CertificateResource>
  fullName: Octopus.Client.Repositories.IDelete<Octopus.Client.Model.CertificateResource>
  nameWithType.vb: IDelete(Of CertificateResource)
  fullName.vb: Octopus.Client.Repositories.IDelete(Of Octopus.Client.Model.CertificateResource)
  name.vb: IDelete(Of CertificateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateResource
    name: CertificateResource
    nameWithType: CertificateResource
    fullName: Octopus.Client.Model.CertificateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet`1
  commentId: T:Octopus.Client.Repositories.IGet`1
  name: IGet<TResource>
  nameWithType: IGet<TResource>
  fullName: Octopus.Client.Repositories.IGet<TResource>
  nameWithType.vb: IGet(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IGet(Of TResource)
  name.vb: IGet(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.IGet
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName`1
  commentId: T:Octopus.Client.Repositories.IFindByName`1
  name: IFindByName<TResource>
  nameWithType: IFindByName<TResource>
  fullName: Octopus.Client.Repositories.IFindByName<TResource>
  nameWithType.vb: IFindByName(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of TResource)
  name.vb: IFindByName(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.IFindByName
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.IFindByName
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1
  commentId: T:Octopus.Client.Repositories.IPaginate`1
  name: IPaginate<TResource>
  nameWithType: IPaginate<TResource>
  fullName: Octopus.Client.Repositories.IPaginate<TResource>
  nameWithType.vb: IPaginate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource)
  name.vb: IPaginate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ICreate`1
  commentId: T:Octopus.Client.Repositories.ICreate`1
  name: ICreate<TResource>
  nameWithType: ICreate<TResource>
  fullName: Octopus.Client.Repositories.ICreate<TResource>
  nameWithType.vb: ICreate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of TResource)
  name.vb: ICreate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IModify`1
  commentId: T:Octopus.Client.Repositories.IModify`1
  name: IModify<TResource>
  nameWithType: IModify<TResource>
  fullName: Octopus.Client.Repositories.IModify<TResource>
  nameWithType.vb: IModify(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IModify(Of TResource)
  name.vb: IModify(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.IModify
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IDelete`1
  commentId: T:Octopus.Client.Repositories.IDelete`1
  name: IDelete<TResource>
  nameWithType: IDelete<TResource>
  fullName: Octopus.Client.Repositories.IDelete<TResource>
  nameWithType.vb: IDelete(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IDelete(Of TResource)
  name.vb: IDelete(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ICertificateRepository.Export*
  commentId: Overload:Octopus.Client.Repositories.ICertificateRepository.Export
  name: Export
  nameWithType: ICertificateRepository.Export
  fullName: Octopus.Client.Repositories.ICertificateRepository.Export
- uid: Octopus.Client.Model.CertificateResource
  commentId: T:Octopus.Client.Model.CertificateResource
  parent: Octopus.Client.Model
  name: CertificateResource
  nameWithType: CertificateResource
  fullName: Octopus.Client.Model.CertificateResource
- uid: System.Nullable{Octopus.Client.Model.CertificateFormat}
  commentId: T:System.Nullable{Octopus.Client.Model.CertificateFormat}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CertificateFormat>
  nameWithType: Nullable<CertificateFormat>
  fullName: System.Nullable<Octopus.Client.Model.CertificateFormat>
  nameWithType.vb: Nullable(Of CertificateFormat)
  fullName.vb: System.Nullable(Of Octopus.Client.Model.CertificateFormat)
  name.vb: Nullable(Of CertificateFormat)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.CertificateFormat
    name: CertificateFormat
    nameWithType: CertificateFormat
    fullName: Octopus.Client.Model.CertificateFormat
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.CertificateFormat
    name: CertificateFormat
    nameWithType: CertificateFormat
    fullName: Octopus.Client.Model.CertificateFormat
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Octopus.Client.Model
  commentId: N:Octopus.Client.Model
  name: Octopus.Client.Model
  nameWithType: Octopus.Client.Model
  fullName: Octopus.Client.Model
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Octopus.Client.Repositories.ICertificateRepository.ExportAsPem*
  commentId: Overload:Octopus.Client.Repositories.ICertificateRepository.ExportAsPem
  name: ExportAsPem
  nameWithType: ICertificateRepository.ExportAsPem
  fullName: Octopus.Client.Repositories.ICertificateRepository.ExportAsPem
- uid: Octopus.Client.Model.CertificateExportPemOptions
  commentId: T:Octopus.Client.Model.CertificateExportPemOptions
  parent: Octopus.Client.Model
  name: CertificateExportPemOptions
  nameWithType: CertificateExportPemOptions
  fullName: Octopus.Client.Model.CertificateExportPemOptions
- uid: Octopus.Client.Repositories.ICertificateRepository.Replace*
  commentId: Overload:Octopus.Client.Repositories.ICertificateRepository.Replace
  name: Replace
  nameWithType: ICertificateRepository.Replace
  fullName: Octopus.Client.Repositories.ICertificateRepository.Replace
- uid: Octopus.Client.Repositories.ICertificateRepository.Archive*
  commentId: Overload:Octopus.Client.Repositories.ICertificateRepository.Archive
  name: Archive
  nameWithType: ICertificateRepository.Archive
  fullName: Octopus.Client.Repositories.ICertificateRepository.Archive
- uid: Octopus.Client.Repositories.ICertificateRepository.UnArchive*
  commentId: Overload:Octopus.Client.Repositories.ICertificateRepository.UnArchive
  name: UnArchive
  nameWithType: ICertificateRepository.UnArchive
  fullName: Octopus.Client.Repositories.ICertificateRepository.UnArchive
- uid: Octopus.Client.Repositories.ICertificateRepository.GetOctopusCertificate*
  commentId: Overload:Octopus.Client.Repositories.ICertificateRepository.GetOctopusCertificate
  name: GetOctopusCertificate
  nameWithType: ICertificateRepository.GetOctopusCertificate
  fullName: Octopus.Client.Repositories.ICertificateRepository.GetOctopusCertificate
- uid: Octopus.Client.Model.CertificateConfigurationResource
  commentId: T:Octopus.Client.Model.CertificateConfigurationResource
  parent: Octopus.Client.Model
  name: CertificateConfigurationResource
  nameWithType: CertificateConfigurationResource
  fullName: Octopus.Client.Model.CertificateConfigurationResource
