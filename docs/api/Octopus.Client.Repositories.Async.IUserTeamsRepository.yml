### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.IUserTeamsRepository
  commentId: T:Octopus.Client.Repositories.Async.IUserTeamsRepository
  id: IUserTeamsRepository
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.IUserTeamsRepository.Get(Octopus.Client.Model.UserResource)
  langs:
  - csharp
  - vb
  name: IUserTeamsRepository
  nameWithType: IUserTeamsRepository
  fullName: Octopus.Client.Repositories.Async.IUserTeamsRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserTeamsRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IUserTeamsRepository
    path: ../source/Octopus.Client/Repositories/Async/UserTeamsRepository.cs
    startLine: 6
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: 'public interface IUserTeamsRepository : ICanExtendSpaceContext<IUserTeamsRepository>'
    content.vb: >-
      Public Interface IUserTeamsRepository
          Inherits ICanExtendSpaceContext(Of IUserTeamsRepository)
  inheritedMembers:
  - Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IUserTeamsRepository}.UsingContext(Octopus.Client.SpaceContext)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.Async.IUserTeamsRepository.Get(Octopus.Client.Model.UserResource)
  commentId: M:Octopus.Client.Repositories.Async.IUserTeamsRepository.Get(Octopus.Client.Model.UserResource)
  id: Get(Octopus.Client.Model.UserResource)
  parent: Octopus.Client.Repositories.Async.IUserTeamsRepository
  langs:
  - csharp
  - vb
  name: Get(UserResource)
  nameWithType: IUserTeamsRepository.Get(UserResource)
  fullName: Octopus.Client.Repositories.Async.IUserTeamsRepository.Get(Octopus.Client.Model.UserResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/UserTeamsRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Get
    path: ../source/Octopus.Client/Repositories/Async/UserTeamsRepository.cs
    startLine: 8
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<TeamNameResource[]> Get(UserResource user)
    parameters:
    - id: user
      type: Octopus.Client.Model.UserResource
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.TeamNameResource[]}
    content.vb: Function Get(user As UserResource) As Task(Of TeamNameResource())
  overload: Octopus.Client.Repositories.Async.IUserTeamsRepository.Get*
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IUserTeamsRepository}.UsingContext(Octopus.Client.SpaceContext)
  commentId: M:Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IUserTeamsRepository}.UsingContext(Octopus.Client.SpaceContext)
  parent: Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IUserTeamsRepository}
  definition: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
  name: UsingContext(SpaceContext)
  nameWithType: ICanExtendSpaceContext<IUserTeamsRepository>.UsingContext(SpaceContext)
  fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<Octopus.Client.Repositories.Async.IUserTeamsRepository>.UsingContext(Octopus.Client.SpaceContext)
  nameWithType.vb: ICanExtendSpaceContext(Of IUserTeamsRepository).UsingContext(SpaceContext)
  fullName.vb: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of Octopus.Client.Repositories.Async.IUserTeamsRepository).UsingContext(Octopus.Client.SpaceContext)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
    name: UsingContext
    nameWithType: ICanExtendSpaceContext<IUserTeamsRepository>.UsingContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<Octopus.Client.Repositories.Async.IUserTeamsRepository>.UsingContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.SpaceContext
    name: SpaceContext
    nameWithType: SpaceContext
    fullName: Octopus.Client.SpaceContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
    name: UsingContext
    nameWithType: ICanExtendSpaceContext(Of IUserTeamsRepository).UsingContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of Octopus.Client.Repositories.Async.IUserTeamsRepository).UsingContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.SpaceContext
    name: SpaceContext
    nameWithType: SpaceContext
    fullName: Octopus.Client.SpaceContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
  commentId: M:Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
  name: UsingContext(SpaceContext)
  nameWithType: ICanExtendSpaceContext<T>.UsingContext(SpaceContext)
  fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<T>.UsingContext(Octopus.Client.SpaceContext)
  nameWithType.vb: ICanExtendSpaceContext(Of T).UsingContext(SpaceContext)
  fullName.vb: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of T).UsingContext(Octopus.Client.SpaceContext)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
    name: UsingContext
    nameWithType: ICanExtendSpaceContext<T>.UsingContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<T>.UsingContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.SpaceContext
    name: SpaceContext
    nameWithType: SpaceContext
    fullName: Octopus.Client.SpaceContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1.UsingContext(Octopus.Client.SpaceContext)
    name: UsingContext
    nameWithType: ICanExtendSpaceContext(Of T).UsingContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of T).UsingContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.SpaceContext
    name: SpaceContext
    nameWithType: SpaceContext
    fullName: Octopus.Client.SpaceContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IUserTeamsRepository}
  commentId: T:Octopus.Client.Repositories.Async.ICanExtendSpaceContext{Octopus.Client.Repositories.Async.IUserTeamsRepository}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
  name: ICanExtendSpaceContext<IUserTeamsRepository>
  nameWithType: ICanExtendSpaceContext<IUserTeamsRepository>
  fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<Octopus.Client.Repositories.Async.IUserTeamsRepository>
  nameWithType.vb: ICanExtendSpaceContext(Of IUserTeamsRepository)
  fullName.vb: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of Octopus.Client.Repositories.Async.IUserTeamsRepository)
  name.vb: ICanExtendSpaceContext(Of IUserTeamsRepository)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
    name: ICanExtendSpaceContext
    nameWithType: ICanExtendSpaceContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Repositories.Async.IUserTeamsRepository
    name: IUserTeamsRepository
    nameWithType: IUserTeamsRepository
    fullName: Octopus.Client.Repositories.Async.IUserTeamsRepository
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
    name: ICanExtendSpaceContext
    nameWithType: ICanExtendSpaceContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Repositories.Async.IUserTeamsRepository
    name: IUserTeamsRepository
    nameWithType: IUserTeamsRepository
    fullName: Octopus.Client.Repositories.Async.IUserTeamsRepository
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
  commentId: T:Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
  name: ICanExtendSpaceContext<T>
  nameWithType: ICanExtendSpaceContext<T>
  fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext<T>
  nameWithType.vb: ICanExtendSpaceContext(Of T)
  fullName.vb: Octopus.Client.Repositories.Async.ICanExtendSpaceContext(Of T)
  name.vb: ICanExtendSpaceContext(Of T)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
    name: ICanExtendSpaceContext
    nameWithType: ICanExtendSpaceContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICanExtendSpaceContext`1
    name: ICanExtendSpaceContext
    nameWithType: ICanExtendSpaceContext
    fullName: Octopus.Client.Repositories.Async.ICanExtendSpaceContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IUserTeamsRepository.Get*
  commentId: Overload:Octopus.Client.Repositories.Async.IUserTeamsRepository.Get
  name: Get
  nameWithType: IUserTeamsRepository.Get
  fullName: Octopus.Client.Repositories.Async.IUserTeamsRepository.Get
- uid: Octopus.Client.Model.UserResource
  commentId: T:Octopus.Client.Model.UserResource
  parent: Octopus.Client.Model
  name: UserResource
  nameWithType: UserResource
  fullName: Octopus.Client.Model.UserResource
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.TeamNameResource[]}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.TeamNameResource[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TeamNameResource[]>
  nameWithType: Task<TeamNameResource[]>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.TeamNameResource[]>
  nameWithType.vb: Task(Of TeamNameResource())
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.TeamNameResource())
  name.vb: Task(Of TeamNameResource())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TeamNameResource
    name: TeamNameResource
    nameWithType: TeamNameResource
    fullName: Octopus.Client.Model.TeamNameResource
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TeamNameResource
    name: TeamNameResource
    nameWithType: TeamNameResource
    fullName: Octopus.Client.Model.TeamNameResource
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model
  commentId: N:Octopus.Client.Model
  name: Octopus.Client.Model
  nameWithType: Octopus.Client.Model
  fullName: Octopus.Client.Model
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
