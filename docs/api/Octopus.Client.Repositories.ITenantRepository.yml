### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.ITenantRepository
  commentId: T:Octopus.Client.Repositories.ITenantRepository
  id: ITenantRepository
  parent: Octopus.Client.Repositories
  children:
  - Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String)
  - Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String,System.String)
  - Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String,System.String,System.String)
  - Octopus.Client.Repositories.ITenantRepository.FindAll(System.String,System.String[],System.Int32)
  - Octopus.Client.Repositories.ITenantRepository.GetMissingVariables(System.String,System.String,System.String)
  - Octopus.Client.Repositories.ITenantRepository.GetVariables(Octopus.Client.Model.TenantResource)
  - Octopus.Client.Repositories.ITenantRepository.ModifyVariables(Octopus.Client.Model.TenantResource,Octopus.Client.Model.TenantVariableResource)
  - Octopus.Client.Repositories.ITenantRepository.SetLogo(Octopus.Client.Model.TenantResource,System.String,System.IO.Stream)
  - Octopus.Client.Repositories.ITenantRepository.Status
  langs:
  - csharp
  - vb
  name: ITenantRepository
  nameWithType: ITenantRepository
  fullName: Octopus.Client.Repositories.ITenantRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ITenantRepository
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 8
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: 'public interface ITenantRepository : ICreate<TenantResource>, IModify<TenantResource>, IGet<TenantResource>, IDelete<TenantResource>, IFindByName<TenantResource>, IPaginate<TenantResource>, IGetAll<TenantResource>'
    content.vb: >-
      Public Interface ITenantRepository
          Inherits ICreate(Of TenantResource), IModify(Of TenantResource), IGet(Of TenantResource), IDelete(Of TenantResource), IFindByName(Of TenantResource), IGetAll(Of TenantResource)
  inheritedMembers:
  - Octopus.Client.Repositories.ICreate{Octopus.Client.Model.TenantResource}.Create(Octopus.Client.Model.TenantResource,System.Object)
  - Octopus.Client.Repositories.IModify{Octopus.Client.Model.TenantResource}.Modify(Octopus.Client.Model.TenantResource)
  - Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Get(System.String)
  - Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Get(System.String[])
  - Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Refresh(Octopus.Client.Model.TenantResource)
  - Octopus.Client.Repositories.IDelete{Octopus.Client.Model.TenantResource}.Delete(Octopus.Client.Model.TenantResource)
  - Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}.FindByName(System.String,System.String,System.Object)
  - Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  - Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.TenantResource},System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindOne(System.Func{Octopus.Client.Model.TenantResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindMany(System.Func{Octopus.Client.Model.TenantResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindAll(System.String,System.Object)
  - Octopus.Client.Repositories.IGetAll{Octopus.Client.Model.TenantResource}.GetAll
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.ITenantRepository.Status
  commentId: M:Octopus.Client.Repositories.ITenantRepository.Status
  id: Status
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: Status()
  nameWithType: ITenantRepository.Status()
  fullName: Octopus.Client.Repositories.ITenantRepository.Status()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Status
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 10
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: MultiTenancyStatusResource Status()
    return:
      type: Octopus.Client.Model.MultiTenancyStatusResource
    content.vb: Function Status As MultiTenancyStatusResource
  overload: Octopus.Client.Repositories.ITenantRepository.Status*
- uid: Octopus.Client.Repositories.ITenantRepository.SetLogo(Octopus.Client.Model.TenantResource,System.String,System.IO.Stream)
  commentId: M:Octopus.Client.Repositories.ITenantRepository.SetLogo(Octopus.Client.Model.TenantResource,System.String,System.IO.Stream)
  id: SetLogo(Octopus.Client.Model.TenantResource,System.String,System.IO.Stream)
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: SetLogo(TenantResource, String, Stream)
  nameWithType: ITenantRepository.SetLogo(TenantResource, String, Stream)
  fullName: Octopus.Client.Repositories.ITenantRepository.SetLogo(Octopus.Client.Model.TenantResource, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SetLogo
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 11
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: void SetLogo(TenantResource tenant, string fileName, Stream contents)
    parameters:
    - id: tenant
      type: Octopus.Client.Model.TenantResource
    - id: fileName
      type: System.String
    - id: contents
      type: System.IO.Stream
    content.vb: Sub SetLogo(tenant As TenantResource, fileName As String, contents As Stream)
  overload: Octopus.Client.Repositories.ITenantRepository.SetLogo*
- uid: Octopus.Client.Repositories.ITenantRepository.GetVariables(Octopus.Client.Model.TenantResource)
  commentId: M:Octopus.Client.Repositories.ITenantRepository.GetVariables(Octopus.Client.Model.TenantResource)
  id: GetVariables(Octopus.Client.Model.TenantResource)
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: GetVariables(TenantResource)
  nameWithType: ITenantRepository.GetVariables(TenantResource)
  fullName: Octopus.Client.Repositories.ITenantRepository.GetVariables(Octopus.Client.Model.TenantResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetVariables
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 12
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: TenantVariableResource GetVariables(TenantResource tenant)
    parameters:
    - id: tenant
      type: Octopus.Client.Model.TenantResource
    return:
      type: Octopus.Client.Model.TenantVariableResource
    content.vb: Function GetVariables(tenant As TenantResource) As TenantVariableResource
  overload: Octopus.Client.Repositories.ITenantRepository.GetVariables*
- uid: Octopus.Client.Repositories.ITenantRepository.ModifyVariables(Octopus.Client.Model.TenantResource,Octopus.Client.Model.TenantVariableResource)
  commentId: M:Octopus.Client.Repositories.ITenantRepository.ModifyVariables(Octopus.Client.Model.TenantResource,Octopus.Client.Model.TenantVariableResource)
  id: ModifyVariables(Octopus.Client.Model.TenantResource,Octopus.Client.Model.TenantVariableResource)
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: ModifyVariables(TenantResource, TenantVariableResource)
  nameWithType: ITenantRepository.ModifyVariables(TenantResource, TenantVariableResource)
  fullName: Octopus.Client.Repositories.ITenantRepository.ModifyVariables(Octopus.Client.Model.TenantResource, Octopus.Client.Model.TenantVariableResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ModifyVariables
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 13
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: TenantVariableResource ModifyVariables(TenantResource tenant, TenantVariableResource variables)
    parameters:
    - id: tenant
      type: Octopus.Client.Model.TenantResource
    - id: variables
      type: Octopus.Client.Model.TenantVariableResource
    return:
      type: Octopus.Client.Model.TenantVariableResource
    content.vb: Function ModifyVariables(tenant As TenantResource, variables As TenantVariableResource) As TenantVariableResource
  overload: Octopus.Client.Repositories.ITenantRepository.ModifyVariables*
- uid: Octopus.Client.Repositories.ITenantRepository.GetMissingVariables(System.String,System.String,System.String)
  commentId: M:Octopus.Client.Repositories.ITenantRepository.GetMissingVariables(System.String,System.String,System.String)
  id: GetMissingVariables(System.String,System.String,System.String)
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: GetMissingVariables(String, String, String)
  nameWithType: ITenantRepository.GetMissingVariables(String, String, String)
  fullName: Octopus.Client.Repositories.ITenantRepository.GetMissingVariables(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetMissingVariables
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 14
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: List<TenantsMissingVariablesResource> GetMissingVariables(string tenantId = null, string projectId = null, string environmentId = null)
    parameters:
    - id: tenantId
      type: System.String
    - id: projectId
      type: System.String
    - id: environmentId
      type: System.String
    return:
      type: System.Collections.Generic.List{Octopus.Client.Model.TenantsMissingVariablesResource}
    content.vb: Function GetMissingVariables(tenantId As String = Nothing, projectId As String = Nothing, environmentId As String = Nothing) As List(Of TenantsMissingVariablesResource)
  overload: Octopus.Client.Repositories.ITenantRepository.GetMissingVariables*
- uid: Octopus.Client.Repositories.ITenantRepository.FindAll(System.String,System.String[],System.Int32)
  commentId: M:Octopus.Client.Repositories.ITenantRepository.FindAll(System.String,System.String[],System.Int32)
  id: FindAll(System.String,System.String[],System.Int32)
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: FindAll(String, String[], Int32)
  nameWithType: ITenantRepository.FindAll(String, String[], Int32)
  fullName: Octopus.Client.Repositories.ITenantRepository.FindAll(System.String, System.String[], System.Int32)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FindAll
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 15
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: List<TenantResource> FindAll(string name, string[] tags = null, int pageSize = 2147483647)
    parameters:
    - id: name
      type: System.String
    - id: tags
      type: System.String[]
    - id: pageSize
      type: System.Int32
    return:
      type: System.Collections.Generic.List{Octopus.Client.Model.TenantResource}
    content.vb: Function FindAll(name As String, tags As String() = Nothing, pageSize As Integer = 2147483647) As List(Of TenantResource)
  overload: Octopus.Client.Repositories.ITenantRepository.FindAll*
  nameWithType.vb: ITenantRepository.FindAll(String, String(), Int32)
  fullName.vb: Octopus.Client.Repositories.ITenantRepository.FindAll(System.String, System.String(), System.Int32)
  name.vb: FindAll(String, String(), Int32)
- uid: Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String)
  commentId: M:Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String)
  id: CreateOrModify(System.String)
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: CreateOrModify(String)
  nameWithType: ITenantRepository.CreateOrModify(String)
  fullName: Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CreateOrModify
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 16
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: TenantEditor CreateOrModify(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: Octopus.Client.Editors.TenantEditor
    content.vb: Function CreateOrModify(name As String) As TenantEditor
  overload: Octopus.Client.Repositories.ITenantRepository.CreateOrModify*
- uid: Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String,System.String)
  commentId: M:Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String,System.String)
  id: CreateOrModify(System.String,System.String)
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: CreateOrModify(String, String)
  nameWithType: ITenantRepository.CreateOrModify(String, String)
  fullName: Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CreateOrModify
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 17
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: TenantEditor CreateOrModify(string name, string description)
    parameters:
    - id: name
      type: System.String
    - id: description
      type: System.String
    return:
      type: Octopus.Client.Editors.TenantEditor
    content.vb: Function CreateOrModify(name As String, description As String) As TenantEditor
  overload: Octopus.Client.Repositories.ITenantRepository.CreateOrModify*
- uid: Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String,System.String,System.String)
  commentId: M:Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String,System.String,System.String)
  id: CreateOrModify(System.String,System.String,System.String)
  parent: Octopus.Client.Repositories.ITenantRepository
  langs:
  - csharp
  - vb
  name: CreateOrModify(String, String, String)
  nameWithType: ITenantRepository.CreateOrModify(String, String, String)
  fullName: Octopus.Client.Repositories.ITenantRepository.CreateOrModify(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/TenantRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CreateOrModify
    path: ../source/Octopus.Client/Repositories/TenantRepository.cs
    startLine: 18
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: TenantEditor CreateOrModify(string name, string description, string cloneId)
    parameters:
    - id: name
      type: System.String
    - id: description
      type: System.String
    - id: cloneId
      type: System.String
    return:
      type: Octopus.Client.Editors.TenantEditor
    content.vb: Function CreateOrModify(name As String, description As String, cloneId As String) As TenantEditor
  overload: Octopus.Client.Repositories.ITenantRepository.CreateOrModify*
references:
- uid: Octopus.Client.Repositories
  commentId: N:Octopus.Client.Repositories
  name: Octopus.Client.Repositories
  nameWithType: Octopus.Client.Repositories
  fullName: Octopus.Client.Repositories
- uid: Octopus.Client.Repositories.ICreate{Octopus.Client.Model.TenantResource}.Create(Octopus.Client.Model.TenantResource,System.Object)
  commentId: M:Octopus.Client.Repositories.ICreate{Octopus.Client.Model.TenantResource}.Create(Octopus.Client.Model.TenantResource,System.Object)
  parent: Octopus.Client.Repositories.ICreate{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  name: Create(TenantResource, Object)
  nameWithType: ICreate<TenantResource>.Create(TenantResource, Object)
  fullName: Octopus.Client.Repositories.ICreate<Octopus.Client.Model.TenantResource>.Create(Octopus.Client.Model.TenantResource, System.Object)
  nameWithType.vb: ICreate(Of TenantResource).Create(TenantResource, Object)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of Octopus.Client.Model.TenantResource).Create(Octopus.Client.Model.TenantResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<TenantResource>.Create
    fullName: Octopus.Client.Repositories.ICreate<Octopus.Client.Model.TenantResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of TenantResource).Create
    fullName: Octopus.Client.Repositories.ICreate(Of Octopus.Client.Model.TenantResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IModify{Octopus.Client.Model.TenantResource}.Modify(Octopus.Client.Model.TenantResource)
  commentId: M:Octopus.Client.Repositories.IModify{Octopus.Client.Model.TenantResource}.Modify(Octopus.Client.Model.TenantResource)
  parent: Octopus.Client.Repositories.IModify{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IModify`1.Modify(`0)
  name: Modify(TenantResource)
  nameWithType: IModify<TenantResource>.Modify(TenantResource)
  fullName: Octopus.Client.Repositories.IModify<Octopus.Client.Model.TenantResource>.Modify(Octopus.Client.Model.TenantResource)
  nameWithType.vb: IModify(Of TenantResource).Modify(TenantResource)
  fullName.vb: Octopus.Client.Repositories.IModify(Of Octopus.Client.Model.TenantResource).Modify(Octopus.Client.Model.TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<TenantResource>.Modify
    fullName: Octopus.Client.Repositories.IModify<Octopus.Client.Model.TenantResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of TenantResource).Modify
    fullName: Octopus.Client.Repositories.IModify(Of Octopus.Client.Model.TenantResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Get(System.String)
  commentId: M:Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Get(System.String)
  parent: Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IGet`1.Get(System.String)
  name: Get(String)
  nameWithType: IGet<TenantResource>.Get(String)
  fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.TenantResource>.Get(System.String)
  nameWithType.vb: IGet(Of TenantResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.TenantResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TenantResource>.Get
    fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.TenantResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TenantResource).Get
    fullName: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.TenantResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Get(System.String[])
  parent: Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IGet`1.Get(System.String[])
  name: Get(String[])
  nameWithType: IGet<TenantResource>.Get(String[])
  fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.TenantResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TenantResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.TenantResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TenantResource>.Get
    fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.TenantResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TenantResource).Get
    fullName: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.TenantResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Refresh(Octopus.Client.Model.TenantResource)
  commentId: M:Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}.Refresh(Octopus.Client.Model.TenantResource)
  parent: Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IGet`1.Refresh(`0)
  name: Refresh(TenantResource)
  nameWithType: IGet<TenantResource>.Refresh(TenantResource)
  fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.TenantResource>.Refresh(Octopus.Client.Model.TenantResource)
  nameWithType.vb: IGet(Of TenantResource).Refresh(TenantResource)
  fullName.vb: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.TenantResource).Refresh(Octopus.Client.Model.TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TenantResource>.Refresh
    fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.TenantResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TenantResource).Refresh
    fullName: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.TenantResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IDelete{Octopus.Client.Model.TenantResource}.Delete(Octopus.Client.Model.TenantResource)
  commentId: M:Octopus.Client.Repositories.IDelete{Octopus.Client.Model.TenantResource}.Delete(Octopus.Client.Model.TenantResource)
  parent: Octopus.Client.Repositories.IDelete{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IDelete`1.Delete(`0)
  name: Delete(TenantResource)
  nameWithType: IDelete<TenantResource>.Delete(TenantResource)
  fullName: Octopus.Client.Repositories.IDelete<Octopus.Client.Model.TenantResource>.Delete(Octopus.Client.Model.TenantResource)
  nameWithType.vb: IDelete(Of TenantResource).Delete(TenantResource)
  fullName.vb: Octopus.Client.Repositories.IDelete(Of Octopus.Client.Model.TenantResource).Delete(Octopus.Client.Model.TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<TenantResource>.Delete
    fullName: Octopus.Client.Repositories.IDelete<Octopus.Client.Model.TenantResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of TenantResource).Delete
    fullName: Octopus.Client.Repositories.IDelete(Of Octopus.Client.Model.TenantResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}.FindByName(System.String,System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}.FindByName(System.String,System.String,System.Object)
  parent: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
  name: FindByName(String, String, Object)
  nameWithType: IFindByName<TenantResource>.FindByName(String, String, Object)
  fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.TenantResource>.FindByName(System.String, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TenantResource).FindByName(String, String, Object)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.TenantResource).FindByName(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName<TenantResource>.FindByName
    fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.TenantResource>.FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName(Of TenantResource).FindByName
    fullName: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.TenantResource).FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  parent: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  name: FindByNames(IEnumerable<String>, String, Object)
  nameWithType: IFindByName<TenantResource>.FindByNames(IEnumerable<String>, String, Object)
  fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.TenantResource>.FindByNames(System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TenantResource).FindByNames(IEnumerable(Of String), String, Object)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.TenantResource).FindByNames(System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object)
  name.vb: FindByNames(IEnumerable(Of String), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName<TenantResource>.FindByNames
    fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.TenantResource>.FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName(Of TenantResource).FindByNames
    fullName: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.TenantResource).FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.TenantResource},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.TenantResource},System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  name: Paginate(Func<ResourceCollection<TenantResource>, Boolean>, String, Object)
  nameWithType: IPaginate<TenantResource>.Paginate(Func<ResourceCollection<TenantResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.TenantResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TenantResource).Paginate(Func(Of ResourceCollection(Of TenantResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.TenantResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of TenantResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<TenantResource>.Paginate
    fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of TenantResource).Paginate
    fullName: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindOne(System.Func{Octopus.Client.Model.TenantResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindOne(System.Func{Octopus.Client.Model.TenantResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindOne(Func<TenantResource, Boolean>, String, Object)
  nameWithType: IPaginate<TenantResource>.FindOne(Func<TenantResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>.FindOne(System.Func<Octopus.Client.Model.TenantResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TenantResource).FindOne(Func(Of TenantResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource).FindOne(System.Func(Of Octopus.Client.Model.TenantResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of TenantResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<TenantResource>.FindOne
    fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of TenantResource).FindOne
    fullName: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindMany(System.Func{Octopus.Client.Model.TenantResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindMany(System.Func{Octopus.Client.Model.TenantResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindMany(Func<TenantResource, Boolean>, String, Object)
  nameWithType: IPaginate<TenantResource>.FindMany(Func<TenantResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>.FindMany(System.Func<Octopus.Client.Model.TenantResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TenantResource).FindMany(Func(Of TenantResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource).FindMany(System.Func(Of Octopus.Client.Model.TenantResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of TenantResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<TenantResource>.FindMany
    fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of TenantResource).FindMany
    fullName: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}.FindAll(System.String,System.Object)
  parent: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
  name: FindAll(String, Object)
  nameWithType: IPaginate<TenantResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of TenantResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<TenantResource>.FindAll
    fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of TenantResource).FindAll
    fullName: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGetAll{Octopus.Client.Model.TenantResource}.GetAll
  commentId: M:Octopus.Client.Repositories.IGetAll{Octopus.Client.Model.TenantResource}.GetAll
  parent: Octopus.Client.Repositories.IGetAll{Octopus.Client.Model.TenantResource}
  definition: Octopus.Client.Repositories.IGetAll`1.GetAll
  name: GetAll()
  nameWithType: IGetAll<TenantResource>.GetAll()
  fullName: Octopus.Client.Repositories.IGetAll<Octopus.Client.Model.TenantResource>.GetAll()
  nameWithType.vb: IGetAll(Of TenantResource).GetAll()
  fullName.vb: Octopus.Client.Repositories.IGetAll(Of Octopus.Client.Model.TenantResource).GetAll()
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGetAll`1.GetAll
    name: GetAll
    nameWithType: IGetAll<TenantResource>.GetAll
    fullName: Octopus.Client.Repositories.IGetAll<Octopus.Client.Model.TenantResource>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGetAll`1.GetAll
    name: GetAll
    nameWithType: IGetAll(Of TenantResource).GetAll
    fullName: Octopus.Client.Repositories.IGetAll(Of Octopus.Client.Model.TenantResource).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  commentId: M:Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
  isExternal: true
  name: Create(TResource, Object)
  nameWithType: ICreate<TResource>.Create(TResource, Object)
  fullName: Octopus.Client.Repositories.ICreate<TResource>.Create(TResource, System.Object)
  nameWithType.vb: ICreate(Of TResource).Create(TResource, Object)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of TResource).Create(TResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<TResource>.Create
    fullName: Octopus.Client.Repositories.ICreate<TResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of TResource).Create
    fullName: Octopus.Client.Repositories.ICreate(Of TResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ICreate{Octopus.Client.Model.TenantResource}
  commentId: T:Octopus.Client.Repositories.ICreate{Octopus.Client.Model.TenantResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.ICreate`1
  name: ICreate<TenantResource>
  nameWithType: ICreate<TenantResource>
  fullName: Octopus.Client.Repositories.ICreate<Octopus.Client.Model.TenantResource>
  nameWithType.vb: ICreate(Of TenantResource)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of Octopus.Client.Model.TenantResource)
  name.vb: ICreate(Of TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
  commentId: M:Octopus.Client.Repositories.IModify`1.Modify(`0)
  name: Modify(TResource)
  nameWithType: IModify<TResource>.Modify(TResource)
  fullName: Octopus.Client.Repositories.IModify<TResource>.Modify(TResource)
  nameWithType.vb: IModify(Of TResource).Modify(TResource)
  fullName.vb: Octopus.Client.Repositories.IModify(Of TResource).Modify(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<TResource>.Modify
    fullName: Octopus.Client.Repositories.IModify<TResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of TResource).Modify
    fullName: Octopus.Client.Repositories.IModify(Of TResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IModify{Octopus.Client.Model.TenantResource}
  commentId: T:Octopus.Client.Repositories.IModify{Octopus.Client.Model.TenantResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IModify`1
  name: IModify<TenantResource>
  nameWithType: IModify<TenantResource>
  fullName: Octopus.Client.Repositories.IModify<Octopus.Client.Model.TenantResource>
  nameWithType.vb: IModify(Of TenantResource)
  fullName.vb: Octopus.Client.Repositories.IModify(Of Octopus.Client.Model.TenantResource)
  name.vb: IModify(Of TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.IModify
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
  commentId: M:Octopus.Client.Repositories.IGet`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: IGet<TResource>.Get(String)
  fullName: Octopus.Client.Repositories.IGet<TResource>.Get(System.String)
  nameWithType.vb: IGet(Of TResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.IGet(Of TResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}
  commentId: T:Octopus.Client.Repositories.IGet{Octopus.Client.Model.TenantResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IGet`1
  name: IGet<TenantResource>
  nameWithType: IGet<TenantResource>
  fullName: Octopus.Client.Repositories.IGet<Octopus.Client.Model.TenantResource>
  nameWithType.vb: IGet(Of TenantResource)
  fullName.vb: Octopus.Client.Repositories.IGet(Of Octopus.Client.Model.TenantResource)
  name.vb: IGet(Of TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.IGet
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.IGet`1.Get(System.String[])
  isExternal: true
  name: Get(String[])
  nameWithType: IGet<TResource>.Get(String[])
  fullName: Octopus.Client.Repositories.IGet<TResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.IGet(Of TResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
  commentId: M:Octopus.Client.Repositories.IGet`1.Refresh(`0)
  name: Refresh(TResource)
  nameWithType: IGet<TResource>.Refresh(TResource)
  fullName: Octopus.Client.Repositories.IGet<TResource>.Refresh(TResource)
  nameWithType.vb: IGet(Of TResource).Refresh(TResource)
  fullName.vb: Octopus.Client.Repositories.IGet(Of TResource).Refresh(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TResource>.Refresh
    fullName: Octopus.Client.Repositories.IGet<TResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TResource).Refresh
    fullName: Octopus.Client.Repositories.IGet(Of TResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
  commentId: M:Octopus.Client.Repositories.IDelete`1.Delete(`0)
  name: Delete(TResource)
  nameWithType: IDelete<TResource>.Delete(TResource)
  fullName: Octopus.Client.Repositories.IDelete<TResource>.Delete(TResource)
  nameWithType.vb: IDelete(Of TResource).Delete(TResource)
  fullName.vb: Octopus.Client.Repositories.IDelete(Of TResource).Delete(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<TResource>.Delete
    fullName: Octopus.Client.Repositories.IDelete<TResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of TResource).Delete
    fullName: Octopus.Client.Repositories.IDelete(Of TResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IDelete{Octopus.Client.Model.TenantResource}
  commentId: T:Octopus.Client.Repositories.IDelete{Octopus.Client.Model.TenantResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IDelete`1
  name: IDelete<TenantResource>
  nameWithType: IDelete<TenantResource>
  fullName: Octopus.Client.Repositories.IDelete<Octopus.Client.Model.TenantResource>
  nameWithType.vb: IDelete(Of TenantResource)
  fullName.vb: Octopus.Client.Repositories.IDelete(Of Octopus.Client.Model.TenantResource)
  name.vb: IDelete(Of TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
  isExternal: true
  name: FindByName(String, String, Object)
  nameWithType: IFindByName<TResource>.FindByName(String, String, Object)
  fullName: Octopus.Client.Repositories.IFindByName<TResource>.FindByName(System.String, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TResource).FindByName(String, String, Object)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of TResource).FindByName(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName<TResource>.FindByName
    fullName: Octopus.Client.Repositories.IFindByName<TResource>.FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName(Of TResource).FindByName
    fullName: Octopus.Client.Repositories.IFindByName(Of TResource).FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}
  commentId: T:Octopus.Client.Repositories.IFindByName{Octopus.Client.Model.TenantResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IFindByName`1
  name: IFindByName<TenantResource>
  nameWithType: IFindByName<TenantResource>
  fullName: Octopus.Client.Repositories.IFindByName<Octopus.Client.Model.TenantResource>
  nameWithType.vb: IFindByName(Of TenantResource)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of Octopus.Client.Model.TenantResource)
  name.vb: IFindByName(Of TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.IFindByName
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.IFindByName
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  isExternal: true
  name: FindByNames(IEnumerable<String>, String, Object)
  nameWithType: IFindByName<TResource>.FindByNames(IEnumerable<String>, String, Object)
  fullName: Octopus.Client.Repositories.IFindByName<TResource>.FindByNames(System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TResource).FindByNames(IEnumerable(Of String), String, Object)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of TResource).FindByNames(System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object)
  name.vb: FindByNames(IEnumerable(Of String), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName<TResource>.FindByNames
    fullName: Octopus.Client.Repositories.IFindByName<TResource>.FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName(Of TResource).FindByNames
    fullName: Octopus.Client.Repositories.IFindByName(Of TResource).FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  isExternal: true
  name: Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<TResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<TResource>.Paginate
    fullName: Octopus.Client.Repositories.IPaginate<TResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of TResource).Paginate
    fullName: Octopus.Client.Repositories.IPaginate(Of TResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}
  commentId: T:Octopus.Client.Repositories.IPaginate{Octopus.Client.Model.TenantResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IPaginate`1
  name: IPaginate<TenantResource>
  nameWithType: IPaginate<TenantResource>
  fullName: Octopus.Client.Repositories.IPaginate<Octopus.Client.Model.TenantResource>
  nameWithType.vb: IPaginate(Of TenantResource)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of Octopus.Client.Model.TenantResource)
  name.vb: IPaginate(Of TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindOne(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindOne(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindOne(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindOne(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource).FindOne(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<TResource>.FindOne
    fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of TResource).FindOne
    fullName: Octopus.Client.Repositories.IPaginate(Of TResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindMany(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindMany(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindMany(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindMany(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource).FindMany(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<TResource>.FindMany
    fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of TResource).FindMany
    fullName: Octopus.Client.Repositories.IPaginate(Of TResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
  isExternal: true
  name: FindAll(String, Object)
  nameWithType: IPaginate<TResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<TResource>.FindAll
    fullName: Octopus.Client.Repositories.IPaginate<TResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of TResource).FindAll
    fullName: Octopus.Client.Repositories.IPaginate(Of TResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGetAll`1.GetAll
  commentId: M:Octopus.Client.Repositories.IGetAll`1.GetAll
  name: GetAll()
  nameWithType: IGetAll<TResource>.GetAll()
  fullName: Octopus.Client.Repositories.IGetAll<TResource>.GetAll()
  nameWithType.vb: IGetAll(Of TResource).GetAll()
  fullName.vb: Octopus.Client.Repositories.IGetAll(Of TResource).GetAll()
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGetAll`1.GetAll
    name: GetAll
    nameWithType: IGetAll<TResource>.GetAll
    fullName: Octopus.Client.Repositories.IGetAll<TResource>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.IGetAll`1.GetAll
    name: GetAll
    nameWithType: IGetAll(Of TResource).GetAll
    fullName: Octopus.Client.Repositories.IGetAll(Of TResource).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGetAll{Octopus.Client.Model.TenantResource}
  commentId: T:Octopus.Client.Repositories.IGetAll{Octopus.Client.Model.TenantResource}
  parent: Octopus.Client.Repositories
  definition: Octopus.Client.Repositories.IGetAll`1
  name: IGetAll<TenantResource>
  nameWithType: IGetAll<TenantResource>
  fullName: Octopus.Client.Repositories.IGetAll<Octopus.Client.Model.TenantResource>
  nameWithType.vb: IGetAll(Of TenantResource)
  fullName.vb: Octopus.Client.Repositories.IGetAll(Of Octopus.Client.Model.TenantResource)
  name.vb: IGetAll(Of TenantResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGetAll`1
    name: IGetAll
    nameWithType: IGetAll
    fullName: Octopus.Client.Repositories.IGetAll
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IGetAll`1
    name: IGetAll
    nameWithType: IGetAll
    fullName: Octopus.Client.Repositories.IGetAll
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ICreate`1
  commentId: T:Octopus.Client.Repositories.ICreate`1
  name: ICreate<TResource>
  nameWithType: ICreate<TResource>
  fullName: Octopus.Client.Repositories.ICreate<TResource>
  nameWithType.vb: ICreate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.ICreate(Of TResource)
  name.vb: ICreate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IModify`1
  commentId: T:Octopus.Client.Repositories.IModify`1
  name: IModify<TResource>
  nameWithType: IModify<TResource>
  fullName: Octopus.Client.Repositories.IModify<TResource>
  nameWithType.vb: IModify(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IModify(Of TResource)
  name.vb: IModify(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.IModify
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGet`1
  commentId: T:Octopus.Client.Repositories.IGet`1
  name: IGet<TResource>
  nameWithType: IGet<TResource>
  fullName: Octopus.Client.Repositories.IGet<TResource>
  nameWithType.vb: IGet(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IGet(Of TResource)
  name.vb: IGet(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.IGet
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IDelete`1
  commentId: T:Octopus.Client.Repositories.IDelete`1
  name: IDelete<TResource>
  nameWithType: IDelete<TResource>
  fullName: Octopus.Client.Repositories.IDelete<TResource>
  nameWithType.vb: IDelete(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IDelete(Of TResource)
  name.vb: IDelete(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IFindByName`1
  commentId: T:Octopus.Client.Repositories.IFindByName`1
  name: IFindByName<TResource>
  nameWithType: IFindByName<TResource>
  fullName: Octopus.Client.Repositories.IFindByName<TResource>
  nameWithType.vb: IFindByName(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IFindByName(Of TResource)
  name.vb: IFindByName(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.IFindByName
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.IFindByName
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IPaginate`1
  commentId: T:Octopus.Client.Repositories.IPaginate`1
  name: IPaginate<TResource>
  nameWithType: IPaginate<TResource>
  fullName: Octopus.Client.Repositories.IPaginate<TResource>
  nameWithType.vb: IPaginate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IPaginate(Of TResource)
  name.vb: IPaginate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.IGetAll`1
  commentId: T:Octopus.Client.Repositories.IGetAll`1
  name: IGetAll<TResource>
  nameWithType: IGetAll<TResource>
  fullName: Octopus.Client.Repositories.IGetAll<TResource>
  nameWithType.vb: IGetAll(Of TResource)
  fullName.vb: Octopus.Client.Repositories.IGetAll(Of TResource)
  name.vb: IGetAll(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.IGetAll`1
    name: IGetAll
    nameWithType: IGetAll
    fullName: Octopus.Client.Repositories.IGetAll
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.IGetAll`1
    name: IGetAll
    nameWithType: IGetAll
    fullName: Octopus.Client.Repositories.IGetAll
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ITenantRepository.Status*
  commentId: Overload:Octopus.Client.Repositories.ITenantRepository.Status
  name: Status
  nameWithType: ITenantRepository.Status
  fullName: Octopus.Client.Repositories.ITenantRepository.Status
- uid: Octopus.Client.Model.MultiTenancyStatusResource
  commentId: T:Octopus.Client.Model.MultiTenancyStatusResource
  parent: Octopus.Client.Model
  name: MultiTenancyStatusResource
  nameWithType: MultiTenancyStatusResource
  fullName: Octopus.Client.Model.MultiTenancyStatusResource
- uid: Octopus.Client.Model
  commentId: N:Octopus.Client.Model
  name: Octopus.Client.Model
  nameWithType: Octopus.Client.Model
  fullName: Octopus.Client.Model
- uid: Octopus.Client.Repositories.ITenantRepository.SetLogo*
  commentId: Overload:Octopus.Client.Repositories.ITenantRepository.SetLogo
  name: SetLogo
  nameWithType: ITenantRepository.SetLogo
  fullName: Octopus.Client.Repositories.ITenantRepository.SetLogo
- uid: Octopus.Client.Model.TenantResource
  commentId: T:Octopus.Client.Model.TenantResource
  parent: Octopus.Client.Model
  name: TenantResource
  nameWithType: TenantResource
  fullName: Octopus.Client.Model.TenantResource
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Octopus.Client.Repositories.ITenantRepository.GetVariables*
  commentId: Overload:Octopus.Client.Repositories.ITenantRepository.GetVariables
  name: GetVariables
  nameWithType: ITenantRepository.GetVariables
  fullName: Octopus.Client.Repositories.ITenantRepository.GetVariables
- uid: Octopus.Client.Model.TenantVariableResource
  commentId: T:Octopus.Client.Model.TenantVariableResource
  parent: Octopus.Client.Model
  name: TenantVariableResource
  nameWithType: TenantVariableResource
  fullName: Octopus.Client.Model.TenantVariableResource
- uid: Octopus.Client.Repositories.ITenantRepository.ModifyVariables*
  commentId: Overload:Octopus.Client.Repositories.ITenantRepository.ModifyVariables
  name: ModifyVariables
  nameWithType: ITenantRepository.ModifyVariables
  fullName: Octopus.Client.Repositories.ITenantRepository.ModifyVariables
- uid: Octopus.Client.Repositories.ITenantRepository.GetMissingVariables*
  commentId: Overload:Octopus.Client.Repositories.ITenantRepository.GetMissingVariables
  name: GetMissingVariables
  nameWithType: ITenantRepository.GetMissingVariables
  fullName: Octopus.Client.Repositories.ITenantRepository.GetMissingVariables
- uid: System.Collections.Generic.List{Octopus.Client.Model.TenantsMissingVariablesResource}
  commentId: T:System.Collections.Generic.List{Octopus.Client.Model.TenantsMissingVariablesResource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TenantsMissingVariablesResource>
  nameWithType: List<TenantsMissingVariablesResource>
  fullName: System.Collections.Generic.List<Octopus.Client.Model.TenantsMissingVariablesResource>
  nameWithType.vb: List(Of TenantsMissingVariablesResource)
  fullName.vb: System.Collections.Generic.List(Of Octopus.Client.Model.TenantsMissingVariablesResource)
  name.vb: List(Of TenantsMissingVariablesResource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantsMissingVariablesResource
    name: TenantsMissingVariablesResource
    nameWithType: TenantsMissingVariablesResource
    fullName: Octopus.Client.Model.TenantsMissingVariablesResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantsMissingVariablesResource
    name: TenantsMissingVariablesResource
    nameWithType: TenantsMissingVariablesResource
    fullName: Octopus.Client.Model.TenantsMissingVariablesResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Octopus.Client.Repositories.ITenantRepository.FindAll*
  commentId: Overload:Octopus.Client.Repositories.ITenantRepository.FindAll
  name: FindAll
  nameWithType: ITenantRepository.FindAll
  fullName: Octopus.Client.Repositories.ITenantRepository.FindAll
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{Octopus.Client.Model.TenantResource}
  commentId: T:System.Collections.Generic.List{Octopus.Client.Model.TenantResource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TenantResource>
  nameWithType: List<TenantResource>
  fullName: System.Collections.Generic.List<Octopus.Client.Model.TenantResource>
  nameWithType.vb: List(Of TenantResource)
  fullName.vb: System.Collections.Generic.List(Of Octopus.Client.Model.TenantResource)
  name.vb: List(Of TenantResource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.TenantResource
    name: TenantResource
    nameWithType: TenantResource
    fullName: Octopus.Client.Model.TenantResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.ITenantRepository.CreateOrModify*
  commentId: Overload:Octopus.Client.Repositories.ITenantRepository.CreateOrModify
  name: CreateOrModify
  nameWithType: ITenantRepository.CreateOrModify
  fullName: Octopus.Client.Repositories.ITenantRepository.CreateOrModify
- uid: Octopus.Client.Editors.TenantEditor
  commentId: T:Octopus.Client.Editors.TenantEditor
  parent: Octopus.Client.Editors
  name: TenantEditor
  nameWithType: TenantEditor
  fullName: Octopus.Client.Editors.TenantEditor
- uid: Octopus.Client.Editors
  commentId: N:Octopus.Client.Editors
  name: Octopus.Client.Editors
  nameWithType: Octopus.Client.Editors
  fullName: Octopus.Client.Editors
