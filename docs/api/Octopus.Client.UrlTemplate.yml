### YamlMime:ManagedReference
items:
- uid: Octopus.Client.UrlTemplate
  commentId: T:Octopus.Client.UrlTemplate
  id: UrlTemplate
  parent: Octopus.Client
  children:
  - Octopus.Client.UrlTemplate.#ctor(System.String)
  - Octopus.Client.UrlTemplate.GetParameterNames
  - Octopus.Client.UrlTemplate.Resolve
  - Octopus.Client.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Octopus.Client.UrlTemplate.Resolve(System.String,System.Object)
  - Octopus.Client.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - Octopus.Client.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Octopus.Client.UrlTemplate.SetParameter(System.String,System.Object)
  - Octopus.Client.UrlTemplate.SetParameter(System.String,System.String)
  langs:
  - csharp
  - vb
  name: UrlTemplate
  nameWithType: UrlTemplate
  fullName: Octopus.Client.UrlTemplate
  type: Class
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: UrlTemplate
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 22
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nModified implementation of the URI Template Spec RFC6570 for use in the Octopus Deploy RESTful API client.\n"
  remarks: "\nThis implementation is from: https://github.com/darrelmiller/UriTemplates. The class was renamed so as not to\nconflict with\nthe UriTemplate class built into .NET, and the static\n<xref href=\"Octopus.Client.UrlTemplate.Resolve(System.String%2cSystem.Collections.Generic.IDictionary%7bSystem.String%2cSystem.Object%7d)\" data-throw-if-not-resolved=\"false\"></xref>\nmethods were added.\n"
  example: []
  syntax:
    content: public class UrlTemplate
    content.vb: Public Class UrlTemplate
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Octopus.Client.UrlTemplate.#ctor(System.String)
  commentId: M:Octopus.Client.UrlTemplate.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: UrlTemplate(String)
  nameWithType: UrlTemplate.UrlTemplate(String)
  fullName: Octopus.Client.UrlTemplate.UrlTemplate(System.String)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 137
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nInitializes a new instance of the <xref href=\"Octopus.Client.UrlTemplate\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public UrlTemplate(string template)
    parameters:
    - id: template
      type: System.String
      description: 'The template. '
    content.vb: Public Sub New(template As String)
  overload: Octopus.Client.UrlTemplate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.UrlTemplate.SetParameter(System.String,System.Object)
  commentId: M:Octopus.Client.UrlTemplate.SetParameter(System.String,System.Object)
  id: SetParameter(System.String,System.Object)
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: SetParameter(String, Object)
  nameWithType: UrlTemplate.SetParameter(String, Object)
  fullName: Octopus.Client.UrlTemplate.SetParameter(System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SetParameter
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 147
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSets the parameter.\n"
  example: []
  syntax:
    content: public void SetParameter(string name, object value)
    parameters:
    - id: name
      type: System.String
      description: 'The name. '
    - id: value
      type: System.Object
      description: 'The value. '
    content.vb: Public Sub SetParameter(name As String, value As Object)
  overload: Octopus.Client.UrlTemplate.SetParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.UrlTemplate.SetParameter(System.String,System.String)
  commentId: M:Octopus.Client.UrlTemplate.SetParameter(System.String,System.String)
  id: SetParameter(System.String,System.String)
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: SetParameter(String, String)
  nameWithType: UrlTemplate.SetParameter(String, String)
  fullName: Octopus.Client.UrlTemplate.SetParameter(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SetParameter
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 157
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSets the parameter.\n"
  example: []
  syntax:
    content: public void SetParameter(string name, string value)
    parameters:
    - id: name
      type: System.String
      description: 'The name. '
    - id: value
      type: System.String
      description: 'The value. '
    content.vb: Public Sub SetParameter(name As String, value As String)
  overload: Octopus.Client.UrlTemplate.SetParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Octopus.Client.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: SetParameter(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: SetParameter(String, IEnumerable<String>)
  nameWithType: UrlTemplate.SetParameter(String, IEnumerable<String>)
  fullName: Octopus.Client.UrlTemplate.SetParameter(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SetParameter
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 167
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSets the parameter.\n"
  example: []
  syntax:
    content: public void SetParameter(string name, IEnumerable<string> value)
    parameters:
    - id: name
      type: System.String
      description: 'The name. '
    - id: value
      type: System.Collections.Generic.IEnumerable{System.String}
      description: 'The value. '
    content.vb: Public Sub SetParameter(name As String, value As IEnumerable(Of String))
  overload: Octopus.Client.UrlTemplate.SetParameter*
  nameWithType.vb: UrlTemplate.SetParameter(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Octopus.Client.UrlTemplate.SetParameter(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SetParameter(String, IEnumerable(Of String))
- uid: Octopus.Client.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Octopus.Client.UrlTemplate.SetParameter(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: SetParameter(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: SetParameter(String, IDictionary<String, String>)
  nameWithType: UrlTemplate.SetParameter(String, IDictionary<String, String>)
  fullName: Octopus.Client.UrlTemplate.SetParameter(System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SetParameter
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 177
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nSets the parameter.\n"
  example: []
  syntax:
    content: public void SetParameter(string name, IDictionary<string, string> value)
    parameters:
    - id: name
      type: System.String
      description: 'The name. '
    - id: value
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: 'The value. '
    content.vb: Public Sub SetParameter(name As String, value As IDictionary(Of String, String))
  overload: Octopus.Client.UrlTemplate.SetParameter*
  nameWithType.vb: UrlTemplate.SetParameter(String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Octopus.Client.UrlTemplate.SetParameter(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: SetParameter(String, IDictionary(Of String, String))
- uid: Octopus.Client.UrlTemplate.GetParameterNames
  commentId: M:Octopus.Client.UrlTemplate.GetParameterNames
  id: GetParameterNames
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: GetParameterNames()
  nameWithType: UrlTemplate.GetParameterNames()
  fullName: Octopus.Client.UrlTemplate.GetParameterNames()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetParameterNames
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 186
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nGets the parameter names.\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetParameterNames()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    content.vb: Public Function GetParameterNames As IEnumerable(Of String)
  overload: Octopus.Client.UrlTemplate.GetParameterNames*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.UrlTemplate.Resolve
  commentId: M:Octopus.Client.UrlTemplate.Resolve
  id: Resolve
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: Resolve()
  nameWithType: UrlTemplate.Resolve()
  fullName: Octopus.Client.UrlTemplate.Resolve()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Resolve
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 204
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nResolves this instance.\n"
  example: []
  syntax:
    content: public string Resolve()
    return:
      type: System.String
      description: ''
    content.vb: Public Function Resolve As String
  overload: Octopus.Client.UrlTemplate.Resolve*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nMalformed template :  + result\nor\nMalformed template :  + result\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.UrlTemplate.Resolve(System.String,System.Object)
  commentId: M:Octopus.Client.UrlTemplate.Resolve(System.String,System.Object)
  id: Resolve(System.String,System.Object)
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: Resolve(String, Object)
  nameWithType: UrlTemplate.Resolve(String, Object)
  fullName: Octopus.Client.UrlTemplate.Resolve(System.String, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Resolve
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 509
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nResolves the specified template spec.\n"
  example: []
  syntax:
    content: public static string Resolve(string templateSpec, object parameters)
    parameters:
    - id: templateSpec
      type: System.String
      description: 'The template spec. '
    - id: parameters
      type: System.Object
      description: 'The parameters. '
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function Resolve(templateSpec As String, parameters As Object) As String
  overload: Octopus.Client.UrlTemplate.Resolve*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Octopus.Client.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Octopus.Client.UrlTemplate
  langs:
  - csharp
  - vb
  name: Resolve(String, IDictionary<String, Object>)
  nameWithType: UrlTemplate.Resolve(String, IDictionary<String, Object>)
  fullName: Octopus.Client.UrlTemplate.Resolve(System.String, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/UrlTemplate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Resolve
    path: ../source/Octopus.Client/UrlTemplate.cs
    startLine: 531
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nResolves the specified template spec.\n"
  example: []
  syntax:
    content: public static string Resolve(string templateSpec, IDictionary<string, object> parameters)
    parameters:
    - id: templateSpec
      type: System.String
      description: 'The template spec. '
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: 'The parameters. '
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function Resolve(templateSpec As String, parameters As IDictionary(Of String, Object)) As String
  overload: Octopus.Client.UrlTemplate.Resolve*
  nameWithType.vb: UrlTemplate.Resolve(String, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Octopus.Client.UrlTemplate.Resolve(System.String, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Resolve(String, IDictionary(Of String, Object))
references:
- uid: Octopus.Client.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Octopus.Client.UrlTemplate.Resolve(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  isExternal: true
- uid: Octopus.Client
  commentId: N:Octopus.Client
  name: Octopus.Client
  nameWithType: Octopus.Client
  fullName: Octopus.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Octopus.Client.UrlTemplate
  commentId: T:Octopus.Client.UrlTemplate
  name: UrlTemplate
  nameWithType: UrlTemplate
  fullName: Octopus.Client.UrlTemplate
- uid: Octopus.Client.UrlTemplate.#ctor*
  commentId: Overload:Octopus.Client.UrlTemplate.#ctor
  name: UrlTemplate
  nameWithType: UrlTemplate.UrlTemplate
  fullName: Octopus.Client.UrlTemplate.UrlTemplate
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Octopus.Client.UrlTemplate.SetParameter*
  commentId: Overload:Octopus.Client.UrlTemplate.SetParameter
  name: SetParameter
  nameWithType: UrlTemplate.SetParameter
  fullName: Octopus.Client.UrlTemplate.SetParameter
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.UrlTemplate.GetParameterNames*
  commentId: Overload:Octopus.Client.UrlTemplate.GetParameterNames
  name: GetParameterNames
  nameWithType: UrlTemplate.GetParameterNames
  fullName: Octopus.Client.UrlTemplate.GetParameterNames
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Octopus.Client.UrlTemplate.Resolve*
  commentId: Overload:Octopus.Client.UrlTemplate.Resolve
  name: Resolve
  nameWithType: UrlTemplate.Resolve
  fullName: Octopus.Client.UrlTemplate.Resolve
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
