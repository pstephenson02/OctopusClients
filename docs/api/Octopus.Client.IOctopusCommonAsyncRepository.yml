### YamlMime:ManagedReference
items:
- uid: Octopus.Client.IOctopusCommonAsyncRepository
  commentId: T:Octopus.Client.IOctopusCommonAsyncRepository
  id: IOctopusCommonAsyncRepository
  parent: Octopus.Client
  children:
  - Octopus.Client.IOctopusCommonAsyncRepository.Client
  - Octopus.Client.IOctopusCommonAsyncRepository.CommunityActionTemplates
  - Octopus.Client.IOctopusCommonAsyncRepository.Events
  - Octopus.Client.IOctopusCommonAsyncRepository.HasLink(System.String)
  - Octopus.Client.IOctopusCommonAsyncRepository.HasLinkParameter(System.String,System.String)
  - Octopus.Client.IOctopusCommonAsyncRepository.Link(System.String)
  - Octopus.Client.IOctopusCommonAsyncRepository.Scope
  - Octopus.Client.IOctopusCommonAsyncRepository.ScopedUserRoles
  - Octopus.Client.IOctopusCommonAsyncRepository.Tasks
  - Octopus.Client.IOctopusCommonAsyncRepository.Teams
  - Octopus.Client.IOctopusCommonAsyncRepository.UserInvites
  - Octopus.Client.IOctopusCommonAsyncRepository.UserPermissions
  - Octopus.Client.IOctopusCommonAsyncRepository.UserTeams
  langs:
  - csharp
  - vb
  name: IOctopusCommonAsyncRepository
  nameWithType: IOctopusCommonAsyncRepository
  fullName: Octopus.Client.IOctopusCommonAsyncRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IOctopusCommonAsyncRepository
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 5
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: public interface IOctopusCommonAsyncRepository
    content.vb: Public Interface IOctopusCommonAsyncRepository
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Events
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.Events
  id: Events
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: IOctopusCommonAsyncRepository.Events
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Events
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Events
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 7
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: IEventRepository Events { get; }
    parameters: []
    return:
      type: Octopus.Client.Repositories.Async.IEventRepository
    content.vb: ReadOnly Property Events As IEventRepository
  overload: Octopus.Client.IOctopusCommonAsyncRepository.Events*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Tasks
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.Tasks
  id: Tasks
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: Tasks
  nameWithType: IOctopusCommonAsyncRepository.Tasks
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Tasks
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Tasks
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 8
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: ITaskRepository Tasks { get; }
    parameters: []
    return:
      type: Octopus.Client.Repositories.Async.ITaskRepository
    content.vb: ReadOnly Property Tasks As ITaskRepository
  overload: Octopus.Client.IOctopusCommonAsyncRepository.Tasks*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Teams
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.Teams
  id: Teams
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: Teams
  nameWithType: IOctopusCommonAsyncRepository.Teams
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Teams
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Teams
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 9
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: ITeamsRepository Teams { get; }
    parameters: []
    return:
      type: Octopus.Client.Repositories.Async.ITeamsRepository
    content.vb: ReadOnly Property Teams As ITeamsRepository
  overload: Octopus.Client.IOctopusCommonAsyncRepository.Teams*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.ScopedUserRoles
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.ScopedUserRoles
  id: ScopedUserRoles
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: ScopedUserRoles
  nameWithType: IOctopusCommonAsyncRepository.ScopedUserRoles
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.ScopedUserRoles
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ScopedUserRoles
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 10
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: IScopedUserRoleRepository ScopedUserRoles { get; }
    parameters: []
    return:
      type: Octopus.Client.Repositories.Async.IScopedUserRoleRepository
    content.vb: ReadOnly Property ScopedUserRoles As IScopedUserRoleRepository
  overload: Octopus.Client.IOctopusCommonAsyncRepository.ScopedUserRoles*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.UserPermissions
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.UserPermissions
  id: UserPermissions
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: UserPermissions
  nameWithType: IOctopusCommonAsyncRepository.UserPermissions
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.UserPermissions
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: UserPermissions
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 11
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: IUserPermissionsRepository UserPermissions { get; }
    parameters: []
    return:
      type: Octopus.Client.Repositories.Async.IUserPermissionsRepository
    content.vb: ReadOnly Property UserPermissions As IUserPermissionsRepository
  overload: Octopus.Client.IOctopusCommonAsyncRepository.UserPermissions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.UserTeams
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.UserTeams
  id: UserTeams
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: UserTeams
  nameWithType: IOctopusCommonAsyncRepository.UserTeams
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.UserTeams
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: UserTeams
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 12
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: IUserTeamsRepository UserTeams { get; }
    parameters: []
    return:
      type: Octopus.Client.Repositories.Async.IUserTeamsRepository
    content.vb: ReadOnly Property UserTeams As IUserTeamsRepository
  overload: Octopus.Client.IOctopusCommonAsyncRepository.UserTeams*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.CommunityActionTemplates
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.CommunityActionTemplates
  id: CommunityActionTemplates
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: CommunityActionTemplates
  nameWithType: IOctopusCommonAsyncRepository.CommunityActionTemplates
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.CommunityActionTemplates
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CommunityActionTemplates
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 13
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: ICommunityActionTemplateRepository CommunityActionTemplates { get; }
    parameters: []
    return:
      type: Octopus.Client.Repositories.Async.ICommunityActionTemplateRepository
    content.vb: ReadOnly Property CommunityActionTemplates As ICommunityActionTemplateRepository
  overload: Octopus.Client.IOctopusCommonAsyncRepository.CommunityActionTemplates*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.UserInvites
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.UserInvites
  id: UserInvites
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: UserInvites
  nameWithType: IOctopusCommonAsyncRepository.UserInvites
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.UserInvites
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: UserInvites
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 14
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: IUserInvitesRepository UserInvites { get; }
    parameters: []
    return:
      type: Octopus.Client.Repositories.Async.IUserInvitesRepository
    content.vb: ReadOnly Property UserInvites As IUserInvitesRepository
  overload: Octopus.Client.IOctopusCommonAsyncRepository.UserInvites*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Client
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.Client
  id: Client
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: Client
  nameWithType: IOctopusCommonAsyncRepository.Client
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Client
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Client
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 19
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nThe client over which the repository is run.\n"
  example: []
  syntax:
    content: IOctopusAsyncClient Client { get; }
    parameters: []
    return:
      type: Octopus.Client.IOctopusAsyncClient
    content.vb: ReadOnly Property Client As IOctopusAsyncClient
  overload: Octopus.Client.IOctopusCommonAsyncRepository.Client*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Scope
  commentId: P:Octopus.Client.IOctopusCommonAsyncRepository.Scope
  id: Scope
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: Scope
  nameWithType: IOctopusCommonAsyncRepository.Scope
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Scope
  type: Property
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Scope
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 21
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  syntax:
    content: RepositoryScope Scope { get; }
    parameters: []
    return:
      type: Octopus.Client.RepositoryScope
    content.vb: ReadOnly Property Scope As RepositoryScope
  overload: Octopus.Client.IOctopusCommonAsyncRepository.Scope*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Octopus.Client.IOctopusCommonAsyncRepository.HasLink(System.String)
  commentId: M:Octopus.Client.IOctopusCommonAsyncRepository.HasLink(System.String)
  id: HasLink(System.String)
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: HasLink(String)
  nameWithType: IOctopusCommonAsyncRepository.HasLink(String)
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.HasLink(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: HasLink
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 30
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nDetermines whether the specified link exists.\n"
  example: []
  syntax:
    content: Task<bool> HasLink(string name)
    parameters:
    - id: name
      type: System.String
      description: The name/key of the link.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<code>true</code> if the specified link is defined; otherwise, <code>false</code>.\n"
    content.vb: Function HasLink(name As String) As Task(Of Boolean)
  overload: Octopus.Client.IOctopusCommonAsyncRepository.HasLink*
- uid: Octopus.Client.IOctopusCommonAsyncRepository.HasLinkParameter(System.String,System.String)
  commentId: M:Octopus.Client.IOctopusCommonAsyncRepository.HasLinkParameter(System.String,System.String)
  id: HasLinkParameter(System.String,System.String)
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: HasLinkParameter(String, String)
  nameWithType: IOctopusCommonAsyncRepository.HasLinkParameter(String, String)
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.HasLinkParameter(System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: HasLinkParameter
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 39
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nDetermines whether the link with the specified name contains a specified parameter.\n"
  example: []
  syntax:
    content: Task<bool> HasLinkParameter(string linkName, string parameterName)
    parameters:
    - id: linkName
      type: System.String
      description: The name/key of the link.
    - id: parameterName
      type: System.String
      description: The name of the parameter.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: Function HasLinkParameter(linkName As String, parameterName As String) As Task(Of Boolean)
  overload: Octopus.Client.IOctopusCommonAsyncRepository.HasLinkParameter*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: If the link is not defined.
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Link(System.String)
  commentId: M:Octopus.Client.IOctopusCommonAsyncRepository.Link(System.String)
  id: Link(System.String)
  parent: Octopus.Client.IOctopusCommonAsyncRepository
  langs:
  - csharp
  - vb
  name: Link(String)
  nameWithType: IOctopusCommonAsyncRepository.Link(String)
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Link(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/IOctopusCommonAsyncRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Link
    path: ../source/Octopus.Client/IOctopusCommonAsyncRepository.cs
    startLine: 47
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client
  summary: "\nGets the link with the specified name.\n"
  example: []
  syntax:
    content: Task<string> Link(string name)
    parameters:
    - id: name
      type: System.String
      description: The name/key of the link.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Function Link(name As String) As Task(Of String)
  overload: Octopus.Client.IOctopusCommonAsyncRepository.Link*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: If the link is not defined.
references:
- uid: Octopus.Client
  commentId: N:Octopus.Client
  name: Octopus.Client
  nameWithType: Octopus.Client
  fullName: Octopus.Client
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Events*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.Events
  name: Events
  nameWithType: IOctopusCommonAsyncRepository.Events
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Events
- uid: Octopus.Client.Repositories.Async.IEventRepository
  commentId: T:Octopus.Client.Repositories.Async.IEventRepository
  parent: Octopus.Client.Repositories.Async
  name: IEventRepository
  nameWithType: IEventRepository
  fullName: Octopus.Client.Repositories.Async.IEventRepository
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Tasks*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.Tasks
  name: Tasks
  nameWithType: IOctopusCommonAsyncRepository.Tasks
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Tasks
- uid: Octopus.Client.Repositories.Async.ITaskRepository
  commentId: T:Octopus.Client.Repositories.Async.ITaskRepository
  parent: Octopus.Client.Repositories.Async
  name: ITaskRepository
  nameWithType: ITaskRepository
  fullName: Octopus.Client.Repositories.Async.ITaskRepository
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Teams*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.Teams
  name: Teams
  nameWithType: IOctopusCommonAsyncRepository.Teams
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Teams
- uid: Octopus.Client.Repositories.Async.ITeamsRepository
  commentId: T:Octopus.Client.Repositories.Async.ITeamsRepository
  parent: Octopus.Client.Repositories.Async
  name: ITeamsRepository
  nameWithType: ITeamsRepository
  fullName: Octopus.Client.Repositories.Async.ITeamsRepository
- uid: Octopus.Client.IOctopusCommonAsyncRepository.ScopedUserRoles*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.ScopedUserRoles
  name: ScopedUserRoles
  nameWithType: IOctopusCommonAsyncRepository.ScopedUserRoles
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.ScopedUserRoles
- uid: Octopus.Client.Repositories.Async.IScopedUserRoleRepository
  commentId: T:Octopus.Client.Repositories.Async.IScopedUserRoleRepository
  parent: Octopus.Client.Repositories.Async
  name: IScopedUserRoleRepository
  nameWithType: IScopedUserRoleRepository
  fullName: Octopus.Client.Repositories.Async.IScopedUserRoleRepository
- uid: Octopus.Client.IOctopusCommonAsyncRepository.UserPermissions*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.UserPermissions
  name: UserPermissions
  nameWithType: IOctopusCommonAsyncRepository.UserPermissions
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.UserPermissions
- uid: Octopus.Client.Repositories.Async.IUserPermissionsRepository
  commentId: T:Octopus.Client.Repositories.Async.IUserPermissionsRepository
  parent: Octopus.Client.Repositories.Async
  name: IUserPermissionsRepository
  nameWithType: IUserPermissionsRepository
  fullName: Octopus.Client.Repositories.Async.IUserPermissionsRepository
- uid: Octopus.Client.IOctopusCommonAsyncRepository.UserTeams*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.UserTeams
  name: UserTeams
  nameWithType: IOctopusCommonAsyncRepository.UserTeams
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.UserTeams
- uid: Octopus.Client.Repositories.Async.IUserTeamsRepository
  commentId: T:Octopus.Client.Repositories.Async.IUserTeamsRepository
  parent: Octopus.Client.Repositories.Async
  name: IUserTeamsRepository
  nameWithType: IUserTeamsRepository
  fullName: Octopus.Client.Repositories.Async.IUserTeamsRepository
- uid: Octopus.Client.IOctopusCommonAsyncRepository.CommunityActionTemplates*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.CommunityActionTemplates
  name: CommunityActionTemplates
  nameWithType: IOctopusCommonAsyncRepository.CommunityActionTemplates
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.CommunityActionTemplates
- uid: Octopus.Client.Repositories.Async.ICommunityActionTemplateRepository
  commentId: T:Octopus.Client.Repositories.Async.ICommunityActionTemplateRepository
  parent: Octopus.Client.Repositories.Async
  name: ICommunityActionTemplateRepository
  nameWithType: ICommunityActionTemplateRepository
  fullName: Octopus.Client.Repositories.Async.ICommunityActionTemplateRepository
- uid: Octopus.Client.IOctopusCommonAsyncRepository.UserInvites*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.UserInvites
  name: UserInvites
  nameWithType: IOctopusCommonAsyncRepository.UserInvites
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.UserInvites
- uid: Octopus.Client.Repositories.Async.IUserInvitesRepository
  commentId: T:Octopus.Client.Repositories.Async.IUserInvitesRepository
  parent: Octopus.Client.Repositories.Async
  name: IUserInvitesRepository
  nameWithType: IUserInvitesRepository
  fullName: Octopus.Client.Repositories.Async.IUserInvitesRepository
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Client*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.Client
  name: Client
  nameWithType: IOctopusCommonAsyncRepository.Client
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Client
- uid: Octopus.Client.IOctopusAsyncClient
  commentId: T:Octopus.Client.IOctopusAsyncClient
  parent: Octopus.Client
  name: IOctopusAsyncClient
  nameWithType: IOctopusAsyncClient
  fullName: Octopus.Client.IOctopusAsyncClient
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Scope*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.Scope
  name: Scope
  nameWithType: IOctopusCommonAsyncRepository.Scope
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Scope
- uid: Octopus.Client.RepositoryScope
  commentId: T:Octopus.Client.RepositoryScope
  parent: Octopus.Client
  name: RepositoryScope
  nameWithType: RepositoryScope
  fullName: Octopus.Client.RepositoryScope
- uid: Octopus.Client.IOctopusCommonAsyncRepository.HasLink*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.HasLink
  name: HasLink
  nameWithType: IOctopusCommonAsyncRepository.HasLink
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.HasLink
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Octopus.Client.IOctopusCommonAsyncRepository.HasLinkParameter*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.HasLinkParameter
  name: HasLinkParameter
  nameWithType: IOctopusCommonAsyncRepository.HasLinkParameter
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.HasLinkParameter
- uid: Octopus.Client.IOctopusCommonAsyncRepository.Link*
  commentId: Overload:Octopus.Client.IOctopusCommonAsyncRepository.Link
  name: Link
  nameWithType: IOctopusCommonAsyncRepository.Link
  fullName: Octopus.Client.IOctopusCommonAsyncRepository.Link
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
