### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository
  commentId: T:Octopus.Client.Repositories.Async.IActionTemplateRepository
  id: IActionTemplateRepository
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.IActionTemplateRepository.GetVersion(Octopus.Client.Model.ActionTemplateResource,System.Int32)
  - Octopus.Client.Repositories.Async.IActionTemplateRepository.Search
  - Octopus.Client.Repositories.Async.IActionTemplateRepository.SetLogo(Octopus.Client.Model.ActionTemplateResource,System.String,System.IO.Stream)
  - Octopus.Client.Repositories.Async.IActionTemplateRepository.UpdateActions(Octopus.Client.Model.ActionTemplateResource,Octopus.Client.Model.ActionsUpdateResource)
  langs:
  - csharp
  - vb
  name: IActionTemplateRepository
  nameWithType: IActionTemplateRepository
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IActionTemplateRepository
    path: ../source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
    startLine: 7
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: 'public interface IActionTemplateRepository : ICreate<ActionTemplateResource>, IModify<ActionTemplateResource>, IDelete<ActionTemplateResource>, IGet<ActionTemplateResource>, IFindByName<ActionTemplateResource>, IPaginate<ActionTemplateResource>, IGetAll<ActionTemplateResource>'
    content.vb: >-
      Public Interface IActionTemplateRepository
          Inherits ICreate(Of ActionTemplateResource), IModify(Of ActionTemplateResource), IDelete(Of ActionTemplateResource), IGet(Of ActionTemplateResource), IFindByName(Of ActionTemplateResource), IGetAll(Of ActionTemplateResource)
  inheritedMembers:
  - Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ActionTemplateResource}.Create(Octopus.Client.Model.ActionTemplateResource,System.Object)
  - Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ActionTemplateResource}.Modify(Octopus.Client.Model.ActionTemplateResource)
  - Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ActionTemplateResource}.Delete(Octopus.Client.Model.ActionTemplateResource)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Get(System.String)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Get(System.String[])
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Refresh(Octopus.Client.Model.ActionTemplateResource)
  - Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}.FindByName(System.String,System.String,System.Object)
  - Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ActionTemplateResource},System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindOne(System.Func{Octopus.Client.Model.ActionTemplateResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindMany(System.Func{Octopus.Client.Model.ActionTemplateResource,System.Boolean},System.String,System.Object)
  - Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindAll(System.String,System.Object)
  - Octopus.Client.Repositories.Async.IGetAll{Octopus.Client.Model.ActionTemplateResource}.GetAll
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository.Search
  commentId: M:Octopus.Client.Repositories.Async.IActionTemplateRepository.Search
  id: Search
  parent: Octopus.Client.Repositories.Async.IActionTemplateRepository
  langs:
  - csharp
  - vb
  name: Search()
  nameWithType: IActionTemplateRepository.Search()
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository.Search()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Search
    path: ../source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
    startLine: 9
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<List<ActionTemplateSearchResource>> Search()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Octopus.Client.Model.ActionTemplateSearchResource}}
    content.vb: Function Search As Task(Of List(Of ActionTemplateSearchResource))
  overload: Octopus.Client.Repositories.Async.IActionTemplateRepository.Search*
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository.GetVersion(Octopus.Client.Model.ActionTemplateResource,System.Int32)
  commentId: M:Octopus.Client.Repositories.Async.IActionTemplateRepository.GetVersion(Octopus.Client.Model.ActionTemplateResource,System.Int32)
  id: GetVersion(Octopus.Client.Model.ActionTemplateResource,System.Int32)
  parent: Octopus.Client.Repositories.Async.IActionTemplateRepository
  langs:
  - csharp
  - vb
  name: GetVersion(ActionTemplateResource, Int32)
  nameWithType: IActionTemplateRepository.GetVersion(ActionTemplateResource, Int32)
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository.GetVersion(Octopus.Client.Model.ActionTemplateResource, System.Int32)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetVersion
    path: ../source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
    startLine: 10
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<ActionTemplateResource> GetVersion(ActionTemplateResource resource, int version)
    parameters:
    - id: resource
      type: Octopus.Client.Model.ActionTemplateResource
    - id: version
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ActionTemplateResource}
    content.vb: Function GetVersion(resource As ActionTemplateResource, version As Integer) As Task(Of ActionTemplateResource)
  overload: Octopus.Client.Repositories.Async.IActionTemplateRepository.GetVersion*
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository.UpdateActions(Octopus.Client.Model.ActionTemplateResource,Octopus.Client.Model.ActionsUpdateResource)
  commentId: M:Octopus.Client.Repositories.Async.IActionTemplateRepository.UpdateActions(Octopus.Client.Model.ActionTemplateResource,Octopus.Client.Model.ActionsUpdateResource)
  id: UpdateActions(Octopus.Client.Model.ActionTemplateResource,Octopus.Client.Model.ActionsUpdateResource)
  parent: Octopus.Client.Repositories.Async.IActionTemplateRepository
  langs:
  - csharp
  - vb
  name: UpdateActions(ActionTemplateResource, ActionsUpdateResource)
  nameWithType: IActionTemplateRepository.UpdateActions(ActionTemplateResource, ActionsUpdateResource)
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository.UpdateActions(Octopus.Client.Model.ActionTemplateResource, Octopus.Client.Model.ActionsUpdateResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: UpdateActions
    path: ../source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
    startLine: 11
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<ActionUpdateResultResource[]> UpdateActions(ActionTemplateResource actionTemplate, ActionsUpdateResource update)
    parameters:
    - id: actionTemplate
      type: Octopus.Client.Model.ActionTemplateResource
    - id: update
      type: Octopus.Client.Model.ActionsUpdateResource
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ActionUpdateResultResource[]}
    content.vb: Function UpdateActions(actionTemplate As ActionTemplateResource, update As ActionsUpdateResource) As Task(Of ActionUpdateResultResource())
  overload: Octopus.Client.Repositories.Async.IActionTemplateRepository.UpdateActions*
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository.SetLogo(Octopus.Client.Model.ActionTemplateResource,System.String,System.IO.Stream)
  commentId: M:Octopus.Client.Repositories.Async.IActionTemplateRepository.SetLogo(Octopus.Client.Model.ActionTemplateResource,System.String,System.IO.Stream)
  id: SetLogo(Octopus.Client.Model.ActionTemplateResource,System.String,System.IO.Stream)
  parent: Octopus.Client.Repositories.Async.IActionTemplateRepository
  langs:
  - csharp
  - vb
  name: SetLogo(ActionTemplateResource, String, Stream)
  nameWithType: IActionTemplateRepository.SetLogo(ActionTemplateResource, String, Stream)
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository.SetLogo(Octopus.Client.Model.ActionTemplateResource, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SetLogo
    path: ../source/Octopus.Client/Repositories/Async/ActionTemplateRepository.cs
    startLine: 12
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task SetLogo(ActionTemplateResource resource, string fileName, Stream contents)
    parameters:
    - id: resource
      type: Octopus.Client.Model.ActionTemplateResource
    - id: fileName
      type: System.String
    - id: contents
      type: System.IO.Stream
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SetLogo(resource As ActionTemplateResource, fileName As String, contents As Stream) As Task
  overload: Octopus.Client.Repositories.Async.IActionTemplateRepository.SetLogo*
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ActionTemplateResource}.Create(Octopus.Client.Model.ActionTemplateResource,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ActionTemplateResource}.Create(Octopus.Client.Model.ActionTemplateResource,System.Object)
  parent: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  name: Create(ActionTemplateResource, Object)
  nameWithType: ICreate<ActionTemplateResource>.Create(ActionTemplateResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.ActionTemplateResource>.Create(Octopus.Client.Model.ActionTemplateResource, System.Object)
  nameWithType.vb: ICreate(Of ActionTemplateResource).Create(ActionTemplateResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.ActionTemplateResource).Create(Octopus.Client.Model.ActionTemplateResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<ActionTemplateResource>.Create
    fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.ActionTemplateResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of ActionTemplateResource).Create
    fullName: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.ActionTemplateResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ActionTemplateResource}.Modify(Octopus.Client.Model.ActionTemplateResource)
  commentId: M:Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ActionTemplateResource}.Modify(Octopus.Client.Model.ActionTemplateResource)
  parent: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  name: Modify(ActionTemplateResource)
  nameWithType: IModify<ActionTemplateResource>.Modify(ActionTemplateResource)
  fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.ActionTemplateResource>.Modify(Octopus.Client.Model.ActionTemplateResource)
  nameWithType.vb: IModify(Of ActionTemplateResource).Modify(ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.ActionTemplateResource).Modify(Octopus.Client.Model.ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<ActionTemplateResource>.Modify
    fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.ActionTemplateResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of ActionTemplateResource).Modify
    fullName: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.ActionTemplateResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ActionTemplateResource}.Delete(Octopus.Client.Model.ActionTemplateResource)
  commentId: M:Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ActionTemplateResource}.Delete(Octopus.Client.Model.ActionTemplateResource)
  parent: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  name: Delete(ActionTemplateResource)
  nameWithType: IDelete<ActionTemplateResource>.Delete(ActionTemplateResource)
  fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.ActionTemplateResource>.Delete(Octopus.Client.Model.ActionTemplateResource)
  nameWithType.vb: IDelete(Of ActionTemplateResource).Delete(ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.ActionTemplateResource).Delete(Octopus.Client.Model.ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<ActionTemplateResource>.Delete
    fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.ActionTemplateResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of ActionTemplateResource).Delete
    fullName: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.ActionTemplateResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Get(System.String)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  name: Get(String)
  nameWithType: IGet<ActionTemplateResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ActionTemplateResource>.Get(System.String)
  nameWithType.vb: IGet(Of ActionTemplateResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ActionTemplateResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<ActionTemplateResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ActionTemplateResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of ActionTemplateResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ActionTemplateResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Get(System.String[])
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  name: Get(String[])
  nameWithType: IGet<ActionTemplateResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ActionTemplateResource>.Get(System.String[])
  nameWithType.vb: IGet(Of ActionTemplateResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ActionTemplateResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<ActionTemplateResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ActionTemplateResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of ActionTemplateResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ActionTemplateResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Refresh(Octopus.Client.Model.ActionTemplateResource)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}.Refresh(Octopus.Client.Model.ActionTemplateResource)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(ActionTemplateResource)
  nameWithType: IGet<ActionTemplateResource>.Refresh(ActionTemplateResource)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ActionTemplateResource>.Refresh(Octopus.Client.Model.ActionTemplateResource)
  nameWithType.vb: IGet(Of ActionTemplateResource).Refresh(ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ActionTemplateResource).Refresh(Octopus.Client.Model.ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<ActionTemplateResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ActionTemplateResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of ActionTemplateResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ActionTemplateResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}.FindByName(System.String,System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}.FindByName(System.String,System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
  name: FindByName(String, String, Object)
  nameWithType: IFindByName<ActionTemplateResource>.FindByName(String, String, Object)
  fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.ActionTemplateResource>.FindByName(System.String, System.String, System.Object)
  nameWithType.vb: IFindByName(Of ActionTemplateResource).FindByName(String, String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.ActionTemplateResource).FindByName(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName<ActionTemplateResource>.FindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.ActionTemplateResource>.FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName(Of ActionTemplateResource).FindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.ActionTemplateResource).FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  name: FindByNames(IEnumerable<String>, String, Object)
  nameWithType: IFindByName<ActionTemplateResource>.FindByNames(IEnumerable<String>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.ActionTemplateResource>.FindByNames(System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object)
  nameWithType.vb: IFindByName(Of ActionTemplateResource).FindByNames(IEnumerable(Of String), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.ActionTemplateResource).FindByNames(System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object)
  name.vb: FindByNames(IEnumerable(Of String), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName<ActionTemplateResource>.FindByNames
    fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.ActionTemplateResource>.FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName(Of ActionTemplateResource).FindByNames
    fullName: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.ActionTemplateResource).FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ActionTemplateResource},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.ActionTemplateResource},System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  name: Paginate(Func<ResourceCollection<ActionTemplateResource>, Boolean>, String, Object)
  nameWithType: IPaginate<ActionTemplateResource>.Paginate(Func<ResourceCollection<ActionTemplateResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.ActionTemplateResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of ActionTemplateResource).Paginate(Func(Of ResourceCollection(Of ActionTemplateResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.ActionTemplateResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of ActionTemplateResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<ActionTemplateResource>.Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of ActionTemplateResource).Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindOne(System.Func{Octopus.Client.Model.ActionTemplateResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindOne(System.Func{Octopus.Client.Model.ActionTemplateResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindOne(Func<ActionTemplateResource, Boolean>, String, Object)
  nameWithType: IPaginate<ActionTemplateResource>.FindOne(Func<ActionTemplateResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>.FindOne(System.Func<Octopus.Client.Model.ActionTemplateResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of ActionTemplateResource).FindOne(Func(Of ActionTemplateResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource).FindOne(System.Func(Of Octopus.Client.Model.ActionTemplateResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of ActionTemplateResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<ActionTemplateResource>.FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of ActionTemplateResource).FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindMany(System.Func{Octopus.Client.Model.ActionTemplateResource,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindMany(System.Func{Octopus.Client.Model.ActionTemplateResource,System.Boolean},System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  name: FindMany(Func<ActionTemplateResource, Boolean>, String, Object)
  nameWithType: IPaginate<ActionTemplateResource>.FindMany(Func<ActionTemplateResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>.FindMany(System.Func<Octopus.Client.Model.ActionTemplateResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of ActionTemplateResource).FindMany(Func(Of ActionTemplateResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource).FindMany(System.Func(Of Octopus.Client.Model.ActionTemplateResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of ActionTemplateResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<ActionTemplateResource>.FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of ActionTemplateResource).FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}.FindAll(System.String,System.Object)
  parent: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  name: FindAll(String, Object)
  nameWithType: IPaginate<ActionTemplateResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of ActionTemplateResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<ActionTemplateResource>.FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of ActionTemplateResource).FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGetAll{Octopus.Client.Model.ActionTemplateResource}.GetAll
  commentId: M:Octopus.Client.Repositories.Async.IGetAll{Octopus.Client.Model.ActionTemplateResource}.GetAll
  parent: Octopus.Client.Repositories.Async.IGetAll{Octopus.Client.Model.ActionTemplateResource}
  definition: Octopus.Client.Repositories.Async.IGetAll`1.GetAll
  name: GetAll()
  nameWithType: IGetAll<ActionTemplateResource>.GetAll()
  fullName: Octopus.Client.Repositories.Async.IGetAll<Octopus.Client.Model.ActionTemplateResource>.GetAll()
  nameWithType.vb: IGetAll(Of ActionTemplateResource).GetAll()
  fullName.vb: Octopus.Client.Repositories.Async.IGetAll(Of Octopus.Client.Model.ActionTemplateResource).GetAll()
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGetAll`1.GetAll
    name: GetAll
    nameWithType: IGetAll<ActionTemplateResource>.GetAll
    fullName: Octopus.Client.Repositories.Async.IGetAll<Octopus.Client.Model.ActionTemplateResource>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGetAll`1.GetAll
    name: GetAll
    nameWithType: IGetAll(Of ActionTemplateResource).GetAll
    fullName: Octopus.Client.Repositories.Async.IGetAll(Of Octopus.Client.Model.ActionTemplateResource).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  isExternal: true
  name: Create(TResource, Object)
  nameWithType: ICreate<TResource>.Create(TResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create(TResource, System.Object)
  nameWithType.vb: ICreate(Of TResource).Create(TResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create(TResource, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate<TResource>.Create
    fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
    name: Create
    nameWithType: ICreate(Of TResource).Create
    fullName: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ActionTemplateResource}
  commentId: T:Octopus.Client.Repositories.Async.ICreate{Octopus.Client.Model.ActionTemplateResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.ICreate`1
  name: ICreate<ActionTemplateResource>
  nameWithType: ICreate<ActionTemplateResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<Octopus.Client.Model.ActionTemplateResource>
  nameWithType.vb: ICreate(Of ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of Octopus.Client.Model.ActionTemplateResource)
  name.vb: ICreate(Of ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  commentId: M:Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
  name: Modify(TResource)
  nameWithType: IModify<TResource>.Modify(TResource)
  fullName: Octopus.Client.Repositories.Async.IModify<TResource>.Modify(TResource)
  nameWithType.vb: IModify(Of TResource).Modify(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of TResource).Modify(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify<TResource>.Modify
    fullName: Octopus.Client.Repositories.Async.IModify<TResource>.Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1.Modify(`0)
    name: Modify
    nameWithType: IModify(Of TResource).Modify
    fullName: Octopus.Client.Repositories.Async.IModify(Of TResource).Modify
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ActionTemplateResource}
  commentId: T:Octopus.Client.Repositories.Async.IModify{Octopus.Client.Model.ActionTemplateResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IModify`1
  name: IModify<ActionTemplateResource>
  nameWithType: IModify<ActionTemplateResource>
  fullName: Octopus.Client.Repositories.Async.IModify<Octopus.Client.Model.ActionTemplateResource>
  nameWithType.vb: IModify(Of ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of Octopus.Client.Model.ActionTemplateResource)
  name.vb: IModify(Of ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  commentId: M:Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
  name: Delete(TResource)
  nameWithType: IDelete<TResource>.Delete(TResource)
  fullName: Octopus.Client.Repositories.Async.IDelete<TResource>.Delete(TResource)
  nameWithType.vb: IDelete(Of TResource).Delete(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of TResource).Delete(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete<TResource>.Delete
    fullName: Octopus.Client.Repositories.Async.IDelete<TResource>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1.Delete(`0)
    name: Delete
    nameWithType: IDelete(Of TResource).Delete
    fullName: Octopus.Client.Repositories.Async.IDelete(Of TResource).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ActionTemplateResource}
  commentId: T:Octopus.Client.Repositories.Async.IDelete{Octopus.Client.Model.ActionTemplateResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IDelete`1
  name: IDelete<ActionTemplateResource>
  nameWithType: IDelete<ActionTemplateResource>
  fullName: Octopus.Client.Repositories.Async.IDelete<Octopus.Client.Model.ActionTemplateResource>
  nameWithType.vb: IDelete(Of ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of Octopus.Client.Model.ActionTemplateResource)
  name.vb: IDelete(Of ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: IGet<TResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String)
  nameWithType.vb: IGet(Of TResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}
  commentId: T:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.ActionTemplateResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IGet`1
  name: IGet<ActionTemplateResource>
  nameWithType: IGet<ActionTemplateResource>
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.ActionTemplateResource>
  nameWithType.vb: IGet(Of ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.ActionTemplateResource)
  name.vb: IGet(Of ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  isExternal: true
  name: Get(String[])
  nameWithType: IGet<TResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(TResource)
  nameWithType: IGet<TResource>.Refresh(TResource)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh(TResource)
  nameWithType.vb: IGet(Of TResource).Refresh(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
  isExternal: true
  name: FindByName(String, String, Object)
  nameWithType: IFindByName<TResource>.FindByName(String, String, Object)
  fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>.FindByName(System.String, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TResource).FindByName(String, String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of TResource).FindByName(System.String, System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName<TResource>.FindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>.FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByName(System.String,System.String,System.Object)
    name: FindByName
    nameWithType: IFindByName(Of TResource).FindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName(Of TResource).FindByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}
  commentId: T:Octopus.Client.Repositories.Async.IFindByName{Octopus.Client.Model.ActionTemplateResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IFindByName`1
  name: IFindByName<ActionTemplateResource>
  nameWithType: IFindByName<ActionTemplateResource>
  fullName: Octopus.Client.Repositories.Async.IFindByName<Octopus.Client.Model.ActionTemplateResource>
  nameWithType.vb: IFindByName(Of ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of Octopus.Client.Model.ActionTemplateResource)
  name.vb: IFindByName(Of ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
  isExternal: true
  name: FindByNames(IEnumerable<String>, String, Object)
  nameWithType: IFindByName<TResource>.FindByNames(IEnumerable<String>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>.FindByNames(System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object)
  nameWithType.vb: IFindByName(Of TResource).FindByNames(IEnumerable(Of String), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of TResource).FindByNames(System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object)
  name.vb: FindByNames(IEnumerable(Of String), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName<TResource>.FindByNames
    fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>.FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1.FindByNames(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object)
    name: FindByNames
    nameWithType: IFindByName(Of TResource).FindByNames
    fullName: Octopus.Client.Repositories.Async.IFindByName(Of TResource).FindByNames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
  isExternal: true
  name: Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.Paginate(Func<ResourceCollection<TResource>, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate(System.Func<Octopus.Client.Model.ResourceCollection<TResource>, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate(System.Func(Of Octopus.Client.Model.ResourceCollection(Of TResource), System.Boolean), System.String, System.Object)
  name.vb: Paginate(Func(Of ResourceCollection(Of TResource), Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate<TResource>.Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.Paginate(System.Func{Octopus.Client.Model.ResourceCollection{`0},System.Boolean},System.String,System.Object)
    name: Paginate
    nameWithType: IPaginate(Of TResource).Paginate
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).Paginate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}
  commentId: T:Octopus.Client.Repositories.Async.IPaginate{Octopus.Client.Model.ActionTemplateResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IPaginate`1
  name: IPaginate<ActionTemplateResource>
  nameWithType: IPaginate<ActionTemplateResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<Octopus.Client.Model.ActionTemplateResource>
  nameWithType.vb: IPaginate(Of ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of Octopus.Client.Model.ActionTemplateResource)
  name.vb: IPaginate(Of ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindOne(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindOne(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindOne(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindOne(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate<TResource>.FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindOne(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindOne
    nameWithType: IPaginate(Of TResource).FindOne
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
  isExternal: true
  name: FindMany(Func<TResource, Boolean>, String, Object)
  nameWithType: IPaginate<TResource>.FindMany(Func<TResource, Boolean>, String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany(System.Func<TResource, System.Boolean>, System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindMany(Func(Of TResource, Boolean), String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany(System.Func(Of TResource, System.Boolean), System.String, System.Object)
  name.vb: FindMany(Func(Of TResource, Boolean), String, Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate<TResource>.FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindMany(System.Func{`0,System.Boolean},System.String,System.Object)
    name: FindMany
    nameWithType: IPaginate(Of TResource).FindMany
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
  isExternal: true
  name: FindAll(String, Object)
  nameWithType: IPaginate<TResource>.FindAll(String, Object)
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll(System.String, System.Object)
  nameWithType.vb: IPaginate(Of TResource).FindAll(String, Object)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll(System.String, System.Object)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate<TResource>.FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1.FindAll(System.String,System.Object)
    name: FindAll
    nameWithType: IPaginate(Of TResource).FindAll
    fullName: Octopus.Client.Repositories.Async.IPaginate(Of TResource).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGetAll`1.GetAll
  commentId: M:Octopus.Client.Repositories.Async.IGetAll`1.GetAll
  name: GetAll()
  nameWithType: IGetAll<TResource>.GetAll()
  fullName: Octopus.Client.Repositories.Async.IGetAll<TResource>.GetAll()
  nameWithType.vb: IGetAll(Of TResource).GetAll()
  fullName.vb: Octopus.Client.Repositories.Async.IGetAll(Of TResource).GetAll()
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGetAll`1.GetAll
    name: GetAll
    nameWithType: IGetAll<TResource>.GetAll
    fullName: Octopus.Client.Repositories.Async.IGetAll<TResource>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGetAll`1.GetAll
    name: GetAll
    nameWithType: IGetAll(Of TResource).GetAll
    fullName: Octopus.Client.Repositories.Async.IGetAll(Of TResource).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGetAll{Octopus.Client.Model.ActionTemplateResource}
  commentId: T:Octopus.Client.Repositories.Async.IGetAll{Octopus.Client.Model.ActionTemplateResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IGetAll`1
  name: IGetAll<ActionTemplateResource>
  nameWithType: IGetAll<ActionTemplateResource>
  fullName: Octopus.Client.Repositories.Async.IGetAll<Octopus.Client.Model.ActionTemplateResource>
  nameWithType.vb: IGetAll(Of ActionTemplateResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGetAll(Of Octopus.Client.Model.ActionTemplateResource)
  name.vb: IGetAll(Of ActionTemplateResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGetAll`1
    name: IGetAll
    nameWithType: IGetAll
    fullName: Octopus.Client.Repositories.Async.IGetAll
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGetAll`1
    name: IGetAll
    nameWithType: IGetAll
    fullName: Octopus.Client.Repositories.Async.IGetAll
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.ICreate`1
  commentId: T:Octopus.Client.Repositories.Async.ICreate`1
  name: ICreate<TResource>
  nameWithType: ICreate<TResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>
  nameWithType.vb: ICreate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource)
  name.vb: ICreate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.ICreate`1
    name: ICreate
    nameWithType: ICreate
    fullName: Octopus.Client.Repositories.Async.ICreate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IModify`1
  commentId: T:Octopus.Client.Repositories.Async.IModify`1
  name: IModify<TResource>
  nameWithType: IModify<TResource>
  fullName: Octopus.Client.Repositories.Async.IModify<TResource>
  nameWithType.vb: IModify(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IModify(Of TResource)
  name.vb: IModify(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IModify`1
    name: IModify
    nameWithType: IModify
    fullName: Octopus.Client.Repositories.Async.IModify
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IDelete`1
  commentId: T:Octopus.Client.Repositories.Async.IDelete`1
  name: IDelete<TResource>
  nameWithType: IDelete<TResource>
  fullName: Octopus.Client.Repositories.Async.IDelete<TResource>
  nameWithType.vb: IDelete(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IDelete(Of TResource)
  name.vb: IDelete(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IDelete`1
    name: IDelete
    nameWithType: IDelete
    fullName: Octopus.Client.Repositories.Async.IDelete
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1
  commentId: T:Octopus.Client.Repositories.Async.IGet`1
  name: IGet<TResource>
  nameWithType: IGet<TResource>
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>
  nameWithType.vb: IGet(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource)
  name.vb: IGet(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IFindByName`1
  commentId: T:Octopus.Client.Repositories.Async.IFindByName`1
  name: IFindByName<TResource>
  nameWithType: IFindByName<TResource>
  fullName: Octopus.Client.Repositories.Async.IFindByName<TResource>
  nameWithType.vb: IFindByName(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IFindByName(Of TResource)
  name.vb: IFindByName(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IFindByName`1
    name: IFindByName
    nameWithType: IFindByName
    fullName: Octopus.Client.Repositories.Async.IFindByName
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IPaginate`1
  commentId: T:Octopus.Client.Repositories.Async.IPaginate`1
  name: IPaginate<TResource>
  nameWithType: IPaginate<TResource>
  fullName: Octopus.Client.Repositories.Async.IPaginate<TResource>
  nameWithType.vb: IPaginate(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IPaginate(Of TResource)
  name.vb: IPaginate(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IPaginate`1
    name: IPaginate
    nameWithType: IPaginate
    fullName: Octopus.Client.Repositories.Async.IPaginate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGetAll`1
  commentId: T:Octopus.Client.Repositories.Async.IGetAll`1
  name: IGetAll<TResource>
  nameWithType: IGetAll<TResource>
  fullName: Octopus.Client.Repositories.Async.IGetAll<TResource>
  nameWithType.vb: IGetAll(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGetAll(Of TResource)
  name.vb: IGetAll(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGetAll`1
    name: IGetAll
    nameWithType: IGetAll
    fullName: Octopus.Client.Repositories.Async.IGetAll
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGetAll`1
    name: IGetAll
    nameWithType: IGetAll
    fullName: Octopus.Client.Repositories.Async.IGetAll
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository.Search*
  commentId: Overload:Octopus.Client.Repositories.Async.IActionTemplateRepository.Search
  name: Search
  nameWithType: IActionTemplateRepository.Search
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository.Search
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Octopus.Client.Model.ActionTemplateSearchResource}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Octopus.Client.Model.ActionTemplateSearchResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<ActionTemplateSearchResource>>
  nameWithType: Task<List<ActionTemplateSearchResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Octopus.Client.Model.ActionTemplateSearchResource>>
  nameWithType.vb: Task(Of List(Of ActionTemplateSearchResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Octopus.Client.Model.ActionTemplateSearchResource))
  name.vb: Task(Of List(Of ActionTemplateSearchResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateSearchResource
    name: ActionTemplateSearchResource
    nameWithType: ActionTemplateSearchResource
    fullName: Octopus.Client.Model.ActionTemplateSearchResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateSearchResource
    name: ActionTemplateSearchResource
    nameWithType: ActionTemplateSearchResource
    fullName: Octopus.Client.Model.ActionTemplateSearchResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository.GetVersion*
  commentId: Overload:Octopus.Client.Repositories.Async.IActionTemplateRepository.GetVersion
  name: GetVersion
  nameWithType: IActionTemplateRepository.GetVersion
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository.GetVersion
- uid: Octopus.Client.Model.ActionTemplateResource
  commentId: T:Octopus.Client.Model.ActionTemplateResource
  parent: Octopus.Client.Model
  name: ActionTemplateResource
  nameWithType: ActionTemplateResource
  fullName: Octopus.Client.Model.ActionTemplateResource
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.ActionTemplateResource}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.ActionTemplateResource}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ActionTemplateResource>
  nameWithType: Task<ActionTemplateResource>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.ActionTemplateResource>
  nameWithType.vb: Task(Of ActionTemplateResource)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.ActionTemplateResource)
  name.vb: Task(Of ActionTemplateResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionTemplateResource
    name: ActionTemplateResource
    nameWithType: ActionTemplateResource
    fullName: Octopus.Client.Model.ActionTemplateResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model
  commentId: N:Octopus.Client.Model
  name: Octopus.Client.Model
  nameWithType: Octopus.Client.Model
  fullName: Octopus.Client.Model
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository.UpdateActions*
  commentId: Overload:Octopus.Client.Repositories.Async.IActionTemplateRepository.UpdateActions
  name: UpdateActions
  nameWithType: IActionTemplateRepository.UpdateActions
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository.UpdateActions
- uid: Octopus.Client.Model.ActionsUpdateResource
  commentId: T:Octopus.Client.Model.ActionsUpdateResource
  parent: Octopus.Client.Model
  name: ActionsUpdateResource
  nameWithType: ActionsUpdateResource
  fullName: Octopus.Client.Model.ActionsUpdateResource
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.ActionUpdateResultResource[]}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.ActionUpdateResultResource[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ActionUpdateResultResource[]>
  nameWithType: Task<ActionUpdateResultResource[]>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.ActionUpdateResultResource[]>
  nameWithType.vb: Task(Of ActionUpdateResultResource())
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.ActionUpdateResultResource())
  name.vb: Task(Of ActionUpdateResultResource())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ActionUpdateResultResource
    name: ActionUpdateResultResource
    nameWithType: ActionUpdateResultResource
    fullName: Octopus.Client.Model.ActionUpdateResultResource
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ActionUpdateResultResource
    name: ActionUpdateResultResource
    nameWithType: ActionUpdateResultResource
    fullName: Octopus.Client.Model.ActionUpdateResultResource
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IActionTemplateRepository.SetLogo*
  commentId: Overload:Octopus.Client.Repositories.Async.IActionTemplateRepository.SetLogo
  name: SetLogo
  nameWithType: IActionTemplateRepository.SetLogo
  fullName: Octopus.Client.Repositories.Async.IActionTemplateRepository.SetLogo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
