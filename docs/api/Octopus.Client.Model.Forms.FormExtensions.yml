### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Model.Forms.FormExtensions
  commentId: T:Octopus.Client.Model.Forms.FormExtensions
  id: FormExtensions
  parent: Octopus.Client.Model.Forms
  children:
  - Octopus.Client.Model.Forms.FormExtensions.AddElement(Octopus.Client.Model.Forms.Form,System.String,Octopus.Client.Model.Forms.Control,System.String,System.Boolean)
  - Octopus.Client.Model.Forms.FormExtensions.GetCoercedValue(Octopus.Client.Model.Forms.Form,System.String)
  - Octopus.Client.Model.Forms.FormExtensions.SetValue(Octopus.Client.Model.Forms.Form,System.String,System.String)
  - Octopus.Client.Model.Forms.FormExtensions.UpdateValues(Octopus.Client.Model.Forms.Form,System.Collections.Generic.IDictionary{System.String,System.String})
  - Octopus.Client.Model.Forms.FormExtensions.Validate(Octopus.Client.Model.Forms.Form)
  langs:
  - csharp
  - vb
  name: FormExtensions
  nameWithType: FormExtensions
  fullName: Octopus.Client.Model.Forms.FormExtensions
  type: Class
  source:
    remote:
      path: source/Octopus.Client/Model/Forms/FormExtensions.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: FormExtensions
    path: ../source/Octopus.Client/Model/Forms/FormExtensions.cs
    startLine: 6
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Forms
  syntax:
    content: public static class FormExtensions
    content.vb: Public Module FormExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Octopus.Client.Model.Forms.FormExtensions.AddElement(Octopus.Client.Model.Forms.Form,System.String,Octopus.Client.Model.Forms.Control,System.String,System.Boolean)
  commentId: M:Octopus.Client.Model.Forms.FormExtensions.AddElement(Octopus.Client.Model.Forms.Form,System.String,Octopus.Client.Model.Forms.Control,System.String,System.Boolean)
  id: AddElement(Octopus.Client.Model.Forms.Form,System.String,Octopus.Client.Model.Forms.Control,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Octopus.Client.Model.Forms.FormExtensions
  langs:
  - csharp
  - vb
  name: AddElement(Form, String, Control, String, Boolean)
  nameWithType: FormExtensions.AddElement(Form, String, Control, String, Boolean)
  fullName: Octopus.Client.Model.Forms.FormExtensions.AddElement(Octopus.Client.Model.Forms.Form, System.String, Octopus.Client.Model.Forms.Control, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Forms/FormExtensions.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: AddElement
    path: ../source/Octopus.Client/Model/Forms/FormExtensions.cs
    startLine: 8
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Forms
  syntax:
    content: public static void AddElement(this Form form, string name, Control element, string initialValue = null, bool isValueRequired = false)
    parameters:
    - id: form
      type: Octopus.Client.Model.Forms.Form
    - id: name
      type: System.String
    - id: element
      type: Octopus.Client.Model.Forms.Control
    - id: initialValue
      type: System.String
    - id: isValueRequired
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddElement(form As Form, name As String, element As Control, initialValue As String = Nothing, isValueRequired As Boolean = False)
  overload: Octopus.Client.Model.Forms.FormExtensions.AddElement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Forms.FormExtensions.SetValue(Octopus.Client.Model.Forms.Form,System.String,System.String)
  commentId: M:Octopus.Client.Model.Forms.FormExtensions.SetValue(Octopus.Client.Model.Forms.Form,System.String,System.String)
  id: SetValue(Octopus.Client.Model.Forms.Form,System.String,System.String)
  isExtensionMethod: true
  parent: Octopus.Client.Model.Forms.FormExtensions
  langs:
  - csharp
  - vb
  name: SetValue(Form, String, String)
  nameWithType: FormExtensions.SetValue(Form, String, String)
  fullName: Octopus.Client.Model.Forms.FormExtensions.SetValue(Octopus.Client.Model.Forms.Form, System.String, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Forms/FormExtensions.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: SetValue
    path: ../source/Octopus.Client/Model/Forms/FormExtensions.cs
    startLine: 20
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Forms
  syntax:
    content: public static void SetValue(this Form form, string name, string value)
    parameters:
    - id: form
      type: Octopus.Client.Model.Forms.Form
    - id: name
      type: System.String
    - id: value
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetValue(form As Form, name As String, value As String)
  overload: Octopus.Client.Model.Forms.FormExtensions.SetValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Forms.FormExtensions.GetCoercedValue(Octopus.Client.Model.Forms.Form,System.String)
  commentId: M:Octopus.Client.Model.Forms.FormExtensions.GetCoercedValue(Octopus.Client.Model.Forms.Form,System.String)
  id: GetCoercedValue(Octopus.Client.Model.Forms.Form,System.String)
  isExtensionMethod: true
  parent: Octopus.Client.Model.Forms.FormExtensions
  langs:
  - csharp
  - vb
  name: GetCoercedValue(Form, String)
  nameWithType: FormExtensions.GetCoercedValue(Form, String)
  fullName: Octopus.Client.Model.Forms.FormExtensions.GetCoercedValue(Octopus.Client.Model.Forms.Form, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Forms/FormExtensions.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetCoercedValue
    path: ../source/Octopus.Client/Model/Forms/FormExtensions.cs
    startLine: 46
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Forms
  syntax:
    content: public static object GetCoercedValue(this Form form, string name)
    parameters:
    - id: form
      type: Octopus.Client.Model.Forms.Form
    - id: name
      type: System.String
    return:
      type: System.Object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCoercedValue(form As Form, name As String) As Object
  overload: Octopus.Client.Model.Forms.FormExtensions.GetCoercedValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Forms.FormExtensions.UpdateValues(Octopus.Client.Model.Forms.Form,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Octopus.Client.Model.Forms.FormExtensions.UpdateValues(Octopus.Client.Model.Forms.Form,System.Collections.Generic.IDictionary{System.String,System.String})
  id: UpdateValues(Octopus.Client.Model.Forms.Form,System.Collections.Generic.IDictionary{System.String,System.String})
  isExtensionMethod: true
  parent: Octopus.Client.Model.Forms.FormExtensions
  langs:
  - csharp
  - vb
  name: UpdateValues(Form, IDictionary<String, String>)
  nameWithType: FormExtensions.UpdateValues(Form, IDictionary<String, String>)
  fullName: Octopus.Client.Model.Forms.FormExtensions.UpdateValues(Octopus.Client.Model.Forms.Form, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Forms/FormExtensions.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: UpdateValues
    path: ../source/Octopus.Client/Model/Forms/FormExtensions.cs
    startLine: 58
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Forms
  syntax:
    content: public static void UpdateValues(this Form form, IDictionary<string, string> values)
    parameters:
    - id: form
      type: Octopus.Client.Model.Forms.Form
    - id: values
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub UpdateValues(form As Form, values As IDictionary(Of String, String))
  overload: Octopus.Client.Model.Forms.FormExtensions.UpdateValues*
  nameWithType.vb: FormExtensions.UpdateValues(Form, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Octopus.Client.Model.Forms.FormExtensions.UpdateValues(Octopus.Client.Model.Forms.Form, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: UpdateValues(Form, IDictionary(Of String, String))
- uid: Octopus.Client.Model.Forms.FormExtensions.Validate(Octopus.Client.Model.Forms.Form)
  commentId: M:Octopus.Client.Model.Forms.FormExtensions.Validate(Octopus.Client.Model.Forms.Form)
  id: Validate(Octopus.Client.Model.Forms.Form)
  isExtensionMethod: true
  parent: Octopus.Client.Model.Forms.FormExtensions
  langs:
  - csharp
  - vb
  name: Validate(Form)
  nameWithType: FormExtensions.Validate(Form)
  fullName: Octopus.Client.Model.Forms.FormExtensions.Validate(Octopus.Client.Model.Forms.Form)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Forms/FormExtensions.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Validate
    path: ../source/Octopus.Client/Model/Forms/FormExtensions.cs
    startLine: 69
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Forms
  syntax:
    content: public static IList<string> Validate(this Form form)
    parameters:
    - id: form
      type: Octopus.Client.Model.Forms.Form
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Validate(form As Form) As IList(Of String)
  overload: Octopus.Client.Model.Forms.FormExtensions.Validate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Octopus.Client.Model.Forms
  commentId: N:Octopus.Client.Model.Forms
  name: Octopus.Client.Model.Forms
  nameWithType: Octopus.Client.Model.Forms
  fullName: Octopus.Client.Model.Forms
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Octopus.Client.Model.Forms.FormExtensions.AddElement*
  commentId: Overload:Octopus.Client.Model.Forms.FormExtensions.AddElement
  name: AddElement
  nameWithType: FormExtensions.AddElement
  fullName: Octopus.Client.Model.Forms.FormExtensions.AddElement
- uid: Octopus.Client.Model.Forms.Form
  commentId: T:Octopus.Client.Model.Forms.Form
  parent: Octopus.Client.Model.Forms
  name: Form
  nameWithType: Form
  fullName: Octopus.Client.Model.Forms.Form
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Octopus.Client.Model.Forms.Control
  commentId: T:Octopus.Client.Model.Forms.Control
  parent: Octopus.Client.Model.Forms
  name: Control
  nameWithType: Control
  fullName: Octopus.Client.Model.Forms.Control
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Octopus.Client.Model.Forms.FormExtensions.SetValue*
  commentId: Overload:Octopus.Client.Model.Forms.FormExtensions.SetValue
  name: SetValue
  nameWithType: FormExtensions.SetValue
  fullName: Octopus.Client.Model.Forms.FormExtensions.SetValue
- uid: Octopus.Client.Model.Forms.FormExtensions.GetCoercedValue*
  commentId: Overload:Octopus.Client.Model.Forms.FormExtensions.GetCoercedValue
  name: GetCoercedValue
  nameWithType: FormExtensions.GetCoercedValue
  fullName: Octopus.Client.Model.Forms.FormExtensions.GetCoercedValue
- uid: Octopus.Client.Model.Forms.FormExtensions.UpdateValues*
  commentId: Overload:Octopus.Client.Model.Forms.FormExtensions.UpdateValues
  name: UpdateValues
  nameWithType: FormExtensions.UpdateValues
  fullName: Octopus.Client.Model.Forms.FormExtensions.UpdateValues
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Octopus.Client.Model.Forms.FormExtensions.Validate*
  commentId: Overload:Octopus.Client.Model.Forms.FormExtensions.Validate
  name: Validate
  nameWithType: FormExtensions.Validate
  fullName: Octopus.Client.Model.Forms.FormExtensions.Validate
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
