### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Model.Versioning.IVersionComparer
  commentId: T:Octopus.Client.Model.Versioning.IVersionComparer
  id: IVersionComparer
  parent: Octopus.Client.Model.Versioning
  children: []
  langs:
  - csharp
  - vb
  name: IVersionComparer
  nameWithType: IVersionComparer
  fullName: Octopus.Client.Model.Versioning.IVersionComparer
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/IVersionComparer.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IVersionComparer
    path: ../source/Octopus.Client/Model/Versioning/IVersionComparer.cs
    startLine: 11
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nIVersionComparer represents a version comparer capable of sorting and determining the equality of\nSemanticVersion objects.\n"
  example: []
  syntax:
    content: 'public interface IVersionComparer : IEqualityComparer<StrictSemanticVersion>, IComparer<StrictSemanticVersion>'
    content.vb: >-
      Public Interface IVersionComparer
          Inherits IEqualityComparer(Of StrictSemanticVersion), IComparer(Of StrictSemanticVersion)
  inheritedMembers:
  - System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.GetHashCode(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - System.Collections.Generic.IComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Compare(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
references:
- uid: Octopus.Client.Model.Versioning
  commentId: N:Octopus.Client.Model.Versioning
  name: Octopus.Client.Model.Versioning
  nameWithType: Octopus.Client.Model.Versioning
  fullName: Octopus.Client.Model.Versioning
- uid: System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  definition: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  name: Equals(StrictSemanticVersion, StrictSemanticVersion)
  nameWithType: IEqualityComparer<StrictSemanticVersion>.Equals(StrictSemanticVersion, StrictSemanticVersion)
  fullName: System.Collections.Generic.IEqualityComparer<Octopus.Client.Model.Versioning.StrictSemanticVersion>.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  nameWithType.vb: IEqualityComparer(Of StrictSemanticVersion).Equals(StrictSemanticVersion, StrictSemanticVersion)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer<StrictSemanticVersion>.Equals
    fullName: System.Collections.Generic.IEqualityComparer<Octopus.Client.Model.Versioning.StrictSemanticVersion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer(Of StrictSemanticVersion).Equals
    fullName: System.Collections.Generic.IEqualityComparer(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.GetHashCode(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.GetHashCode(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  definition: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  name: GetHashCode(StrictSemanticVersion)
  nameWithType: IEqualityComparer<StrictSemanticVersion>.GetHashCode(StrictSemanticVersion)
  fullName: System.Collections.Generic.IEqualityComparer<Octopus.Client.Model.Versioning.StrictSemanticVersion>.GetHashCode(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  nameWithType.vb: IEqualityComparer(Of StrictSemanticVersion).GetHashCode(StrictSemanticVersion)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).GetHashCode(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer<StrictSemanticVersion>.GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer<Octopus.Client.Model.Versioning.StrictSemanticVersion>.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer(Of StrictSemanticVersion).GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Compare(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:System.Collections.Generic.IComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Compare(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: System.Collections.Generic.IComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(StrictSemanticVersion, StrictSemanticVersion)
  nameWithType: IComparer<StrictSemanticVersion>.Compare(StrictSemanticVersion, StrictSemanticVersion)
  fullName: System.Collections.Generic.IComparer<Octopus.Client.Model.Versioning.StrictSemanticVersion>.Compare(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  nameWithType.vb: IComparer(Of StrictSemanticVersion).Compare(StrictSemanticVersion, StrictSemanticVersion)
  fullName.vb: System.Collections.Generic.IComparer(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).Compare(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<StrictSemanticVersion>.Compare
    fullName: System.Collections.Generic.IComparer<Octopus.Client.Model.Versioning.StrictSemanticVersion>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of StrictSemanticVersion).Compare
    fullName: System.Collections.Generic.IComparer(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  isExternal: true
  name: Equals(T, T)
  nameWithType: IEqualityComparer<T>.Equals(T, T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)
  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer<T>.Equals
    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer(Of T).Equals
    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  commentId: T:System.Collections.Generic.IEqualityComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<StrictSemanticVersion>
  nameWithType: IEqualityComparer<StrictSemanticVersion>
  fullName: System.Collections.Generic.IEqualityComparer<Octopus.Client.Model.Versioning.StrictSemanticVersion>
  nameWithType.vb: IEqualityComparer(Of StrictSemanticVersion)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of Octopus.Client.Model.Versioning.StrictSemanticVersion)
  name.vb: IEqualityComparer(Of StrictSemanticVersion)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  isExternal: true
  name: GetHashCode(T)
  nameWithType: IEqualityComparer<T>.GetHashCode(T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)
  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer<T>.GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer(Of T).GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  commentId: T:System.Collections.Generic.IComparer{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<StrictSemanticVersion>
  nameWithType: IComparer<StrictSemanticVersion>
  fullName: System.Collections.Generic.IComparer<Octopus.Client.Model.Versioning.StrictSemanticVersion>
  nameWithType.vb: IComparer(Of StrictSemanticVersion)
  fullName.vb: System.Collections.Generic.IComparer(Of Octopus.Client.Model.Versioning.StrictSemanticVersion)
  name.vb: IComparer(Of StrictSemanticVersion)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
