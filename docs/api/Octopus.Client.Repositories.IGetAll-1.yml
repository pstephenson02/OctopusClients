### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.IGetAll`1
  commentId: T:Octopus.Client.Repositories.IGetAll`1
  id: IGetAll`1
  parent: Octopus.Client.Repositories
  children:
  - Octopus.Client.Repositories.IGetAll`1.GetAll
  langs:
  - csharp
  - vb
  name: IGetAll<TResource>
  nameWithType: IGetAll<TResource>
  fullName: Octopus.Client.Repositories.IGetAll<TResource>
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/IGetAll.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IGetAll
    path: ../source/Octopus.Client/Repositories/IGetAll.cs
    startLine: 5
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: public interface IGetAll<TResource>
    typeParameters:
    - id: TResource
    content.vb: Public Interface IGetAll(Of TResource)
  nameWithType.vb: IGetAll(Of TResource)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Octopus.Client.Repositories.IGetAll(Of TResource)
  name.vb: IGetAll(Of TResource)
- uid: Octopus.Client.Repositories.IGetAll`1.GetAll
  commentId: M:Octopus.Client.Repositories.IGetAll`1.GetAll
  id: GetAll
  parent: Octopus.Client.Repositories.IGetAll`1
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: IGetAll<TResource>.GetAll()
  fullName: Octopus.Client.Repositories.IGetAll<TResource>.GetAll()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/IGetAll.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetAll
    path: ../source/Octopus.Client/Repositories/IGetAll.cs
    startLine: 7
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories
  syntax:
    content: List<TResource> GetAll()
    return:
      type: System.Collections.Generic.List{{TResource}}
    content.vb: Function GetAll As List(Of TResource)
  overload: Octopus.Client.Repositories.IGetAll`1.GetAll*
  nameWithType.vb: IGetAll(Of TResource).GetAll()
  fullName.vb: Octopus.Client.Repositories.IGetAll(Of TResource).GetAll()
references:
- uid: Octopus.Client.Repositories
  commentId: N:Octopus.Client.Repositories
  name: Octopus.Client.Repositories
  nameWithType: Octopus.Client.Repositories
  fullName: Octopus.Client.Repositories
- uid: Octopus.Client.Repositories.IGetAll`1.GetAll*
  commentId: Overload:Octopus.Client.Repositories.IGetAll`1.GetAll
  name: GetAll
  nameWithType: IGetAll<TResource>.GetAll
  fullName: Octopus.Client.Repositories.IGetAll<TResource>.GetAll
  nameWithType.vb: IGetAll(Of TResource).GetAll
  fullName.vb: Octopus.Client.Repositories.IGetAll(Of TResource).GetAll
- uid: System.Collections.Generic.List{{TResource}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TResource>
  nameWithType: List<TResource>
  fullName: System.Collections.Generic.List<TResource>
  nameWithType.vb: List(Of TResource)
  fullName.vb: System.Collections.Generic.List(Of TResource)
  name.vb: List(Of TResource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
