### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.ICreate`1
  commentId: T:Octopus.Client.Repositories.Async.ICreate`1
  id: ICreate`1
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  langs:
  - csharp
  - vb
  name: ICreate<TResource>
  nameWithType: ICreate<TResource>
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ICreate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ICreate
    path: ../source/Octopus.Client/Repositories/Async/ICreate.cs
    startLine: 5
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: public interface ICreate<TResource>
    typeParameters:
    - id: TResource
    content.vb: Public Interface ICreate(Of TResource)
  nameWithType.vb: ICreate(Of TResource)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource)
  name.vb: ICreate(Of TResource)
- uid: Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  commentId: M:Octopus.Client.Repositories.Async.ICreate`1.Create(`0,System.Object)
  id: Create(`0,System.Object)
  parent: Octopus.Client.Repositories.Async.ICreate`1
  langs:
  - csharp
  - vb
  name: Create(TResource, Object)
  nameWithType: ICreate<TResource>.Create(TResource, Object)
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create(TResource, System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/ICreate.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Create
    path: ../source/Octopus.Client/Repositories/Async/ICreate.cs
    startLine: 7
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<TResource> Create(TResource resource, object pathParameters = null)
    parameters:
    - id: resource
      type: '{TResource}'
    - id: pathParameters
      type: System.Object
    return:
      type: System.Threading.Tasks.Task{{TResource}}
    content.vb: Function Create(resource As TResource, pathParameters As Object = Nothing) As Task(Of TResource)
  overload: Octopus.Client.Repositories.Async.ICreate`1.Create*
  nameWithType.vb: ICreate(Of TResource).Create(TResource, Object)
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create(TResource, System.Object)
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.ICreate`1.Create*
  commentId: Overload:Octopus.Client.Repositories.Async.ICreate`1.Create
  name: Create
  nameWithType: ICreate<TResource>.Create
  fullName: Octopus.Client.Repositories.Async.ICreate<TResource>.Create
  nameWithType.vb: ICreate(Of TResource).Create
  fullName.vb: Octopus.Client.Repositories.Async.ICreate(Of TResource).Create
- uid: '{TResource}'
  commentId: '!:TResource'
  definition: TResource
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task{{TResource}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResource>
  nameWithType: Task<TResource>
  fullName: System.Threading.Tasks.Task<TResource>
  nameWithType.vb: Task(Of TResource)
  fullName.vb: System.Threading.Tasks.Task(Of TResource)
  name.vb: Task(Of TResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: TResource
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
