### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository
  commentId: T:Octopus.Client.Repositories.Async.IInterruptionRepository
  id: IInterruptionRepository
  parent: Octopus.Client.Repositories.Async
  children:
  - Octopus.Client.Repositories.Async.IInterruptionRepository.GetResponsibleUser(Octopus.Client.Model.InterruptionResource)
  - Octopus.Client.Repositories.Async.IInterruptionRepository.List(System.Int32,System.Nullable{System.Int32},System.Boolean,System.String)
  - Octopus.Client.Repositories.Async.IInterruptionRepository.Submit(Octopus.Client.Model.InterruptionResource)
  - Octopus.Client.Repositories.Async.IInterruptionRepository.TakeResponsibility(Octopus.Client.Model.InterruptionResource)
  langs:
  - csharp
  - vb
  name: IInterruptionRepository
  nameWithType: IInterruptionRepository
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository
  type: Interface
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IInterruptionRepository
    path: ../source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
    startLine: 6
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: 'public interface IInterruptionRepository : IGet<InterruptionResource>'
    content.vb: >-
      Public Interface IInterruptionRepository
          Inherits IGet(Of InterruptionResource)
  inheritedMembers:
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Get(System.String)
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Get(System.String[])
  - Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Refresh(Octopus.Client.Model.InterruptionResource)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository.List(System.Int32,System.Nullable{System.Int32},System.Boolean,System.String)
  commentId: M:Octopus.Client.Repositories.Async.IInterruptionRepository.List(System.Int32,System.Nullable{System.Int32},System.Boolean,System.String)
  id: List(System.Int32,System.Nullable{System.Int32},System.Boolean,System.String)
  parent: Octopus.Client.Repositories.Async.IInterruptionRepository
  langs:
  - csharp
  - vb
  name: List(Int32, Nullable<Int32>, Boolean, String)
  nameWithType: IInterruptionRepository.List(Int32, Nullable<Int32>, Boolean, String)
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository.List(System.Int32, System.Nullable<System.Int32>, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: List
    path: ../source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
    startLine: 16
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  summary: "\n\n"
  example: []
  syntax:
    content: Task<ResourceCollection<InterruptionResource>> List(int skip = 0, int? take = default(int? ), bool pendingOnly = false, string regardingDocumentId = null)
    parameters:
    - id: skip
      type: System.Int32
      description: Number of records to skip
    - id: take
      type: System.Nullable{System.Int32}
      description: Number of records to take (First supported in Server 3.14.15)
    - id: pendingOnly
      type: System.Boolean
      description: ''
    - id: regardingDocumentId
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.InterruptionResource}}
      description: ''
    content.vb: Function List(skip As Integer = 0, take As Integer? = Nothing, pendingOnly As Boolean = False, regardingDocumentId As String = Nothing) As Task(Of ResourceCollection(Of InterruptionResource))
  overload: Octopus.Client.Repositories.Async.IInterruptionRepository.List*
  nameWithType.vb: IInterruptionRepository.List(Int32, Nullable(Of Int32), Boolean, String)
  fullName.vb: Octopus.Client.Repositories.Async.IInterruptionRepository.List(System.Int32, System.Nullable(Of System.Int32), System.Boolean, System.String)
  name.vb: List(Int32, Nullable(Of Int32), Boolean, String)
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository.Submit(Octopus.Client.Model.InterruptionResource)
  commentId: M:Octopus.Client.Repositories.Async.IInterruptionRepository.Submit(Octopus.Client.Model.InterruptionResource)
  id: Submit(Octopus.Client.Model.InterruptionResource)
  parent: Octopus.Client.Repositories.Async.IInterruptionRepository
  langs:
  - csharp
  - vb
  name: Submit(InterruptionResource)
  nameWithType: IInterruptionRepository.Submit(InterruptionResource)
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository.Submit(Octopus.Client.Model.InterruptionResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Submit
    path: ../source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
    startLine: 17
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task Submit(InterruptionResource interruption)
    parameters:
    - id: interruption
      type: Octopus.Client.Model.InterruptionResource
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function Submit(interruption As InterruptionResource) As Task
  overload: Octopus.Client.Repositories.Async.IInterruptionRepository.Submit*
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository.TakeResponsibility(Octopus.Client.Model.InterruptionResource)
  commentId: M:Octopus.Client.Repositories.Async.IInterruptionRepository.TakeResponsibility(Octopus.Client.Model.InterruptionResource)
  id: TakeResponsibility(Octopus.Client.Model.InterruptionResource)
  parent: Octopus.Client.Repositories.Async.IInterruptionRepository
  langs:
  - csharp
  - vb
  name: TakeResponsibility(InterruptionResource)
  nameWithType: IInterruptionRepository.TakeResponsibility(InterruptionResource)
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository.TakeResponsibility(Octopus.Client.Model.InterruptionResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: TakeResponsibility
    path: ../source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
    startLine: 18
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task TakeResponsibility(InterruptionResource interruption)
    parameters:
    - id: interruption
      type: Octopus.Client.Model.InterruptionResource
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function TakeResponsibility(interruption As InterruptionResource) As Task
  overload: Octopus.Client.Repositories.Async.IInterruptionRepository.TakeResponsibility*
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository.GetResponsibleUser(Octopus.Client.Model.InterruptionResource)
  commentId: M:Octopus.Client.Repositories.Async.IInterruptionRepository.GetResponsibleUser(Octopus.Client.Model.InterruptionResource)
  id: GetResponsibleUser(Octopus.Client.Model.InterruptionResource)
  parent: Octopus.Client.Repositories.Async.IInterruptionRepository
  langs:
  - csharp
  - vb
  name: GetResponsibleUser(InterruptionResource)
  nameWithType: IInterruptionRepository.GetResponsibleUser(InterruptionResource)
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository.GetResponsibleUser(Octopus.Client.Model.InterruptionResource)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetResponsibleUser
    path: ../source/Octopus.Client/Repositories/Async/InterruptionRepository.cs
    startLine: 19
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Repositories.Async
  syntax:
    content: Task<UserResource> GetResponsibleUser(InterruptionResource interruption)
    parameters:
    - id: interruption
      type: Octopus.Client.Model.InterruptionResource
    return:
      type: System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
    content.vb: Function GetResponsibleUser(interruption As InterruptionResource) As Task(Of UserResource)
  overload: Octopus.Client.Repositories.Async.IInterruptionRepository.GetResponsibleUser*
references:
- uid: Octopus.Client.Repositories.Async
  commentId: N:Octopus.Client.Repositories.Async
  name: Octopus.Client.Repositories.Async
  nameWithType: Octopus.Client.Repositories.Async
  fullName: Octopus.Client.Repositories.Async
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Get(System.String)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  name: Get(String)
  nameWithType: IGet<InterruptionResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.InterruptionResource>.Get(System.String)
  nameWithType.vb: IGet(Of InterruptionResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.InterruptionResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<InterruptionResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.InterruptionResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of InterruptionResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.InterruptionResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Get(System.String[])
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  name: Get(String[])
  nameWithType: IGet<InterruptionResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.InterruptionResource>.Get(System.String[])
  nameWithType.vb: IGet(Of InterruptionResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.InterruptionResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<InterruptionResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.InterruptionResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of InterruptionResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.InterruptionResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Refresh(Octopus.Client.Model.InterruptionResource)
  commentId: M:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}.Refresh(Octopus.Client.Model.InterruptionResource)
  parent: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}
  definition: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(InterruptionResource)
  nameWithType: IGet<InterruptionResource>.Refresh(InterruptionResource)
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.InterruptionResource>.Refresh(Octopus.Client.Model.InterruptionResource)
  nameWithType.vb: IGet(Of InterruptionResource).Refresh(InterruptionResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.InterruptionResource).Refresh(Octopus.Client.Model.InterruptionResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<InterruptionResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.InterruptionResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.InterruptionResource
    name: InterruptionResource
    nameWithType: InterruptionResource
    fullName: Octopus.Client.Model.InterruptionResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of InterruptionResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.InterruptionResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.InterruptionResource
    name: InterruptionResource
    nameWithType: InterruptionResource
    fullName: Octopus.Client.Model.InterruptionResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: IGet<TResource>.Get(String)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String)
  nameWithType.vb: IGet(Of TResource).Get(String)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String)
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}
  commentId: T:Octopus.Client.Repositories.Async.IGet{Octopus.Client.Model.InterruptionResource}
  parent: Octopus.Client.Repositories.Async
  definition: Octopus.Client.Repositories.Async.IGet`1
  name: IGet<InterruptionResource>
  nameWithType: IGet<InterruptionResource>
  fullName: Octopus.Client.Repositories.Async.IGet<Octopus.Client.Model.InterruptionResource>
  nameWithType.vb: IGet(Of InterruptionResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of Octopus.Client.Model.InterruptionResource)
  name.vb: IGet(Of InterruptionResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.InterruptionResource
    name: InterruptionResource
    nameWithType: InterruptionResource
    fullName: Octopus.Client.Model.InterruptionResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.InterruptionResource
    name: InterruptionResource
    nameWithType: InterruptionResource
    fullName: Octopus.Client.Model.InterruptionResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
  isExternal: true
  name: Get(String[])
  nameWithType: IGet<TResource>.Get(String[])
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get(System.String[])
  nameWithType.vb: IGet(Of TResource).Get(String())
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Get(System.String())
  name.vb: Get(String())
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet<TResource>.Get
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Get(System.String[])
    name: Get
    nameWithType: IGet(Of TResource).Get
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  commentId: M:Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
  name: Refresh(TResource)
  nameWithType: IGet<TResource>.Refresh(TResource)
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh(TResource)
  nameWithType.vb: IGet(Of TResource).Refresh(TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh(TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet<TResource>.Refresh
    fullName: Octopus.Client.Repositories.Async.IGet<TResource>.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1.Refresh(`0)
    name: Refresh
    nameWithType: IGet(Of TResource).Refresh
    fullName: Octopus.Client.Repositories.Async.IGet(Of TResource).Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IGet`1
  commentId: T:Octopus.Client.Repositories.Async.IGet`1
  name: IGet<TResource>
  nameWithType: IGet<TResource>
  fullName: Octopus.Client.Repositories.Async.IGet<TResource>
  nameWithType.vb: IGet(Of TResource)
  fullName.vb: Octopus.Client.Repositories.Async.IGet(Of TResource)
  name.vb: IGet(Of TResource)
  spec.csharp:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Octopus.Client.Repositories.Async.IGet`1
    name: IGet
    nameWithType: IGet
    fullName: Octopus.Client.Repositories.Async.IGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository.List*
  commentId: Overload:Octopus.Client.Repositories.Async.IInterruptionRepository.List
  name: List
  nameWithType: IInterruptionRepository.List
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository.List
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.InterruptionResource}}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.ResourceCollection{Octopus.Client.Model.InterruptionResource}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResourceCollection<InterruptionResource>>
  nameWithType: Task<ResourceCollection<InterruptionResource>>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.ResourceCollection<Octopus.Client.Model.InterruptionResource>>
  nameWithType.vb: Task(Of ResourceCollection(Of InterruptionResource))
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.ResourceCollection(Of Octopus.Client.Model.InterruptionResource))
  name.vb: Task(Of ResourceCollection(Of InterruptionResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.InterruptionResource
    name: InterruptionResource
    nameWithType: InterruptionResource
    fullName: Octopus.Client.Model.InterruptionResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.ResourceCollection`1
    name: ResourceCollection
    nameWithType: ResourceCollection
    fullName: Octopus.Client.Model.ResourceCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.InterruptionResource
    name: InterruptionResource
    nameWithType: InterruptionResource
    fullName: Octopus.Client.Model.InterruptionResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository.Submit*
  commentId: Overload:Octopus.Client.Repositories.Async.IInterruptionRepository.Submit
  name: Submit
  nameWithType: IInterruptionRepository.Submit
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository.Submit
- uid: Octopus.Client.Model.InterruptionResource
  commentId: T:Octopus.Client.Model.InterruptionResource
  parent: Octopus.Client.Model
  name: InterruptionResource
  nameWithType: InterruptionResource
  fullName: Octopus.Client.Model.InterruptionResource
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Octopus.Client.Model
  commentId: N:Octopus.Client.Model
  name: Octopus.Client.Model
  nameWithType: Octopus.Client.Model
  fullName: Octopus.Client.Model
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository.TakeResponsibility*
  commentId: Overload:Octopus.Client.Repositories.Async.IInterruptionRepository.TakeResponsibility
  name: TakeResponsibility
  nameWithType: IInterruptionRepository.TakeResponsibility
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository.TakeResponsibility
- uid: Octopus.Client.Repositories.Async.IInterruptionRepository.GetResponsibleUser*
  commentId: Overload:Octopus.Client.Repositories.Async.IInterruptionRepository.GetResponsibleUser
  name: GetResponsibleUser
  nameWithType: IInterruptionRepository.GetResponsibleUser
  fullName: Octopus.Client.Repositories.Async.IInterruptionRepository.GetResponsibleUser
- uid: System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
  commentId: T:System.Threading.Tasks.Task{Octopus.Client.Model.UserResource}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UserResource>
  nameWithType: Task<UserResource>
  fullName: System.Threading.Tasks.Task<Octopus.Client.Model.UserResource>
  nameWithType.vb: Task(Of UserResource)
  fullName.vb: System.Threading.Tasks.Task(Of Octopus.Client.Model.UserResource)
  name.vb: Task(Of UserResource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.UserResource
    name: UserResource
    nameWithType: UserResource
    fullName: Octopus.Client.Model.UserResource
  - name: )
    nameWithType: )
    fullName: )
