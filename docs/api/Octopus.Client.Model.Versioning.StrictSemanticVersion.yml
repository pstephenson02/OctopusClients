### YamlMime:ManagedReference
items:
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
  commentId: T:Octopus.Client.Model.Versioning.StrictSemanticVersion
  id: StrictSemanticVersion
  parent: Octopus.Client.Model.Versioning
  children:
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Version,System.String,System.String)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(System.Object)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(System.Object)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.GetHashCode
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Major
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Equality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Inequality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse(System.String)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.Release
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString(System.String,System.IFormatProvider)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter(System.String,System.IFormatProvider,System.String@)
  - Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse(System.String,Octopus.Client.Model.Versioning.StrictSemanticVersion@)
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion
  nameWithType: StrictSemanticVersion
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  type: Class
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionFactory.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: StrictSemanticVersion
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionFactory.cs
    startLine: 9
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nA strict SemVer implementation\n"
  example: []
  syntax:
    content: 'public class StrictSemanticVersion : IFormattable, IComparable, IComparable<StrictSemanticVersion>, IEquatable<StrictSemanticVersion>'
    content.vb: >-
      Public Class StrictSemanticVersion
          Implements IFormattable, IComparable, IComparable(Of StrictSemanticVersion), IEquatable(Of StrictSemanticVersion)
  inheritance:
  - System.Object
  derivedClasses:
  - Octopus.Client.Model.SemanticVersion
  implements:
  - System.IFormattable
  - System.IComparable
  - System.IComparable{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  - System.IEquatable{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: '#ctor(Octopus.Client.Model.Versioning.StrictSemanticVersion)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 22
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nCreates a SemanticVersion from an existing SemanticVersion\n"
  example: []
  syntax:
    content: public StrictSemanticVersion(StrictSemanticVersion version)
    parameters:
    - id: version
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    content.vb: Public Sub New(version As StrictSemanticVersion)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(Int32, Int32, Int32)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(Int32, Int32, Int32)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 33
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nCreates a SemanticVersion X.Y.Z\n"
  example: []
  syntax:
    content: public StrictSemanticVersion(int major, int minor, int patch)
    parameters:
    - id: major
      type: System.Int32
      description: X.y.z
    - id: minor
      type: System.Int32
      description: x.Y.z
    - id: patch
      type: System.Int32
      description: x.y.Z
    content.vb: Public Sub New(major As Integer, minor As Integer, patch As Integer)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.String)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(Int32, Int32, Int32, String)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(Int32, Int32, Int32, String)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Int32, System.Int32, System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 45
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nCreates a NuGetVersion X.Y.Z-alpha\n"
  example: []
  syntax:
    content: public StrictSemanticVersion(int major, int minor, int patch, string releaseLabel)
    parameters:
    - id: major
      type: System.Int32
      description: X.y.z
    - id: minor
      type: System.Int32
      description: x.Y.z
    - id: patch
      type: System.Int32
      description: x.y.Z
    - id: releaseLabel
      type: System.String
      description: Prerelease label
    content.vb: Public Sub New(major As Integer, minor As Integer, patch As Integer, releaseLabel As String)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(Int32, Int32, Int32, String, String)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(Int32, Int32, Int32, String, String)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Int32, System.Int32, System.Int32, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 58
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nCreates a NuGetVersion X.Y.Z-alpha#build01\n"
  example: []
  syntax:
    content: public StrictSemanticVersion(int major, int minor, int patch, string releaseLabel, string metadata)
    parameters:
    - id: major
      type: System.Int32
      description: X.y.z
    - id: minor
      type: System.Int32
      description: x.Y.z
    - id: patch
      type: System.Int32
      description: x.y.Z
    - id: releaseLabel
      type: System.String
      description: Prerelease label
    - id: metadata
      type: System.String
      description: Build metadata
    content.vb: Public Sub New(major As Integer, minor As Integer, patch As Integer, releaseLabel As String, metadata As String)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(Int32, Int32, Int32, IEnumerable<String>, String)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(Int32, Int32, Int32, IEnumerable<String>, String)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Int32, System.Int32, System.Int32, System.Collections.Generic.IEnumerable<System.String>, System.String)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 71
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nCreates a NuGetVersion X.Y.Z-alpha.1.2#build01\n"
  example: []
  syntax:
    content: public StrictSemanticVersion(int major, int minor, int patch, IEnumerable<string> releaseLabels, string metadata)
    parameters:
    - id: major
      type: System.Int32
      description: X.y.z
    - id: minor
      type: System.Int32
      description: x.Y.z
    - id: patch
      type: System.Int32
      description: x.y.Z
    - id: releaseLabels
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Release labels that have been split by the dot separator
    - id: metadata
      type: System.String
      description: Build metadata
    content.vb: Public Sub New(major As Integer, minor As Integer, patch As Integer, releaseLabels As IEnumerable(Of String), metadata As String)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  nameWithType.vb: StrictSemanticVersion.StrictSemanticVersion(Int32, Int32, Int32, IEnumerable(Of String), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Int32, System.Int32, System.Int32, System.Collections.Generic.IEnumerable(Of System.String), System.String)
  name.vb: StrictSemanticVersion(Int32, Int32, Int32, IEnumerable(Of String), String)
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Version,System.String,System.String)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Version,System.String,System.String)
  id: '#ctor(System.Version,System.String,System.String)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(Version, String, String)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(Version, String, String)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Version, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 76
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: protected StrictSemanticVersion(Version version, string releaseLabel = null, string metadata = null)
    parameters:
    - id: version
      type: System.Version
    - id: releaseLabel
      type: System.String
    - id: metadata
      type: System.String
    content.vb: Protected Sub New(version As Version, releaseLabel As String = Nothing, metadata As String = Nothing)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(Int32, Int32, Int32, Int32, String, String)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(Int32, Int32, Int32, Int32, String, String)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Int32, System.Int32, System.Int32, System.Int32, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 81
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: protected StrictSemanticVersion(int major, int minor, int patch, int revision, string releaseLabel, string metadata)
    parameters:
    - id: major
      type: System.Int32
    - id: minor
      type: System.Int32
    - id: patch
      type: System.Int32
    - id: revision
      type: System.Int32
    - id: releaseLabel
      type: System.String
    - id: metadata
      type: System.String
    content.vb: Protected Sub New(major As Integer, minor As Integer, patch As Integer, revision As Integer, releaseLabel As String, metadata As String)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(Int32, Int32, Int32, Int32, IEnumerable<String>, String)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(Int32, Int32, Int32, Int32, IEnumerable<String>, String)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Int32, System.Int32, System.Int32, System.Int32, System.Collections.Generic.IEnumerable<System.String>, System.String)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 86
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: protected StrictSemanticVersion(int major, int minor, int patch, int revision, IEnumerable<string> releaseLabels, string metadata)
    parameters:
    - id: major
      type: System.Int32
    - id: minor
      type: System.Int32
    - id: patch
      type: System.Int32
    - id: revision
      type: System.Int32
    - id: releaseLabels
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: metadata
      type: System.String
    content.vb: Protected Sub New(major As Integer, minor As Integer, patch As Integer, revision As Integer, releaseLabels As IEnumerable(Of String), metadata As String)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  nameWithType.vb: StrictSemanticVersion.StrictSemanticVersion(Int32, Int32, Int32, Int32, IEnumerable(Of String), String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Int32, System.Int32, System.Int32, System.Int32, System.Collections.Generic.IEnumerable(Of System.String), System.String)
  name.vb: StrictSemanticVersion(Int32, Int32, Int32, Int32, IEnumerable(Of String), String)
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)
  id: '#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)'
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: StrictSemanticVersion(Version, IEnumerable<String>, String, Boolean)
  nameWithType: StrictSemanticVersion.StrictSemanticVersion(Version, IEnumerable<String>, String, Boolean)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Version, System.Collections.Generic.IEnumerable<System.String>, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: .ctor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 91
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: protected StrictSemanticVersion(Version version, IEnumerable<string> releaseLabels, string metadata, bool preserveMissingComponents = false)
    parameters:
    - id: version
      type: System.Version
    - id: releaseLabels
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: metadata
      type: System.String
    - id: preserveMissingComponents
      type: System.Boolean
    content.vb: Protected Sub New(version As Version, releaseLabels As IEnumerable(Of String), metadata As String, preserveMissingComponents As Boolean = False)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  nameWithType.vb: StrictSemanticVersion.StrictSemanticVersion(Version, IEnumerable(Of String), String, Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion(System.Version, System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Boolean)
  name.vb: StrictSemanticVersion(Version, IEnumerable(Of String), String, Boolean)
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Major
  commentId: P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Major
  id: Major
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Major
  nameWithType: StrictSemanticVersion.Major
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Major
  type: Property
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Major
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 114
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nMajor version X (X.y.z)\n"
  example: []
  syntax:
    content: public int Major { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Major As Integer
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Major*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor
  commentId: P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor
  id: Minor
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Minor
  nameWithType: StrictSemanticVersion.Minor
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor
  type: Property
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Minor
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 122
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nMinor version Y (x.Y.z)\n"
  example: []
  syntax:
    content: public int Minor { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Minor As Integer
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch
  commentId: P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch
  id: Patch
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Patch
  nameWithType: StrictSemanticVersion.Patch
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch
  type: Property
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Patch
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 130
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nPatch version Z (x.y.Z)\n"
  example: []
  syntax:
    content: public int Patch { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Patch As Integer
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels
  commentId: P:Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels
  id: ReleaseLabels
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: ReleaseLabels
  nameWithType: StrictSemanticVersion.ReleaseLabels
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels
  type: Property
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ReleaseLabels
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 138
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nA collection of pre-release labels attached to the version.\n"
  example: []
  syntax:
    content: public IEnumerable<string> ReleaseLabels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property ReleaseLabels As IEnumerable(Of String)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Release
  commentId: P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Release
  id: Release
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Release
  nameWithType: StrictSemanticVersion.Release
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Release
  type: Property
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Release
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 146
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nThe full pre-release label for the version.\n"
  example: []
  syntax:
    content: public string Release { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Release As String
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Release*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease
  commentId: P:Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease
  id: IsPrerelease
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: IsPrerelease
  nameWithType: StrictSemanticVersion.IsPrerelease
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease
  type: Property
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: IsPrerelease
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 162
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nTrue if pre-release labels exist for the version.\n"
  example: []
  syntax:
    content: public virtual bool IsPrerelease { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsPrerelease As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata
  commentId: P:Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata
  id: HasMetadata
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: HasMetadata
  nameWithType: StrictSemanticVersion.HasMetadata
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata
  type: Property
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: HasMetadata
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 179
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nTrue if metadata exists for the version.\n"
  example: []
  syntax:
    content: public virtual bool HasMetadata { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property HasMetadata As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata
  commentId: P:Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata
  id: Metadata
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: StrictSemanticVersion.Metadata
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata
  type: Property
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Metadata
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersion.cs
    startLine: 187
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nBuild metadata attached to the version.\n"
  example: []
  syntax:
    content: public virtual string Metadata { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property Metadata As String
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString
  id: ToNormalizedString
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: ToNormalizedString()
  nameWithType: StrictSemanticVersion.ToNormalizedString()
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ToNormalizedString
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 16
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nGives a normalized representation of the version.\n"
  example: []
  syntax:
    content: public virtual string ToNormalizedString()
    return:
      type: System.String
    content.vb: Public Overridable Function ToNormalizedString As String
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString
  id: ToString
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: StrictSemanticVersion.ToString()
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ToString
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 21
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString(System.String,System.IFormatProvider)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: StrictSemanticVersion.ToString(String, IFormatProvider)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: ToString
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 26
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public virtual string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type: System.String
    - id: formatProvider
      type: System.IFormatProvider
    return:
      type: System.String
    content.vb: Public Overridable Function ToString(format As String, formatProvider As IFormatProvider) As String
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter(System.String,System.IFormatProvider,System.String@)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter(System.String,System.IFormatProvider,System.String@)
  id: TryFormatter(System.String,System.IFormatProvider,System.String@)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: TryFormatter(String, IFormatProvider, out String)
  nameWithType: StrictSemanticVersion.TryFormatter(String, IFormatProvider, out String)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter(System.String, System.IFormatProvider, out System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: TryFormatter
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 39
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: protected bool TryFormatter(string format, IFormatProvider formatProvider, out string formattedString)
    parameters:
    - id: format
      type: System.String
    - id: formatProvider
      type: System.IFormatProvider
    - id: formattedString
      type: System.String
    return:
      type: System.Boolean
    content.vb: Protected Function TryFormatter(format As String, formatProvider As IFormatProvider, ByRef formattedString As String) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter*
  nameWithType.vb: StrictSemanticVersion.TryFormatter(String, IFormatProvider, ByRef String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter(System.String, System.IFormatProvider, ByRef System.String)
  name.vb: TryFormatter(String, IFormatProvider, ByRef String)
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.GetHashCode
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.GetHashCode
  id: GetHashCode
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: StrictSemanticVersion.GetHashCode()
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.GetHashCode()
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: GetHashCode
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 57
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(System.Object)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: StrictSemanticVersion.CompareTo(Object)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CompareTo
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 62
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public virtual int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Int32
    content.vb: Public Overridable Function CompareTo(obj As Object) As Integer
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo*
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: CompareTo(StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.CompareTo(StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CompareTo
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 67
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public virtual int CompareTo(StrictSemanticVersion other)
    parameters:
    - id: other
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Int32
    content.vb: Public Overridable Function CompareTo(other As StrictSemanticVersion) As Integer
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo*
  implements:
  - System.IComparable{Octopus.Client.Model.Versioning.StrictSemanticVersion}.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(System.Object)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(System.Object)
  id: Equals(System.Object)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: StrictSemanticVersion.Equals(Object)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(System.Object)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Equals
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 72
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Equals(StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.Equals(StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Equals
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 77
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public virtual bool Equals(StrictSemanticVersion other)
    parameters:
    - id: other
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Boolean
    content.vb: Public Overridable Function Equals(other As StrictSemanticVersion) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals*
  implements:
  - System.IEquatable{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)
  id: Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Equals(StrictSemanticVersion, VersionComparison)
  nameWithType: StrictSemanticVersion.Equals(StrictSemanticVersion, VersionComparison)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.VersionComparison)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Equals
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 85
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nTrue if the VersionBase objects are equal based on the given comparison mode.\n"
  example: []
  syntax:
    content: public virtual bool Equals(StrictSemanticVersion other, VersionComparison versionComparison)
    parameters:
    - id: other
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    - id: versionComparison
      type: Octopus.Client.Model.Versioning.VersionComparison
    return:
      type: System.Boolean
    content.vb: Public Overridable Function Equals(other As StrictSemanticVersion, versionComparison As VersionComparison) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)
  id: CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.VersionComparison)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: CompareTo(StrictSemanticVersion, VersionComparison)
  nameWithType: StrictSemanticVersion.CompareTo(StrictSemanticVersion, VersionComparison)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.VersionComparison)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: CompareTo
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 93
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nCompares NuGetVersion objects using the given comparison mode.\n"
  example: []
  syntax:
    content: public virtual int CompareTo(StrictSemanticVersion other, VersionComparison versionComparison)
    parameters:
    - id: other
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    - id: versionComparison
      type: Octopus.Client.Model.Versioning.VersionComparison
    return:
      type: System.Int32
    content.vb: Public Overridable Function CompareTo(other As StrictSemanticVersion, versionComparison As VersionComparison) As Integer
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Equality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Equality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: op_Equality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Equality(StrictSemanticVersion, StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.Equality(StrictSemanticVersion, StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equality(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Operator
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: op_Equality
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 102
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\n==\n"
  example: []
  syntax:
    content: public static bool operator ==(StrictSemanticVersion version1, StrictSemanticVersion version2)
    parameters:
    - id: version1
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    - id: version2
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(version1 As StrictSemanticVersion, version2 As StrictSemanticVersion) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Inequality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Inequality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: op_Inequality(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Inequality(StrictSemanticVersion, StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.Inequality(StrictSemanticVersion, StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Inequality(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Operator
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: op_Inequality
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 110
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\n!=\n"
  example: []
  syntax:
    content: public static bool operator !=(StrictSemanticVersion version1, StrictSemanticVersion version2)
    parameters:
    - id: version1
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    - id: version2
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(version1 As StrictSemanticVersion, version2 As StrictSemanticVersion) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: op_LessThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: LessThan(StrictSemanticVersion, StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.LessThan(StrictSemanticVersion, StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.LessThan(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Operator
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: op_LessThan
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 115
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public static bool operator <(StrictSemanticVersion version1, StrictSemanticVersion version2)
    parameters:
    - id: version1
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    - id: version2
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(version1 As StrictSemanticVersion, version2 As StrictSemanticVersion) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: op_LessThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(StrictSemanticVersion, StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.LessThanOrEqual(StrictSemanticVersion, StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.LessThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Operator
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: op_LessThanOrEqual
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 120
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  syntax:
    content: public static bool operator <=(StrictSemanticVersion version1, StrictSemanticVersion version2)
    parameters:
    - id: version1
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    - id: version2
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(version1 As StrictSemanticVersion, version2 As StrictSemanticVersion) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: op_GreaterThan(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: GreaterThan(StrictSemanticVersion, StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.GreaterThan(StrictSemanticVersion, StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.GreaterThan(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Operator
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: op_GreaterThan
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 128
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\n>\n"
  example: []
  syntax:
    content: public static bool operator>(StrictSemanticVersion version1, StrictSemanticVersion version2)
    parameters:
    - id: version1
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    - id: version2
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(version1 As StrictSemanticVersion, version2 As StrictSemanticVersion) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  id: op_GreaterThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion,Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(StrictSemanticVersion, StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.GreaterThanOrEqual(StrictSemanticVersion, StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.GreaterThanOrEqual(Octopus.Client.Model.Versioning.StrictSemanticVersion, Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Operator
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: op_GreaterThanOrEqual
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionBase.cs
    startLine: 136
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\n>=\n"
  example: []
  syntax:
    content: public static bool operator >=(StrictSemanticVersion version1, StrictSemanticVersion version2)
    parameters:
    - id: version1
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    - id: version2
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(version1 As StrictSemanticVersion, version2 As StrictSemanticVersion) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse(System.String)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse(System.String)
  id: Parse(System.String)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: StrictSemanticVersion.Parse(String)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse(System.String)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionFactory.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: Parse
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionFactory.cs
    startLine: 14
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nParses a SemVer string using strict SemVer rules.\n"
  example: []
  syntax:
    content: public static StrictSemanticVersion Parse(string value)
    parameters:
    - id: value
      type: System.String
    return:
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    content.vb: Public Shared Function Parse(value As String) As StrictSemanticVersion
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse(System.String,Octopus.Client.Model.Versioning.StrictSemanticVersion@)
  commentId: M:Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse(System.String,Octopus.Client.Model.Versioning.StrictSemanticVersion@)
  id: TryParse(System.String,Octopus.Client.Model.Versioning.StrictSemanticVersion@)
  parent: Octopus.Client.Model.Versioning.StrictSemanticVersion
  langs:
  - csharp
  - vb
  name: TryParse(String, out StrictSemanticVersion)
  nameWithType: StrictSemanticVersion.TryParse(String, out StrictSemanticVersion)
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse(System.String, out Octopus.Client.Model.Versioning.StrictSemanticVersion)
  type: Method
  source:
    remote:
      path: source/Octopus.Client/Model/Versioning/StrictSemanticVersionFactory.cs
      branch: docfx
      repo: https://github.com/pstephenson02/OctopusClients.git
    id: TryParse
    path: ../source/Octopus.Client/Model/Versioning/StrictSemanticVersionFactory.cs
    startLine: 29
  assemblies:
  - Octopus.Client
  namespace: Octopus.Client.Model.Versioning
  summary: "\nParse a version string\n"
  example: []
  syntax:
    content: public static bool TryParse(string value, out StrictSemanticVersion version)
    parameters:
    - id: value
      type: System.String
    - id: version
      type: Octopus.Client.Model.Versioning.StrictSemanticVersion
    return:
      type: System.Boolean
      description: false if the version is not a strict semver
    content.vb: Public Shared Function TryParse(value As String, ByRef version As StrictSemanticVersion) As Boolean
  overload: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse*
  nameWithType.vb: StrictSemanticVersion.TryParse(String, ByRef StrictSemanticVersion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse(System.String, ByRef Octopus.Client.Model.Versioning.StrictSemanticVersion)
  name.vb: TryParse(String, ByRef StrictSemanticVersion)
references:
- uid: Octopus.Client.Model.Versioning
  commentId: N:Octopus.Client.Model.Versioning
  name: Octopus.Client.Model.Versioning
  nameWithType: Octopus.Client.Model.Versioning
  fullName: Octopus.Client.Model.Versioning
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IComparable{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  commentId: T:System.IComparable{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  parent: System
  definition: System.IComparable`1
  name: IComparable<StrictSemanticVersion>
  nameWithType: IComparable<StrictSemanticVersion>
  fullName: System.IComparable<Octopus.Client.Model.Versioning.StrictSemanticVersion>
  nameWithType.vb: IComparable(Of StrictSemanticVersion)
  fullName.vb: System.IComparable(Of Octopus.Client.Model.Versioning.StrictSemanticVersion)
  name.vb: IComparable(Of StrictSemanticVersion)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  commentId: T:System.IEquatable{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<StrictSemanticVersion>
  nameWithType: IEquatable<StrictSemanticVersion>
  fullName: System.IEquatable<Octopus.Client.Model.Versioning.StrictSemanticVersion>
  nameWithType.vb: IEquatable(Of StrictSemanticVersion)
  fullName.vb: System.IEquatable(Of Octopus.Client.Model.Versioning.StrictSemanticVersion)
  name.vb: IEquatable(Of StrictSemanticVersion)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.#ctor
  name: StrictSemanticVersion
  nameWithType: StrictSemanticVersion.StrictSemanticVersion
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.StrictSemanticVersion
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
  commentId: T:Octopus.Client.Model.Versioning.StrictSemanticVersion
  parent: Octopus.Client.Model.Versioning
  name: StrictSemanticVersion
  nameWithType: StrictSemanticVersion
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Major*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.Major
  name: Major
  nameWithType: StrictSemanticVersion.Major
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Major
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor
  name: Minor
  nameWithType: StrictSemanticVersion.Minor
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Minor
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch
  name: Patch
  nameWithType: StrictSemanticVersion.Patch
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Patch
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels
  name: ReleaseLabels
  nameWithType: StrictSemanticVersion.ReleaseLabels
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.ReleaseLabels
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Release*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.Release
  name: Release
  nameWithType: StrictSemanticVersion.Release
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Release
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease
  name: IsPrerelease
  nameWithType: StrictSemanticVersion.IsPrerelease
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.IsPrerelease
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata
  name: HasMetadata
  nameWithType: StrictSemanticVersion.HasMetadata
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.HasMetadata
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata
  name: Metadata
  nameWithType: StrictSemanticVersion.Metadata
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Metadata
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString
  name: ToNormalizedString
  nameWithType: StrictSemanticVersion.ToNormalizedString
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToNormalizedString
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString
  name: ToString
  nameWithType: StrictSemanticVersion.ToString
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.ToString
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter
  name: TryFormatter
  nameWithType: StrictSemanticVersion.TryFormatter
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryFormatter
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.GetHashCode*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.GetHashCode
  name: GetHashCode
  nameWithType: StrictSemanticVersion.GetHashCode
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.GetHashCode
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo
  name: CompareTo
  nameWithType: StrictSemanticVersion.CompareTo
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.CompareTo
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Octopus.Client.Model.Versioning.StrictSemanticVersion}.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:System.IComparable{Octopus.Client.Model.Versioning.StrictSemanticVersion}.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: System.IComparable{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(StrictSemanticVersion)
  nameWithType: IComparable<StrictSemanticVersion>.CompareTo(StrictSemanticVersion)
  fullName: System.IComparable<Octopus.Client.Model.Versioning.StrictSemanticVersion>.CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  nameWithType.vb: IComparable(Of StrictSemanticVersion).CompareTo(StrictSemanticVersion)
  fullName.vb: System.IComparable(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).CompareTo(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<StrictSemanticVersion>.CompareTo
    fullName: System.IComparable<Octopus.Client.Model.Versioning.StrictSemanticVersion>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of StrictSemanticVersion).CompareTo
    fullName: System.IComparable(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals
  name: Equals
  nameWithType: StrictSemanticVersion.Equals
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equals
- uid: System.IEquatable{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  commentId: M:System.IEquatable{Octopus.Client.Model.Versioning.StrictSemanticVersion}.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  parent: System.IEquatable{Octopus.Client.Model.Versioning.StrictSemanticVersion}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(StrictSemanticVersion)
  nameWithType: IEquatable<StrictSemanticVersion>.Equals(StrictSemanticVersion)
  fullName: System.IEquatable<Octopus.Client.Model.Versioning.StrictSemanticVersion>.Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  nameWithType.vb: IEquatable(Of StrictSemanticVersion).Equals(StrictSemanticVersion)
  fullName.vb: System.IEquatable(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).Equals(Octopus.Client.Model.Versioning.StrictSemanticVersion)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<StrictSemanticVersion>.Equals
    fullName: System.IEquatable<Octopus.Client.Model.Versioning.StrictSemanticVersion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of StrictSemanticVersion).Equals
    fullName: System.IEquatable(Of Octopus.Client.Model.Versioning.StrictSemanticVersion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Octopus.Client.Model.Versioning.StrictSemanticVersion
    name: StrictSemanticVersion
    nameWithType: StrictSemanticVersion
    fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Octopus.Client.Model.Versioning.VersionComparison
  commentId: T:Octopus.Client.Model.Versioning.VersionComparison
  parent: Octopus.Client.Model.Versioning
  name: VersionComparison
  nameWithType: VersionComparison
  fullName: Octopus.Client.Model.Versioning.VersionComparison
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Equality*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Equality
  name: Equality
  nameWithType: StrictSemanticVersion.Equality
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Equality
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Inequality*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_Inequality
  name: Inequality
  nameWithType: StrictSemanticVersion.Inequality
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Inequality
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThan*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThan
  name: LessThan
  nameWithType: StrictSemanticVersion.LessThan
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.LessThan
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThanOrEqual*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: StrictSemanticVersion.LessThanOrEqual
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.LessThanOrEqual
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThan*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThan
  name: GreaterThan
  nameWithType: StrictSemanticVersion.GreaterThan
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.GreaterThan
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThanOrEqual*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: StrictSemanticVersion.GreaterThanOrEqual
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.GreaterThanOrEqual
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse
  name: Parse
  nameWithType: StrictSemanticVersion.Parse
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.Parse
- uid: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse*
  commentId: Overload:Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse
  name: TryParse
  nameWithType: StrictSemanticVersion.TryParse
  fullName: Octopus.Client.Model.Versioning.StrictSemanticVersion.TryParse
